Text,Label
"FileSecurity fails accessing file with path >= 260 characters Under .NET Core 2.1.104 (Windows 10 / 64-bit), [FileSecurity](https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem.AccessControl/src/System/Security/AccessControl/FileSecurity.cs#L606) fails to read permissions from file that have a path length exceeding 259 characters. Stack trace snippet: ``` Parameter name: name at System.Security.AccessControl.NativeObjectSecurity.CreateInternal(ResourceType resourceType, Boolean isContainer, String name, SafeHandle handle, AccessControlSections includeSections, Boolean createByName, ExceptionFromErrorCode exceptionFromErrorCode, Object exceptionContext) at System.Security.AccessControl.FileSystemSecurity..ctor(Boolean isContainer, String name, AccessControlSections includeSections, Boolean isDirectory) at System.Security.AccessControl.FileSecurity..ctor(String fileName, AccessControlSections includeSections) ``` [Sample code demostrating this](https://gist.github.com/scovetta/01a6bca7881d3772a2b7bcf71cecf6aa) A workaround for this is to prefix the path with `\\?\`, as shown below: ``` // Fails var fs = new FileSecurity(@""c:\temp\really-long-name.txt"", AccessControlSections.All); // Succeeds var fs = new FileSecurity(@""\\?\c:\temp\really-long-name.txt"", AccessControlSections.All); ``` It would be useful if the FileSecurity class (and probably others) could do this on the caller's behalf, or if that could cause breakage, then updating the FileSecurity [documentation](https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Security.AccessControl/FileSecurity.xml) to describe this (or if there's a better workaround).",5
Investigate if there is a duplicate code in the common folder for XmlSchema As @danmosemsft has mentioned in https://github.com/dotnet/corefx/issues/28055 there are two copies of XsdDateTime which might be the same: ``` C:\git\corefx\src\Common\src\System\Xml\Schema\XsdDateTime.cs C:\git\corefx\src\System.Private.Xml\src\System\Xml\Schema\XsdDateTime.cs ``` If that is the case there might be more copies of other files from XmlSchema as well. Investigate and remove any duplicate code.,6
"ManagedWebSocket implementation doesn't efficiently support reading when small buffer size used The end to end scenario is to allocate as little memory as possible for idle websockets since it's possible to have more concurrent websockets if we don't burn memory if there's no data (http://goroutines.com/10m). Today, the websocket implementation has an internal buffer that can be controlled during creation of the websocket. This buffer can be 14 bytes minimally (size of the largest websocket header) so specifying a buffer of that size would be ideal. The plan is to do it at both layers. Using libuv this is already the case and we're now trying to add it to the socket transport https://github.com/aspnet/KestrelHttpServer/pull/2393. SignalR also has to do it at the websocket layer https://github.com/aspnet/SignalR/pull/1603. The chain looks like this: ``` WebSocket.ReceiveAsync(0) HttpUpgradeStream.ReceiveAsync(14) // This is the internal buffer for the websocket header RequestBodyPipeReader.ReadAsync() // This is waiting on data to be written to the transport input Transport.Input.ReadAsync() // This is waiting on data to be read out of the socket. socket.ReceiveAsync(0) ``` Turns out there's an issue with the existing implementation where it tries to read up the internal buffer size per read size regardless of the buffer that was passed into ReceiveAsync: https://github.com/dotnet/corefx/blob/23165cee77ae4dd7a7645b7927872948bb27a73e/src/Common/src/System/Net/WebSockets/ManagedWebSocket.cs#L696-L702 This means we'll get data in 14 byte chunks even if we pass a 4K buffer in to fill. /cc @stephentoub @BrennanConroy",0
"[Proposal] Use Bitmapped Vector Tries for ImmutableList I'm wondering why aren't we using bitmapped Vector Tries for ImmutableList? Forgive me if this question has been asked. As far as I know, this data structure is used in Closure's PersistentVector, and ImmutableJS's List. I have a preliminary implementation and it shows that it's faster than the current implementation of the current ImmutableList. For getting sequential or random elements in the list, the trie is about 4 times faster, and for adding elements, it about 3 times faster. Of course, these numbers are the preliminary findings. For those who don't know what Bitmapped Vector Tries is: [Understanding Clojure's Persistent Vectors](https://hypirion.com/musings/understanding-persistent-vector-pt-1) [Immutable.js](https://facebook.github.io/immutable-js/)",7
Remove unused TestHelper.AsReadOnlySpan Missed one file from https://github.com/dotnet/corefx/pull/28962,3
"reorganize and cleanup some LoopbackServer code As we are writing more and more LoopbackServer based tests, seems like a good time to do a bit of refactoring and simplification. Several related changes: (1) Move nonessential code out of LoopbackServer itself. E.g. the websocket test code and the ""transfer"" code. These are only used by a couple very specific tests, and don't actually need to be in LoopbackServer. (2) Simplify a few things that are awkward today. For example, the Options object gets passed in to several different places and used in different ways. I changed it to only be passed in to CreateServerAsync. Another example: the callback you pass to AcceptSocketAsync always has to return a Task<List>, even though many uses don't care about this and just pass null. (3) Add the Connection object, which makes the callback from AcceptSocketAsync (now AcceptConnectionAsync) cleaner. Today you have to have four params on the callback, even though you often only care about one or two. Connection just encapsulates these args into a single object, and allows you to easily discover and call instance methods on this object. (4) Rename some core methods to make them more descriptive. (5) Fix usage in tests to reflect the updates. @stephentoub @davidsh @Priya91 @wfurt",0
"What API should I use to consume ETW? What API souuld I use to consume ETW: 1. System.Diagnostics.Tracing.EventSource (BCL) 2. Microsoft.Diagnostics.Tracing.EventSource (NuGet) 3. Microsoft.Diagnostics.Tracing.TraceEvent (NuGet) 4. krabsetw (NuGet) ? And where Microsoft.Diagnostics.Tracing.Logging fits in? I read this at https://blogs.technet.microsoft.com/office365security/hidden-treasure-intrusion-detection-with-etw-part-2/: > TraceEvent is a library used by the PerfView tool and has the benefits of being a well-designed .NET API. Unfortunately, it doesn’t perform well for scenarios where we want to keep memory usage to a minimum. System.Diagnostics.Tracing has the advantage of being part of the .NET BCL but we’ve observed intermittent exceptions and unexpected behavior in the past. Additionally, it suffers from the same memory consumption issue that TraceEvent does. > In response to these challenges, Office 365 Security chose to implement our own API with three primary goals: > •Intuitive and flexible API > •High performance – filtering events in the native layer > •Available both in .NET and native C++ > The result of this work is krabsetw, a library we’ve open-sourced under the MIT license. It contains both a native C++ API as well as a .NET API. This library is used in production today across Office 365 workloads on more than 100,000 machines. With filtering, we’re able to process more than more than 500 billion events per day, generating more than 7TB of data per day across the machines. > Is this still true?.. It is written one year ago (May 9, 2017), and other API's have updates since. I want to know what API I can depend on, if not now, at least in upcoming updates. Another question: Do I have to use these NuGets too? Microsoft.Diagnostics.Tracing.TraceEvent.SupportFiles Microsoft.Diagnostics.Tracing.EventRegister",11
"PlatformHandler_HttpClientHandler_Authentication_Test.PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates(statusCode: 510) failed on NETFX CI leg Failed on NETFX CI leg: ``` System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test.PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates(statusCode: 510) [FAIL] Assert.Contains() Failure Not found: (filter expression) In value: List<String> [""GET / HTTP/1.1"", ""Host: 127.0.0.1:51635"", ""Connection: Keep-Alive""] Stack Trace: at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass14_0.<<PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates>b__1>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<PreAuthenticate_FirstRequestNoHeader_SecondRequestVariousStatusCodes_ThirdRequestPreauthenticates>d__14.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) Finished: System.Net.Mail.Functional.Tests ```",0
"Add GetISOWeekOfYear() ## Rationale .Net don't implement [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar) - it have alternative scheme in: ```c# System.Globalization.Calendar.GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); ``` Unix `date` utility implements ISO 8601: ``` date +%V ``` In [PowerShell repo ](https://github.com/PowerShell/PowerShell/pull/6542) we use workaround described [here](https://blogs.msdn.microsoft.com/shawnste/2006/01/24/iso-8601-week-of-year-format-in-microsoft-net/) (see Keno's comment) for: ```powershell Get-Date -UFormat %V ``` .Net should have parity and native implementation. ISO 8601 is culture-independent so we can use static methods. If we are going in the direction I believe it make sense consider all ISO8601 objects and compatibility with Unix `date` utility. https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar - first week - last week - weeks per year http://man7.org/linux/man-pages/man1/date.1.html - `%g` last two digits of year of ISO week number (see %G) - `%G` year of ISO week number (see %V); normally useful only with %V - `%V` ISO week number, with Monday as first day of week (01..53) ### Proposed API ```c# namespace System.Globalization { public abstract class Calendar : ICloneable { public static class ISO { // All ISO 8601 objects (https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar) public static int GetWeekOfYear(DateTime time); public static int GetFirstWeekOfYear(DateTime time); public static int GetLastWeekOfYear(DateTime time); public static int GetWeeksPerYear(DateTime time); // Compatibility with Unix date utility (http://man7.org/linux/man-pages/man1/date.1.html) // %G year of ISO week number (see %V); normally useful only with %V public static int GetYearOfWeek(DateTime time); } } ``` Please note that the proposed API is a static and not instance member. The reason is ISO week is culture and calendar independent. ### Alternative Design ```C# namespace System.Globalization { public abstract class Calendar : ICloneable { // All ISO 8601 objects (https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar) public static int GetISOWeekOfYear(DateTime time); public static int GetISOFirstWeekOfYear(DateTime time); public static int GetISOLastWeekOfYear(DateTime time); public static int GetISOWeeksPerYear(DateTime time); // Compatibility with Unix date utility (http://man7.org/linux/man-pages/man1/date.1.html) // %G year of ISO week number (see %V); normally useful only with %V public static int GetISOYearOfISOWeek(DateTime time); } } ```",19
"Enable EnvelopedCms to work with an external private key There are two scenarios that are not currently possible with the EnvelopedCms class. 1) Decrypting the contents of an EnvelopedCms with an unattached/unattachable key (a la RSAKeyVault). 2) Being able to prove which certificate+key were used for the decryption operation, because the existing members all dive into the CurrentUser\My certificate store looking for other candidate certs+keys. (https://stackoverflow.com/questions/49815448/can-envelopedcms-be-used-to-identify-the-encryption-certificate) The strawman suggestion is a new Decrypt overload which does not initiate a store search, and happens to allow specifying a private key. ```diff public partial class EnvelopedCms { + public void Decrypt(X509Certificate2 certificate, AsymmetricAlgorithm privateKey) => throw null; } ``` Maybe it also makes sense for the RecipientInfo overload. Verifying the private key really belongs to the public key is a little trickier. Maybe it's not important for Decrypt, since the certificate finds the matching recipient key info and the private key turns that back into the symmetric key... it either works or it doesn't. Maybe this would be `TryDecrypt`, and returns false if the cert matches no recipients?",3
"double.TryParse of ""0,12"" incorrectly returns true with result of 0.12. When executing the following the return value is true (parsing succeeded) and the number value becomes 0.12: `double.TryParse(""0,12"", NumberStyles.Number, CultureInfo.GetCultureInfo(""en-US""), out number)` The input is not a valid US number since the comma proceeded by a zero and followed by only 2 digits. US numbers with a comma are only valid if the integer part is a 1 to 3 digits (but not a sequence of zero digits) followed by zero or more groups of 3 digits separated by commas. VisualStudio 2015 Version 14.0.25431.01 Update 3 Microsoft .NET Framework Version 4.7.02556 Build for x64 and .Net 4.5 Installed Version: Community",4
"Need a thread-safe/scalable credential cache for use in System.Net.Http HttpClientHandler implementations supporting preauthenticate currently use a CredentialCache to store credentials, but CredentialCache is not thread-safe, and since requests might be modifying the cache, all access to it needs to be locked. That means when preauthenticate is enabled, every request needs to take the same lock while accessing the cache to see if it contains credentials for use in that request.",0
"[Regression] Test failure: System.IO.Tests.* / DeleteRoot Affected OS: * All Linux & Mac OS Affected tests: * System.IO.Tests.DirectoryInfo_Delete / DeleteRoot * System.IO.Tests.DirectoryInfo_Delete_bool / DeleteRoot * System.IO.Tests.Directory_Delete_str / DeleteRoot * System.IO.Tests.Directory_Delete_str_bool / DeleteRoot Failure: ``` Assert.Throws() Failure Expected: typeof(System.IO.IOException) Actual: typeof(System.IO.DirectoryNotFoundException): Could not find a part of the path '/'. at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive) ``` ## History of failures Day | Build | Details -- | -- | -- 2/9 | 20180209.01 | 56x (14 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.IO.FileSystem.Tests) 2/9 | 20180209.03 | 48x (12 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.03/workItem/System.IO.FileSystem.Tests) 2/9 | 20180209.05 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.05/workItem/System.IO.FileSystem.Tests) 2/10 | 20180210.01 | 60x (15 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.IO.FileSystem.Tests) 2/10 | 20180210.03 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.IO.FileSystem.Tests)",5
Add Iran Timezone test case ,4
Replaced ReadOnlySequence unsafe casting to safe casting in Seek method Replaced ReadOnlySequence unsafe casting to safe casting in Seek method. Part of #28920,10
Disable GetAsync_IPv6LinkLocalAddressUri_Success Disabled test tracked in #28749. @dotnet-bot test Outerloop Windows x64 Debug Build @dotnet-bot test Outerloop Linux x64 Debug Build,0
"Debugging on Unix doesn't load symbols When trying to debug any corefx test in a Unix system the debugger is not able to load symbols. The only symbol that is correctly loaded is System.Private.Corelib one. All the symbols are present and the debugger output's is: ``` Loaded '/home/usr/corefx/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App/9.9.9/System.Reflection.Emit.ILGeneration.dll'. Module was built without symbols. Loaded '/home/usr/corefx/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App/9.9.9/System.Reflection.Primitives.dll'. Module was built without symbols. Loaded '/home/usr/corefx/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App/9.9.9/System.Buffers.dll'. Module was built without symbols. ``` and this for all the loaded assemblies. Note that all the pdbs in corefx live next to the dlls. I remember this used to work before. This is happening with both VSCode and with Visual Studio using Remote Debugging. The symbols are found, but they are not loaded saying `Binary was not built with debug information` ![image](https://user-images.githubusercontent.com/22899328/37756176-c5f08498-2d65-11e8-9aac-81c5977fa4f3.png) The weird thing is that the System.Private.Corelib symbols are loaded correctly, so maybe this is happening because of the way we're building the unix pdbs in corefx? cc: @danmosemsft @weshaggard @jkotas @ericstj",1
"unable to parse IPv6 link-local address with interface name https://tools.ietf.org/html/rfc4007#section-11.3 The example shows ff08::9abc%interface10 and Unix systems generally use address%if_name notation. (https://en.wikipedia.org/wiki/IPv6_address) > furt@Ubuntu:~/ipv6$ ping6 fe80::108e:ac5e:1999:d42f%enp0s5 > PING fe80::108e:ac5e:1999:d42f%enp0s5(fe80::108e:ac5e:1999:d42f) 56 data bytes > .... > however ```C# IPAddress.Parse(""fe80::108e:ac5e:1999:d42f%enp0s5"") Unhandled Exception: System.FormatException: An invalid IP address was specified. ---> System.Net.Sockets.SocketException: Invalid argument ``` throws exception. The c# parser assumes that the zoneid can only be integer. On Linux and macOS this can be either interface index or valid interface name.",0
"ReadOnlySequence's Enumerator returns different results for same struct. Repro: I am using Pipelines to obtain a ReadOnlySequence from a PipeReader. I am then iterating over the number of chunks in the buffer to count the buffer size, and then iterating again to add them into an array. Something like: ```C# var pipe = new Pipe(new SlabMemoryPool()); ... var readResult = pipe.Reader.ReadAsync(); var readOnlySequence = readResult.Buffer; var nChunks = 0; for (var memory in readOnlySequence) { nChunks++; } var handles = new MemoryHandle[nChunks]; var currentChunk = 0; for (var memory in readOnlySequence) { handles[currentChunk] = new MemoryHandle(); currentChunk++; } ``` The writer to the pipe is writing and flushing memory in a loop: ```c# pipe.Writer.Write(buffer); pipe.Writer.FlushAsync(); ``` My hypothesis is that the enumerator is skipping empty segments somehow. cc/ @pakrym @davidfowl",5
"Add Quaternion.Divide(Quaternion, float) I noticed that Quaternion.Divide Method has no overload to dived a quaternion by a scalar value, unlike the Multiply method! so I suggest to add it! I used this: ``` Dim Q1 = New Quaternion(1, -1, 2, -4) Dim Q2 = New Quaternion(-1, 1, -2, -4) * (1 / Q1.LengthSquared()) ``` Edit: After looking at the Inverse Methode source code, it appears it is the Reciprocal Method but with a confusing name! Inverse in math can mean addative Inverse or multiplicative inverse. SIMD-enabled types are not consistant with naming conventions of .net. One odd examole is implementing the Length of these types as a method not a property! I expected to find a Quaternion.Reciprocal as there is a Complex.Reciprocal, but found an Inverse method instead. Having a consistant naming convention makes new features easy to learn and thier methods names easy to remember. Also I think many of static members need to be instance members.",17
"Tests are not waiting on child processes when run Some tests use RemoteInvoke to launch child processes. Generally they should call Dispose() on the RemoteInvokeHandle that returns in order to WaitForExit on the process. If they forget, execution will continue and any assertion failure (or other unhandled exception) in the child process will not prevent the test passing. Eg.,: ``` Running tests... Start time: 22:29:13.23 xUnit.net console test runner (64-bit .NET Core) Copyright (C) 2014 Outercurve Foundation. Discovering: System.Text.RegularExpressions.Tests Discovered: System.Text.RegularExpressions.Tests Starting: System.Text.RegularExpressions.Tests Unhandled Exception: Xunit.Sdk.ThrowsException: Assert.Throws() Failure Expected: typeof(System.ArgumentException) Actual: typeof(System.TypeInitializationException): The type initializer for 'System.Text.RegularExpressions.Regex' threw an exception. at Xunit.Assert.Throws(Type exceptionType, Exception exception) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.a ssert\Asserts\ExceptionAsserts.cs:line 143 at Xunit.Assert.Throws[T](Func`1 testCode) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\Excepti onAsserts.cs:line 36 at System.Text.RegularExpressions.Tests.RegexConstructorTests.<>c.<StaticCtor_InvalidTimeoutObject_ExceptionThrown >b__3_0() in C:\git\corefx\src\System.Text.RegularExpressions\tests\Regex.Ctor.Tests.cs:line 85 --- End of stack trace from previous location where exception was thrown --- at RemoteExecutorConsoleApp.Program.Main(String[] args) in C:\git\corefx\src\Common\tests\System\Diagnostics\Remot eExecutorConsoleApp\RemoteExecutorConsoleApp.cs:line 92 Finished: System.Text.RegularExpressions.Tests === TEST EXECUTION SUMMARY === System.Text.RegularExpressions.Tests Total: 802, Errors: 0, Failed: 0, Skipped: 0, Time: 2.042s Finished running tests. End time=22:29:15.68, Exit code = 0 ``` This behavior is slightly obscured when running on a dev machine, as runtests.cmd is generally wrapped inside MSBuild, and MSBuild, after WaitforExit hsa returned on the process it launched, will then wait indefinitely for the console output streams to reach EOF. Those do not return until the grandchild remote processes have exited (@JeremyKuhne @stephentoub I'm unclear why this is - do they automatically duplicate the console handles from the test process which is MSBuild's direct child?). When the grandchild fails in this situation, the exception will appear in the console, but the test will already have succeeded and be counted as such. When Helix runs the tests using runtest.cmd directly, MSBuild is not involved so if Dispose() is forgotten there is no wait on the grandchildren and they are completely ignored. https://github.com/dotnet/corefx/pull/26543#issuecomment-365021333 is an example. We should add a finalizer to RemoteInvokeHandle which will mean that at least some waiting will occur on those child processes: they still wont fail the test, as it's too late, but their console output is more likely to show up in the log. (XUnit does not do WaitForPendingFinalizers so I figure if they don't complete within X seconds - I think 40 seconds - of the XUnit process completing, the output still won't show up.) @stephentoub does this sound like the best we can do?",1
DO NOT MERGE: test HttpClient cookie handling ,0
"Test failure: System.IO.Tests.Perf_Directory/RecursiveCreateDirectory(depth: 1000, times: 1) All RecursiveCreateDirectory tests are failing https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180323.06/workItem/System.IO.FileSystem.Performance.Tests The test `System.IO.Tests.Perf_Directory/RecursiveCreateDirectory(depth: 1000, times: 1)` has failed. System.Exception : Benchmark did not execute any iterations. Please use one of the iteration methods in Microsoft.Xunit.Performance.Benchmark Stack Trace: at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod) --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180323.06 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64 - Release - OSX.1012.Amd64-x64 - Release - Alpine.36.Amd64-x64 - Release - RedHat.69.Amd64-x64 - Release - Fedora.27.Amd64-x64 - Release - Fedora.26.Amd64-x64 - Release - SLES.12.Amd64-x64 - Release - OpenSuse.423.Amd64-x64 - Release - Ubuntu.1804.Amd64-x64 - Release - Ubuntu.1710.Amd64-x64 - Release - Ubuntu.1604.Amd64-x64 - Release - Ubuntu.1404.Amd64-x64 - Release - Debian.90.Amd64-x64 - Release - Debian.87.Amd64-x64 - Release - RedHat.74.Amd64-x64 - Release - RedHat.73.Amd64-x64 - Release - Centos.74.Amd64-x64 - Release - Centos.73.Amd64-x64 - Release",5
"HttpClient: Bunch of UAP tests disabled with closed issue #20010 There are a bunch of HttpClient tests disabled on UAP with a reference to #20010. However, this issue is closed. We should either change the tests to be disabled with a better issue/explanation, or reenable the tests.",0
"Update System.Memory package description to be complete Right now it only includes Span within the description. https://github.com/dotnet/corefx/blob/3c708ab64564304fed352355b52e2ea047860e4d/pkg/descriptions.json#L1004 cc @KrzysztofCwalina, @dotnet/corefxlab-contrib, @pakrym, @davidfowl",10
"Impersonation I need to do a impersonation in one of my services, but this service will run on a linux container. In windows i use like that [DllImport(""advapi32.dll"", SetLastError = true, CharSet = CharSet.Unicode)] I could not find any reference do this situation, could you have example of that?",3
"Use shared SocketsHttpHandler for some ClientWebSocket options Currently we're creating a new SocketsHttpHandler for each ClientWebSocket. This change makes it so that if mostly default options are used (namely no credentials, no proxy, no cookies, and no client certificates), we'll use a shared handler instance. cc: @geoffkizer, @davidsh, @pjanotti",0
"Disable StartInfo_TextFile_ShellExecute for NETFX Relates to https://github.com/dotnet/corefx/issues/20388 It's now disabled for several platforms, and for 3 frameworks, but still has value running for netcoreapp where it seems to be stable currently. Multiple ActiveIssue attributes are allowed.",11
"Use FileSystemName in FileSystemWatcher - Uses newer spanified version in FileSystemName - Doesn't allow extended match chars `<`, `>`, `""` as these are legal in Unix cc: @pjanotti, @danmosemsft Note that there are a lot of spanification opportunities here that I'll be creating issues to follow up on.",5
CurrentUserOnly should allow multiple servers on Windows Fix #28371,5
"XslCompiledTransform fails on high number of xsl:when elements .NET core 2.0 (project in Visual Studio 2017 v15.5.6 ) crashes with StackOverflowException when a very high number (2725+) of xsl:when elements are encountered in a choice-element. .NET framework 4.7 has the same problem, but fails (""The stylesheet is too complex"") or crashes with stackoverflowexception (with the restriction disabled in app.config) on around 780 elements) (this has been reported separately) Below is code which reproduces the problem. Change the number to 2724 and it will complete successfully in my environment. static void Main() { var xslt = new StringBuilder(); xslt.AppendLine(@""<?xml version=""""1.0"""" encoding=""""utf-8""""?> <xsl:stylesheet version=""""1.0"""" xmlns:xsl=""""http://www.w3.org/1999/XSL/Transform""""> <xsl:output method=""""html"""" encoding=""""utf-8"""" /><xsl:template name=""""test""""><xsl:choose>""); for (int n = 1; n < 2725; n++) { xslt.AppendLine($""<xsl:when test=\""@V='k{n}'\"">Value {n}</xsl:when>""); } xslt.AppendLine(@""</xsl:choose></xsl:template></xsl:stylesheet>""); var ms = new MemoryStream(Encoding.UTF8.GetBytes(xslt.ToString())); var transform = new XslCompiledTransform(true); using (var rdr = XmlReader.Create(ms)) { transform.Load(rdr); } }",6
"Updating the package index for UAP and updating buildtools This will update the packageIndex to show the correct data of the packages that we shipped on UAP RS3 and it will also take care of the buildtools update that will get the new NuGet mappings. cc: @weshaggard @ericstj Given that the uap builds are now working on master, this PR will basically replicate the previous PR I created against release/2.1 but on master. I haven't yet merged the other one, and so if this goes in I will just close the release/2.1 one.",1
"Removing SequenceMarshal.TryGetMemoryManager for ReadOnlySequence Fixes https://github.com/dotnet/corefx/issues/28959 cc @pakrym, @KrzysztofCwalina, @davidfowl",10
Trying to collect info about ping test failures in macOS 10.12 See #26358,0
CurlHandler: set ssl options to match X509 machine store certificates Fixes https://github.com/dotnet/corefx/issues/28002 CC @caesar1995 @stephentoub @bartonjs @wfurt @karelz,0
"Proposal TypeListAttribute # Suggestion: Define a TypeListAttribute tilke this: ``` public class TypeListAttribute : Attribute { public Type[] Types; public TypeListAttribute(params Type[] types) { Types = types; } } ``` This attribute can be used to mark generic classes like this: ``` [TypeList(typeof(int), typeof(float), typeof(byte))] class foo<T> { void DoSomething(T x, T y) { T z = x + y; } } ``` Then C# or VB.NET can use the TypeListAttribute.Types[] to validate the generic class code. The compiler should test the foo<T> for all these types, i.e. foo< int >, foo< float > , foo< byte >. if the code of the foo class is ok in all these cases, then it should compile correctly (i.e doesn't complain about the x + y operation) . # Benefit: This will solve some problems when there is no common interface to use as a constraint. for more details: https://github.com/dotnet/corefx/issues/27167 # Note: I asked also for C# syntax to define the list to avoid the long attribute syntax (https://github.com/dotnet/csharplang/issues/1388). This would be: ``` class foo<T> where T: {int, float, byte} { void DoSomething(T x, T y) { T z = x + y; } } ```",4
"Installation guidance for Ubuntu 18.04 Ubuntu 18 is listed as supported, but there doesn't seem to be any apt feed or deb package download link for it. I've tried taking the 17.10 links/feeds and replacing version numbers / os codenames, but they all 404. Please provide download links/install instructions for Ubuntu 18.",1
"Ability to wait for a specific amount of data Often a protocol knows how much data it is waiting for (TLS frames being one example, size headered binary protocols being another). Instead of ReadAsync() then you check the header and you see you don't have enough, so you ReadAsync() check if you have enough and continue doing loops until you have a complete frame. If you could do a ""ReadAsync(xxxxx)"" and it wouldn't return unless there was an error/complete or at least that amount of data was available it would solve extra looping in every downstream protocol /cc @Drawaes",5
"Regex.Split with RegexOptions.RightToLeft implementation/documentation behavior I wonder if the current Regex.Split implementation when using in combination with RegexOptions.RightToLeft is what a user would expect. See the below example: ```csharp > Regex.Split(""111-a1b2-111"", @""a(\d)b(\d)"") string[4] { ""111-"", ""1"", ""2"", ""-111"" } > Regex.Split(""111-a1b2-111"", @""a(\d)b(\d)"", RegexOptions.RightToLeft) string[4] { ""111-"", ""2"", ""1"", ""-111"" } ``` The only difference is that the capture groups, if some are used are evaluated from right to left, but not the matches themselves. That's because in the implementation the list of string is reversed at the end but the capture groups are added always from left to right (for loop): (https://github.com/dotnet/corefx/blob/master/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.Split.cs#L158). The docs state the following (https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options#right-to-left-mode) > The RegexOptions.RightToLeft option changes the search direction only; it does not interpret the regular expression pattern from right to left. That could indicate that the current behavior is fine but that with this rule an iterator implementation is not possible because you would already need the last result (the first from left to right) when you just got the first result (the last from left to right). I think the only way to implement an iterator here is to change the behavior to return the results right to left when RegexOptions.RightToLeft is chosen. cc @vancem @danmosemsft @jkotas @stephentoub @terrajobst @joshfree",18
"CI tests failing with WindowsCryptographicException on Windows10 https://mc.dot.net/#/user/dotnet-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a9913ea9b9bd68f11ca8707204b7d20a6ab98cf9/workItem/System.Net.Http.WinHttpHandler.Unit.Tests Windows.10.Amd64.Open-x64-Debug ```text Unhandled Exception of Type Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException Message : Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : The profile for the user is a temporary profile Stack Trace : at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\Internal\Cryptography\Pal.Windows\CertificatePal.Import.cs:line 153 at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\Internal\Cryptography\Pal.Windows\CertificatePal.Import.cs:line 88 at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\Internal\Cryptography\Pal.Windows\CertificatePal.Import.cs:line 21 at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\X509Certificate.cs:line 81 at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\X509Certificate.cs:line 62 at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\X509Certificate2.cs:line 51 at System.Net.Http.WinHttpHandlerUnitTests.ClientCertificateHelper..ctor() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\tests\UnitTests\ClientCertificateHelper.cs:line 14 at System.Net.Http.WinHttpHandlerUnitTests.ClientCertificateScenarioTest.get_ValidClientCertificates() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\tests\UnitTests\ClientCertificateScenarioTest.cs:line 18 ``` cc @davidsh, @wfurt, @karelz, @danmosemsft",3
Add High level System.Reflection.Metadata API Please add high-level APIs that can be used without having to deference/follow all the pointers/handles. I would love to just load an assembly and loop through the tree.,9
NuGet build failures in 'prodcon/corefx/master/' - '20180416.01' @dotnet-mc-bot commented on [Sun Apr 15 2018](https://github.com/dotnet/core-eng/issues/3292) There were a set of failures during this build. Here is a summary of these: * https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1594896 - **Agent:** DDVSOLINUXAGE007 - **Error log:** /root/corefx-1594896/external/runtime/runtime.depproj : error NU1102: - Found 414 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json [ Nearest version: 2.1.0-preview3-26416-01 ]... @mmitche,1
"CurlHandler: container cookies are not sent if you add a Cookie header to the header collection If you add a Cookie header via ```csharp requestMessage.Headers.Add(""Cookie"", ""A=1""); ``` This causes cookies from the cookie container to not be sent. WinHttpHandler appends the cookies from the cookie container to the specified Cookie: header.",0
[WIP] Prototype removing RunningLength and delegating seek to IMemoryList API Review issue: https://github.com/dotnet/corefx/issues/27435 /cc @davidfowl @KrzysztofCwalina @ahsonkhan,5
Cleanup some System.Runtime.WindowsRuntime.* dependencies on CoreLib internals Contributes to https://github.com/dotnet/coreclr/issues/17768,4
"Guideline 14. formulation ('within type declarations') is unclear > 14. Fields should be specified at the top within type declarations This is very unclear to our team. It seems that a 'type declaration' is either a class or a struct declaration, and only classes and structs can have fields. Therefore it seems that either this information is redundant, or it should mean something else.",14
"Test failure: System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests/DotDecimalExtremaAndValuesInvariantParse(type: typeof(double), min: \""1.0\"", max: \""3.0\"", value: \""2.99999999999999\"") Opened on behalf of @Sunny-pu The test `System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests/DotDecimalExtremaAndValuesInvariantParse(type: typeof(double), min: \""1.0\"", max: \""3.0\"", value: \""2.99999999999999\"")` has failed. Assert.Throws() Failure\r Expected: typeof(System.ArgumentException)\r Actual: (No exception was thrown) Stack Trace: at System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndValuesInvariantParse(Type type, String min, String max, String value) Build : Master - 20180312.01 (UWP F5 Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64 - Release Details:https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180312.01/workItem/System.ComponentModel.Annotations.Tests/analysis/xunit/System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests~2FDotDecimalExtremaAndValuesInvariantParse(type:%20typeof(double),%20min:%20%5C%221.0%5C%22,%20max:%20%5C%223.0%5C%22,%20value:%20%5C%222.99999999999999%5C%22)",2
Add support for secp256k1 corefx/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/ECCurve.NamedCurves.cs,3
"Disable SocketsHttpHandler's concurrent content sends SocketsHttpHandler currently has some support for allowing request content sending to run concurrently with response content receiving. However, we don't actually have a need for this, and there are a lot of subtleties that would need to be made robust, e.g. how to handle exceptions that occur concurrently in the sending and receiving. For now, we're removing it. Unless ExpectContinue is set to true, we just send the content before receiving the response, and if it is set, we start the send and then wait for it once we've received the final status code from the server. cc: @geoffkizer, @davidsh, @wfurt Fixes #https://github.com/dotnet/corefx/issues/27324",0
"Unify setting null CookieContainer behavior on HttpClientHandler For HttpClientHandler layer (above the WinHttpHandler layer on Windows), we should be consistent and throw the exception in the CookieContainer setter when null value is provided, to match .NET Framework's behavior. This would keep the same behavior across all platforms for the setter of the HttpClientHandler.CookieContainer property. Close: #3205",0
"SocketsHttpHandler, support for custom endpoint address resolving Hello. I created my first commit to corefx fork / System.Net.Http project with small improvement to SocketsHttpHandler where user can now have more control over endpoint address resolving. For example user can prefer IPv6 resolving over IPv4 version or even write custom logic which completely overrides system DNS resolve. This feature is optional and should be backwards compatible. Please check if this feature could be generally useful :) @stephentoub @geoffkizer @karelz",0
"Provider-independent mechanism for automatic database command preparation ADO.NET has an explicit Prepare() API which can be very important for performance - the effect is dramatic on PostgreSQL and there's a potential for big gains also on Sqlite and on SqlServer (where the operation is currently a no-op, but could obviate sending the query SQL and resultset shape description on each query). Unfortunately, when using data layers above ADO.NET (dapper, EF Core), it's usually impossible to benefit from preparation as the `DbCommand` API is hidden away. Npgsql deals with this problem via an internal, opt-in ""autoprepare"" feature - it counts the number of times a given SQL has been executed, and once a certain threshold is passed, automatically prepares the command. To avoid preparing too many commands (which could put a strain on the database), an LRU cache ejects old commands. We should consider promoting this mechanism (or building something similar) to ADO.NET, so that all providers can benefit from it. This mechanism would implement all of the necessary tracking, and would call `Prepare()` when the proper threshold is passed. Note: when the threshold is reached, Npgsql currently executes both the preparation and the execution in a single round-trip, this can be important for thrashing scenarios. Note: we should provide a way for specific providers to opt out of this when preparation really is a no-op (like current SqlClient), to avoid the overhead and added complexity.",15
"Dedup FormattingHelpers.cs / FormattingHelpers.CountDigits.cs These routines had been copy-and-pasted into this file in coreclr to enable similar optimizations there. Now that the shared file has flowed back to corefx, dedup. cc: @ahsonkhan",10
Add MethodDefinition.GetSemantics ```C# namespace System.Reflection.Metadata { public struct MethodDefinition { ... public MethodSemanticsAttributes GetSemantics(); ... } } ``` Use case: ILSpy needs to determine whether a given method is an accessor of a property or event.,9
Do not resume reader on 0-byte FlushAsync https://github.com/dotnet/corefx/issues/27732,5
"Restrict the Long Running option to MARS This PR partially address https://github.com/dotnet/corefx/issues/19836 Restrict the usage of Long Running while reading data off the stream, to cases which are reading data for MARS enabled connections. This is to restrict the side effects of LongRunning continuation option. Validated with EF tests.",15
"Use stackalloc for longer SystemDirectory paths nit change, use stackalloc for longer SystemDirectory path < 260 chars.",4
Increase iteration counts in threading perf tests Relevant to https://github.com/dotnet/coreclr/issues/17345 ``` Before: System.Threading.Performance.Tests.dll | Metric | Unit | Iterations | Average | STDEV.S | Min | Max :------------------------------------------------------------ |:-------- |:----:|:----------:| -------:| ----------:| -----:| -----: System.Threading.Tests.Perf_EventWaitHandle.Set_Reset | Duration | msec | 1000 | 0.006 | 0.003 | 0.005 | 0.053 System.Threading.Tests.Perf_Interlocked.Add_int | Duration | msec | 100 | 0.007 | 1.856E-004 | 0.007 | 0.008 System.Threading.Tests.Perf_Interlocked.Add_long | Duration | msec | 100 | 0.007 | 0.003 | 0.006 | 0.026 System.Threading.Tests.Perf_Interlocked.CompareExchange_int | Duration | msec | 100 | 0.004 | 0.003 | 0.004 | 0.021 System.Threading.Tests.Perf_Interlocked.CompareExchange_long | Duration | msec | 100 | 0.004 | 0.002 | 0.004 | 0.021 System.Threading.Tests.Perf_Interlocked.Decrement_int | Duration | msec | 100 | 0.007 | 1.495E-004 | 0.007 | 0.007 System.Threading.Tests.Perf_Interlocked.Decrement_long | Duration | msec | 100 | 0.008 | 0.005 | 0.006 | 0.049 System.Threading.Tests.Perf_Interlocked.Exchange_int | Duration | msec | 100 | 0.007 | 0.002 | 0.007 | 0.023 System.Threading.Tests.Perf_Interlocked.Exchange_long | Duration | msec | 100 | 0.007 | 2.119E-004 | 0.007 | 0.009 System.Threading.Tests.Perf_Interlocked.Increment_int | Duration | msec | 100 | 0.007 | 1.134E-004 | 0.007 | 0.007 System.Threading.Tests.Perf_Interlocked.Increment_long | Duration | msec | 100 | 0.007 | 0.002 | 0.007 | 0.025 System.Threading.Tests.Perf_Lock.ReaderWriterLockSlimPerf | Duration | msec | 100 | 0.003 | 1.681E-004 | 0.003 | 0.004 System.Threading.Tests.Perf_Monitor.EnterExit | Duration | msec | 100 | 0.005 | 0.002 | 0.005 | 0.021 System.Threading.Tests.Perf_Monitor.TryEnterExit | Duration | msec | 100 | 0.002 | 2.455E-004 | 0.002 | 0.004 System.Threading.Tests.Perf_SpinLock.EnterExit | Duration | msec | 100 | 0.010 | 0.006 | 0.008 | 0.048 System.Threading.Tests.Perf_SpinLock.TryEnterExit | Duration | msec | 100 | 0.008 | 0.003 | 0.008 | 0.026 System.Threading.Tests.Perf_Volatile.Read_double | Duration | msec | 100 | 0.002 | 0.002 | 0.001 | 0.018 System.Threading.Tests.Perf_Volatile.Write_double | Duration | msec | 100 | 0.002 | 2.533E-004 | 0.002 | 0.004 After: System.Threading.Performance.Tests.dll | Metric | Unit | Iterations | Average | STDEV.S | Min | Max :------------------------------------------------------------ |:-------- |:----:|:----------:| -------:| -------:| ------:| ------: System.Threading.Tests.Perf_EventWaitHandle.Set_Reset | Duration | msec | 100 | 61.277 | 0.771 | 60.692 | 66.405 System.Threading.Tests.Perf_Interlocked.Add_int | Duration | msec | 100 | 63.767 | 1.554 | 63.182 | 77.342 System.Threading.Tests.Perf_Interlocked.Add_long | Duration | msec | 100 | 63.669 | 1.059 | 63.160 | 70.719 System.Threading.Tests.Perf_Interlocked.CompareExchange_int | Duration | msec | 100 | 63.805 | 1.669 | 63.180 | 74.795 System.Threading.Tests.Perf_Interlocked.CompareExchange_long | Duration | msec | 100 | 63.465 | 0.169 | 63.182 | 63.934 System.Threading.Tests.Perf_Interlocked.Decrement_int | Duration | msec | 100 | 66.444 | 3.587 | 63.206 | 77.222 System.Threading.Tests.Perf_Interlocked.Decrement_long | Duration | msec | 100 | 63.867 | 2.026 | 63.178 | 77.969 System.Threading.Tests.Perf_Interlocked.Exchange_int | Duration | msec | 100 | 68.325 | 3.153 | 59.724 | 79.176 System.Threading.Tests.Perf_Interlocked.Exchange_long | Duration | msec | 100 | 63.486 | 0.439 | 63.100 | 66.889 System.Threading.Tests.Perf_Interlocked.Increment_int | Duration | msec | 100 | 63.503 | 0.334 | 63.175 | 64.845 System.Threading.Tests.Perf_Interlocked.Increment_long | Duration | msec | 100 | 63.544 | 0.400 | 63.204 | 65.800 System.Threading.Tests.Perf_Lock.ReaderWriterLockSlimPerf | Duration | msec | 100 | 55.961 | 0.338 | 55.576 | 57.365 System.Threading.Tests.Perf_Monitor.EnterExit | Duration | msec | 100 | 67.236 | 0.462 | 66.876 | 71.239 System.Threading.Tests.Perf_Monitor.TryEnterExit | Duration | msec | 100 | 67.323 | 0.441 | 66.852 | 69.791 System.Threading.Tests.Perf_SpinLock.EnterExit | Duration | msec | 100 | 72.317 | 2.919 | 71.308 | 91.634 System.Threading.Tests.Perf_SpinLock.TryEnterExit | Duration | msec | 100 | 71.845 | 0.978 | 71.207 | 78.743 System.Threading.Tests.Perf_Volatile.Read_double | Duration | msec | 100 | 37.493 | 0.524 | 37.116 | 40.922 System.Threading.Tests.Perf_Volatile.Write_double | Duration | msec | 100 | 50.883 | 0.284 | 50.519 | 52.009 ```,8
"Test failed: System.Net.NetworkInformation.Tests.PingTest / SendPingAsyncWithHostAndTimeoutAndBuffer_Unix From https://github.com/dotnet/corefx/pull/28320 OSX.1012.Amd64.Open-x64-Debug System.Net.NetworkInformation.Tests.PingTest/SendPingAsyncWithHostAndTimeoutAndBuffer_Unix https://mc.dot.net/#/user/sputier/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/aed8e7936300a0290bb29844f967876525ca9ffb/workItem/System.Net.Ping.Functional.Tests/analysis/xunit/System.Net.NetworkInformation.Tests.PingTest~2FSendPingAsyncWithHostAndTimeoutAndBuffer_Unix ```text Unhandled Exception of Type System.Net.NetworkInformation.PingException Message : System.Net.NetworkInformation.PingException : An exception occurred during a Ping request. ---- System.Net.NetworkInformation.PingException : An exception occurred during a Ping request. Stack Trace : at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 364 at System.Net.NetworkInformation.Tests.PingTest.SendPingAsync(Func`2 sendPing, Action`1 pingResultValidator) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 464 at System.Net.NetworkInformation.Tests.PingTest.SendPingAsyncWithHostAndTimeoutAndBuffer_Unix() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 278 --- End of stack trace from previous location where exception was thrown --- ----- Inner Stack Trace ----- at System.Net.NetworkInformation.Ping.SendWithPingUtility(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 210 at System.Net.NetworkInformation.Ping.SendPingAsyncCore(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 31 at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 353 ```",0
"Test failure: System.Collections.Generic.Tests.EqualityComparerTests/NullableEquals(left: 0, right: 128, expected: False) Opened on behalf of @Sunny-pu The test `System.Collections.Generic.Tests.EqualityComparerTests/NullableEquals(left: 0, right: 128, expected: False)` has failed. System.NullReferenceException : Object reference not set to an instance of an object. Stack Trace: at System.Nullable$1<System.__UniversalCanon>.get_HasValue() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\shared\System\Nullable.cs:line 34 at System.Collections.Generic.NullableEqualityComparer$1<System.__UniversalCanon>.Equals(Nullable$1<__UniversalCanon> x, Nullable$1<__UniversalCanon> y) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\IntrinsicSupport\EqualityComparerHelpers.cs:line 253 at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969 at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566 at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566 at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969 at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566 at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566 at System.Collections.Generic.Tests.EqualityComparerTests.NullableEquals<System.__UniversalCanon>(__UniversalCanon left, __UniversalCanon right, Boolean expected) at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969 at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566 at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566 at Internal.Runtime.Augments.RuntimeAugments.CallDescrWorker(IntPtr callDescr) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\Internal\Runtime\Augments\RuntimeAugments.cs:line 969 at Internal.Runtime.TypeLoader.CallConverterThunk.InvokeTarget(Void* allocatedStackBuffer, $CallConversionParameters conversionParams) in InvokeTarget:line 16707566 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBufferInternal<Internal.Runtime.CallInterceptor.CallConversionInterpreter+CallConversionInterpreterLocals>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionInterpreterLocals context, ConservativelyReportedRegionDesc regionDesc) in RunFunctionWithConservativelyReportedBufferInternal:line 15732480 at Internal.Runtime.Augments.RuntimeAugments.RunFunctionWithConservativelyReportedBuffer<Internal.Runtime.TypeLoader.CallConversionParameters>(Int32 cbBuffer, IntPtr pfnTargetToInvoke, $CallConversionParameters context) in RunFunctionWithConservativelyReportedBuffer:line 16707566 at Internal.Runtime.TypeLoader.CallConverterThunk.CallConversionThunk(IntPtr callerTransitionBlockParam, IntPtr callConversionId) in CallConversionThunk:line 16707566 at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall) at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566 Build : Master - 20180411.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64 - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20180411.01/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Generic.Tests.EqualityComparerTests~2FNullableEquals(left:%200,%20right:%20128,%20expected:%20False)",7
Added ReadOnlySequence Slice tests and fixed Slice bounds checking issues I added ReadOnlySequence Slice tests and fixed Slice bounds checking issues.,10
"System.Runtime.InteropServices bad calling convention when returning unions on linux Hi, When using Interop on linux my app crashed. I managed to narrow it down to the cas where the native method returns an union. When I looked at the core dump with gdb it seemed to me that the calling convention is wrong. I was expecting to see the pointer to the string in register RDI but it contained garbage. I do not know if it is correct behavior or a bug, but I would appreciate if somebody has the time to take a look. Thanks ! ## Environnent * Fedora 26 linux 4.14.14-200.fc26.x86_64 * dotnet 2.1.4 * gcc (GCC) 7.2.1 20170915 ## C++ shared object code #include <iostream> #include <string> extern ""C"" union Union { int64_t f2; }; extern ""C"" Union crash(const char* msg) { std::cerr << __PRETTY_FUNCTION__ << "" start"" << std::endl; std::cerr << __PRETTY_FUNCTION__ << "" ptr "" << (void*)msg << std::endl; std::cerr << __PRETTY_FUNCTION__ << "" arg "" << msg << std::endl; return Union{}; } Compiled using : `g++ -Wall -fPIC -std=c++11 -shared -O0 -g -o libcrash.so crash.cpp` ## C# console app code using System; using System.Runtime.InteropServices; namespace question { [StructLayout(LayoutKind.Explicit)] public struct Union { [FieldOffset(0)] Int64 field2; } class Program { [DllImport(""libcrash.so"")] static extern Union crash(string s); static void Main(string[] args) { crash(""boom !!""); Console.WriteLine(""All Done""); } } }",4
"Remove RunningIndex add a way for IMemoryList to provide seek implementation Addresses https://github.com/dotnet/corefx/issues/26603 Right now `ReadOnlySequence` walks linked list of segments to implement `GetPosition` operation. We could envision other implementation that could provide better performance in some cases. This API suggestion focuses on delegating more functionality to `IMemoryList`. I propose the following change: ``` diff public interface IMemoryList<T> { - public long RunningIndex { get; } + /// Returns <see cref=""IMemoryList{T}""/> that contains <typeparamref name=""T""/> item offset from beginning of current <see cref=""IMemoryList{T}""/> by <paramref name=""offset""/>. + /// <paramref name=""localIndex""/> would contain index inside returned <see cref=""IMemoryList{T}""/> + public IMemoryList<T> GetNext(long offset, out int localIndex); + /// Returns count of items between start of this <see cref=""IMemoryList{T}""/> to <paramref name=""memoryList""/>. + public long GetLength(IMemoryList<T> memoryList); } ``` Has additional benefit of doing less interface calls per operation (GetLength 2->1, GetPosition N->1). /cc @terrajobst @KrzysztofCwalina @davidfowl",5
"[release/2.1] Lock Vectors reference assembly to 4.1.3.0 and don't OOB it on netcoreapp2.0 System.Numerics.Vectors was made inbox in netcoreapp2.0, we were still allowing distribution in the package, however the package was applying the netstandard2.0 implementation to netcoreapp2.0. Now that we've disabled oobing the netcoreapp2.1 build (since many types were moved into corelib) it no longer makes sense for us to mantain the ability to oob the netcoreapp2.0 build. Doing so not only degrades the inbox version (by not using the framework's MathF implementation) but also creates type-unfication issues on roll forward: app targets 2.0 carries OOB copy of Vectors with higher version than 2.1, rolls forward to 2.1 and host will use the OOB copy, no longer unifying to the types in corelib. Fixes #29162",17
Make Decrypt_512_NoData_FixedValue pass on netfx Fixes #27442.,3
Should HttpHeaders remove newlines from values when they're parsed? See discussion at https://github.com/dotnet/corefx/pull/27727#discussion_r172263740. HttpHeaders isn't removing newlines adding in header values with TryAddWithoutValidation when that value is parsed.,0
"Add Path.TryGetTempPath() From API proposal #27418. Need to add: ``` C# namespace System.IO { public static class Path { public static bool TryGetTempPath(Span<char> destination, out int charsWritten); } } ``` Returns false if the destination isn't large enough to fit the full path into.",5
"GetResponseAsync_ServerNameNotInDns_ThrowsWebException() test fails with SocketsHttpHandler Expecting `WebExceptionStatus.NameResolutionFailure` get `UnknownError` instead. Call stack for WinHttpHandler: ``` + ex {System.Net.WebException: An error occurred while sending the request. The server name or address could not be resolved ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.WinHttpException: The server name or address could not be resolved at System.Environment.get_StackTrace() in D:\corefx\src\System.Runtime.Extensions\src\System\Environment.cs:line 146 at System.Runtime.ExceptionServices.ExceptionStackTrace.AddCurrentStack(Exception exception) in D:\corefx\src\Common\src\System\Runtime\ExceptionServices\ExceptionStackTrace.cs:line 23 at System.Net.Http.WinHttpException.CreateExceptionUsingError(Int32 error) in D:\corefx\src\Common\src\System\Net\Http\WinHttpException.cs:line 56 at System.Net.Http.WinHttpRequestCallback.OnRequestError(WinHttpRequestState state, WINHTTP_ASYNC_RESULT asyncResult) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 324 at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 104 at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 47 --- End of stack trace from AddCurrentStack --- at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in D:\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62 at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856 --- End of inner exception stack trace --- at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\DiagnosticsHandler.cs:line 98 at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 501 at System.Net.HttpWebRequest.SendRequest() in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1209 at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1259 --- End of inner exception stack trace --- at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1263 at System.Net.WebRequest.<>c.<GetResponseAsync>b__68_2(IAsyncResult iar) in D:\corefx\src\System.Net.Requests\src\System\Net\WebRequest.cs:line 550 at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in E:\A\_work\1045\s\src\mscorlib\src\System\Threading\Tasks\FutureFactory.cs:line 529 --- End of stack trace from previous location where exception was thrown --- at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\Record.cs:line 76} System.Net.WebException ex.Status NameResolutionFailure System.Net.WebExceptionStatus ``` Call stack for SocketsHttpHandler: ``` + ex {System.Net.WebException: No such host is known No such host is known ---> System.Net.Http.HttpRequestException: No such host is known ---> System.Net.Sockets.SocketException: No such host is known at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 78 --- End of inner exception stack trace --- at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 98 at System.Threading.Tasks.ValueTask`1.get_Result() in E:\A\_work\1045\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs:line 713 at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 309 at System.Threading.Tasks.ValueTask`1.get_Result() in E:\A\_work\1045\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs:line 713 at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 450 at System.Threading.Tasks.ValueTask`1.get_Result() in E:\A\_work\1045\s\src\mscorlib\shared\System\Threading\Tasks\ValueTask.cs:line 713 at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 243 at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 30 at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\corefx\src\System.Net.Http\src\System\Net\Http\DiagnosticsHandler.cs:line 98 at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 501 at System.Net.HttpWebRequest.SendRequest() in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1209 at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1259 --- End of inner exception stack trace --- at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult) in D:\corefx\src\System.Net.Requests\src\System\Net\HttpWebRequest.cs:line 1263 at System.Net.WebRequest.<>c.<GetResponseAsync>b__68_2(IAsyncResult iar) in D:\corefx\src\System.Net.Requests\src\System\Net\WebRequest.cs:line 550 at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in E:\A\_work\1045\s\src\mscorlib\src\System\Threading\Tasks\FutureFactory.cs:line 529 --- End of stack trace from previous location where exception was thrown --- at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\Record.cs:line 76} System.Net.WebException ex.Status UnknownError System.Net.WebExceptionStatus ```",0
Re-enable UAP builds - Revert the three commits that initially disabled the build - Add a uapaot flavor for System.Numerics.Vectors. It can no longer use the uap flavor since it depends directly on System.Private.CoreLib (whose strong name key is different for uap and uapaot). - Fix a series of UAP build breaks that have crept in over the last couple weeks Fixes https://github.com/dotnet/corefx/issues/26802,1
Windows builds should always be portable See dotnet/coreclr#17533.,1
bypass the exceptions in sgen during the loop for each type Catch the exception [here](https://github.com/dotnet/corefx/blob/master/src/Microsoft.XmlSerializer.Generator/src/Sgen.cs#L231),12
Clean up GetConsoleTitle The Windows interop code for GetConsoleTitle was way more convoluted than it needed to be. It also isn't accurate and overallocates. I've removed things that date back to 9x and allowed for a case that showed up in RS2.,21
MatchingRefApiCompat issues with System.Drawing.Common See baseline file https://github.com/dotnet/corefx/blob/master/src/System.Drawing.Common/src/MatchingRefApiCompatBaseline.txt We should do one of the following: 1. Expose the APIs publicly in the reference assembly 2. Make the APIs in the implementation internal 3. Add a comment to the baseline file why you cannot do either (1) or (2) and keep them baselined. See PR https://github.com/dotnet/corefx/pull/27881/ for extra context.,13
"Support for enumerating non-default code pages added with RegisterProvider (System.Text.Encoding) The [documentation for `System.Text.Encoding.GetEncodings()`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.getencodings?view=netframework-4.7.1#System_Text_Encoding_GetEncodings) tells us (emphasis added): > The list of supported encodings returned by the GetEncodings method **does not include any > additional encodings made available by any EncodingProvider implementations that** were registered by calls to the RegisterProvider method. Is there no way to enumerate these additional encodings? Unfortunately, [`System.Text.CodePagesEncodingProvider.Instance`](https://docs.microsoft.com/en-us/dotnet/api/system.text.codepagesencodingprovider.instance?view=netcore-2.0#System_Text_CodePagesEncodingProvider_Instance) lacks a method for enumerating them.",18
Post 2.1 RTM: update packageindex to account for 2.1 and harvest all locked reference assemblies /cc @weshaggard @joperezr,1
"MacOS - Special hidden folders Dear corefx team, We have encountered a special case of hidden folders in MacOs based machines. When using DirectoryInfo to map the users machine, we are interested in knowing which folders are hidden, therefore checking the `FileAttributes.Hidden` attribute, which is determined if the file\directory name starts with a dot - '.' Sadly, we found out that in MacOS uses additional file system flags to mark folders as - **hidden**. We can check it by using the Terminal, or iTerm in my case and navigating to the home folder of a user and using `ls -l` to output the file dir. ![image](https://user-images.githubusercontent.com/32832019/39242329-5a3d57e2-4892-11e8-9bc8-ff8420d9090d.png) as we can see there are no UNIX hidden folders which starts with a dot. But `Library` is a hidden folder. If we would pass the `O` flag to show file flags (-O is a flag only in MacOS) ![image](https://user-images.githubusercontent.com/32832019/39242842-2db4ced8-4894-11e8-8f83-d4d867522b45.png) As we can see there are additional flags that mark a folder as hidden. to set or unset the flag we use `chflags` with the `hidden` or `nohidden` arguments. .NET Core info ``` .NET Command Line Tools (2.0.0) Product Information: Version: 2.0.0 Commit SHA-1 hash: cdcd1928c9 Runtime Environment: OS Name: Mac OS X OS Version: 10.13 OS Platform: Darwin RID: osx.10.12-x64 Base Path: /usr/local/share/dotnet/sdk/2.0.0/ Microsoft .NET Core Shared Framework Host Version : 2.0.0 Build : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d ``` Is there anything we can do to workaround this? I've poked around corefx + coreclr and saw that the DirectoryEntry struct only uses iNodeType to determine multiple attributes. Is there a plan to support flags in the future? Thank you very much, Hagai.",5
Add the array/arraysegment->Span/Memory overloads to MemoryExtensions Part of https://github.com/dotnet/corefx/issues/26894,10
Add tests for ClientWebSocket connections thru a proxy Created new tests for verifying ClientWebSocket connections end-to-end thru a proxy. Opened new issues #28024 and #28027 which cause the new tests to fail. Fixes #26957,0
"[uap] CoreFx build is failing since 'RemotelyInvokable' does not contain a definition for 'LongWait' https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1436514 ```text 2018-03-02T21:25:47.5255290Z Build FAILED. 2018-03-02T21:25:47.5268140Z 2018-03-02T21:25:47.5269301Z ProcessTestBase.Uap.cs(68,57): error CS0117: 'RemotelyInvokable' does not contain a definition for 'LongWait' [E:\A\_work\36\s\corefx\src\System.Diagnostics.Process\tests\System.Diagnostics.Process.Tests.csproj] 2018-03-02T21:25:47.5272048Z 0 Warning(s) 2018-03-02T21:25:47.5273015Z 1 Error(s) ``` cc @jkotas, @stephentoub",1
"SocketsHttpHandler should process idle disconnect from server promptly For idle connections, we have a _readAheadTask we use to determine if the server sent an EOF to close the connection (or other unexpected data). We don't check this until we either pull the connection out of the pool, or timeout the connection. So often there will be a large delay (10s of seconds) between when we receive the EOF and when we actually close the connection on our side. RFC 7230 says the following: ``` To avoid the TCP reset problem, servers typically close a connection in stages. First, the server performs a half-close by closing only the write side of the read/write connection. The server then continues to read from the connection until it receives a corresponding close by the client, or until the server is reasonably certain that its own TCP stack has received the client's acknowledgement of the packet(s) containing the server's last response. Finally, the server fully closes the connection. ``` https://tools.ietf.org/html/rfc7230#section-6.6 In the interest of being a well-behaved client and trying to make it easier for servers to adhere to the above behavior, we should close the connection promptly when we receive a disconnect from the server. (I hit this originally because I was trying to implement the above logic in LoopbackServer for tests, but it cause large delays on a bunch of tests because the client didn't promptly close its connection.)",0
"Use shared IO helper code from CoreCLR Common IO source code helpers were copied to CoreCLR some time ago. Now that we are mirroring, we should switch to using the mirrored code. There has been quite a bit of drift, so it might take some effort. src/Common/src/System/IO/PathInternal.Windows.cs -> src/Common/src/CoreLib/System/IO/PathInternal.Windows.cs https://github.com/dotnet/corefx/pull/27150#discussion_r168377623",5
"Move MutableDecimal from System.Memory to Common For context - https://github.com/dotnet/corefx/pull/25078#discussion_r150349963 cc @AtsushiKan, @ericstj",10
"Test System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent failed in CI. Test System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent failed. Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/417/testReport/System.Threading.Threads.Tests/ThreadTests/ApartmentState_AttributePresent_AppName____STAMain_exe____mode____GetApartmentState___/ MESSAGE: Assert.Equal() Failure\nExpected: 2\nActual: 32899 +++++++++++++++++++ STACK TRACE: at System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(String AppName, String mode) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/System.Threading.Thread/tests/ThreadTests.cs:line 169",11
"WinHttpHandler: cookies received on a 401 response are not added to the CookieContainer If the server sends a 401 auth challenge with a Set-Cookie header, the cookie is not added to the CookieContainer. SocketsHttpHandler and CurlHandler handle this correctly.",0
"HttpClientHandler authentication test cases failing (hang) on Framework run Contributes: #27113 The `HttpClientHandler_Authentication_Succeeds()` test will fail on Framework run with `System.TimeoutException : WhenAllOrAnyFailed timed out after 60000`, for the below four test data: ``` yield return new object[] { ""Digest realm=withoutquotes, nonce=withoutquotes"", false }; yield return new object[] { ""Digest realm=\""testrealm1\"", nonce=\""testnonce1\"" Digest realm=\""testrealm2\"", nonce=\""testnonce2\"""", false }; yield return new object[] { ""Basic something, Digest something"", false }; yield return new object[] { $""Digest realm=\""testrealm\"", nonce=\""testnonce\"", algorithm=MD5 "" + $""Basic realm=\""testrealm\"""", false }; ```",0
"Wrong debug directory entry in some .NET Core 2.1 preview1 libraries @KKatsnel commented on [Thu Mar 29 2018](https://github.com/dotnet/core/issues/1392) Here two possible versions of the data format of a debug directory are described: https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PE-COFF.md However, there are two Debug Directory Entries in the ""System.IO.FileSystem.dll"" library of 4.1.1.0 version (it's from .NET Core 2.1 preview1): - Major = 0x0100, Minor = 0x504d that corresponds to the Portable PDB format, and - Major = 0x0100, Minor = 0, that doesn't correspond to any version. As far as I understand the second entry is wrong, isn't it? --- @Petermarcu commented on [Thu Mar 29 2018](https://github.com/dotnet/core/issues/1392#issuecomment-377456884) @tmat",9
Revert exposing Capture.Text Mistake from my side...,18
"Add a generic SASL API with GSSAPI support Provide GSSAPI mechanism support, for Kerberos V5 authentication. Sample SASL client methods: `EvaluateChallenge()`, `Wrap()`, `UnWrap()`.",0
"SocketsHttpHandler: container cookies are incorrectly handled if you add a Cookie header to the cookie collection If you add a Cookie header via ```csharp requestMessage.Headers.Add(""Cookie"", ""A=1""); ``` This causes cookies from the cookie container to be appended using the "","" separator, which is incorrect for cookies -- they use "";"" as a separator instead. WinHttpHandler appends the cookies properly.",0
"Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/GetAsync_IPBasedUri_Success(address: ::1) Opened on behalf of @Sunny-pu The test `System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/GetAsync_IPBasedUri_Success(address: ::1)` has failed. System.Net.Sockets.SocketException : Address not available Stack Trace: at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName) in /root/corefx-1490845/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 5154 at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress) in /root/corefx-1490845/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 758 at System.Net.Sockets.Socket.Bind(EndPoint localEP) in /root/corefx-1490845/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 701 at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /root/corefx-1490845/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 63 at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_IPBasedUri_Success(IPAddress address) in /root/corefx-1490845/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs:line 380 --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180319.01 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64 - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest~2FGetAsync_IPBasedUri_Success(address:%20::1)",0
"ObjectDisposedException on Process.Start leaves defunct process on Linux This is a difficult one to reproduce! We're starting a process repeatedly in 5 seconds gaps. After leaving running for a week, we end up with 4-5 defunct processes that failed to start. On the ones that failed we see the process handle is marked as invalid and an exception (see below) is thrown. Even though we're disposing, the process now has a defunct child for it's lifetime. C# details: - Self contained deployment - DotNetCore 2.0 - Centos 7.3 Code to reproduce: ```csharp using (var process = new Process()) { process.StartInfo.FileName = ""filename""; process.StartInfo.Arguments = ""arguments""; process.StartInfo.RedirectStandardOutput = true; process.EnableRaisingEvents = true; process.Start(); var output = process.StandardOutput.ReadToEnd(); process.WaitForExit(MaxWaitTime); } ``` Exception stack: ```csharp System.ObjectDisposedException: Safe handle has been closed at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success) at System.Threading.RegisteredWaitHandleSafe.SetWaitObject(WaitHandle waitObject) at System.Threading.ThreadPool.RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, UInt32 millisecondsTimeOutInterval, Boolean executeOnlyOnce, StackCrawlMark& stackMark, Boolean compressStack) at System.Threading.ThreadPool.RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, Int32 millisecondsTimeOutInterval, Boolean executeOnlyOnce) at System.Diagnostics.Process.EnsureWatchingForExit() at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) at System.Diagnostics.Process.Start() ```",11
Clean dead code for System.CSharp #17905,16
"System.Drawing.Common 4.5.0 isn't added to references in a Xamarin.Android project while adding the package from nuget.org I tried to add one package to a Xamarin.Android application. This package has System.Drawing.Common 4.5.0 in its dependencies. After that, the project compilation is stopped with an error: ``` Exception while loading assemblies: System.IO.FileNotFoundException: Could not load assembly 'System.Drawing.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. Perhaps it doesn't exist in the Mono for Android profile? error : File name: 'System.Drawing.Common.dll' ``` The packages.config file contains the correct record: ``` <package id=""System.Drawing.Common"" version=""4.5.0-preview1-26216-02"" targetFramework=""monoandroid81"" /> ``` But **System.Drawing.Common** is absent in the reference list. It seems that **Visual Studio** tries to get **System.Drawing.Common.dll** for **Xamarin.Android** runtime, because the package contains the **MonoAndroid10** folder. It can't do this, because this folder doesn't contain any DLL-files, but the stub file with the '\_.\_' name. ![2018-04-06_15-55-52](https://user-images.githubusercontent.com/1681154/38422372-26819e6a-39b3-11e8-95aa-eba383388bbd.png) If I find System.Drawing.Common.dll for **.NET Standard 2.0** and manually add it to references, the project operates correctly. **Steps to reproduce:** - Run Visual Studio Professional 2017 Version 15.6.5 - Create new Android -> Blank App (Android) - Add System.Drawing.Common 4.5.0 via Manage Nuget Packages... **Current result:** System.Drawing.Common.dll isn't in references. **Expected result:** System.Drawing.Common.dll is in references. **Additional information:** Microsoft Visual Studio Professional 2017 Version 15.6.5 VisualStudio.15.Release/15.6.5+27428.2027 Microsoft .NET Framework Version 4.7.02556 Installed Version: Professional NuGet Package Manager 4.6.0 NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/. VisualStudio.Mac 1.0 Mac Extension for Visual Studio Xamarin 4.9.0.753 (f0f46392f) Visual Studio extension to enable development for Xamarin.iOS and Xamarin.Android. Xamarin Designer 4.10.96 (a702a9ceb) Visual Studio extension to enable Xamarin Designer tools in Visual Studio. Xamarin.Android SDK 8.2.0.16 (HEAD/a78295902) Xamarin.Android Reference Assemblies and MSBuild support. Xamarin.iOS and Xamarin.Mac SDK 11.9.1.24 (f62de47) Xamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.",1
Consider adding Span<char> overloads to TextEncoder Seems like these were missed in the Spanification of the BCL. https://github.com/dotnet/corefx/blob/01fa16ffd618846a913cad719269c8bb441ceb28/src/System.Text.Encodings.Web/src/System/Text/Encodings/Web/TextEncoder.cs /cc @stephentoub @KrzysztofCwalina @GrabYourPitchforks,18
"Inconsistent compile behavior for out parameters @marce155 commented on [Thu Mar 22 2018](https://github.com/dotnet/core/issues/1373) When declaring an out parameter on a method I’m used to having to assign the parameter a value before leaving the method: ``` public bool TryGet(string foo, out TimeSpan bar){ bar = TimeSpan.FromSeconds(1); return true; } ``` Today I encountered a behavior which was at least unexpected and feels inconsistent. When I’m targeting netcoreapp2.0 there are some cases where the program will compile and work even if the out parameter has not been assigned. To be exact this is the case for TimeSpan or structs containing (only) a TimeSpan (that is as far as I tested). The same code will fail to compile for .NET 4.6. ``` class Program { public static void Main() { TimeSpan timeSpan; Foo foo; Bar bar; //Baz baz; TryTimeSpan(out timeSpan); TryFoo(out foo); TryBar(out bar); //TryBaz(out baz); Console.WriteLine(timeSpan); Console.WriteLine(foo); Console.WriteLine(bar); } private static bool TryTimeSpan(out TimeSpan timeSpan) { // no compile error - unexpected return false; } private static bool TryFoo(out Foo foo) { // empty struct works with target net461 as well return false; } private static bool TryBar(out Bar bar) { // no compile error - unexpected return false; } /* private static bool TryBaz(out Baz baz) { // compile error, baz not assigned for all targets - expected return false; } */ } struct Foo { } struct Bar { public TimeSpan TimeSpan { get; set; } } struct Baz { public int Int { get; set; } } ``` I assume that somehow proper defaults are assigned, yet it still feels a little strange. Could you please clarify if this is expected behavior and what causes it? --- @danstur commented on [Thu Mar 22 2018](https://github.com/dotnet/core/issues/1373#issuecomment-375337998) This definitely seems to violate the [specification](https://github.com/dotnet/csharplang/blob/master/spec/classes.md#output-parameters): > Every output parameter of a method must be definitely assigned before the method returns.",14
"Test changes for System.IO.FileSystem - Add new tests for more coverage on enumeration - Re-enable tests cc: @Anipik, @danmosemsft, @pjanotti",5
"System.Data.Tests.DataTableTest3/XmlSchemaTest3 failing in CI with UnauthorizedAccessException From https://github.com/dotnet/corefx/pull/28350 https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/f1982993db81bc168e62e059516816b78af59bb7/workItem/System.Data.Common.Tests/analysis/xunit/System.Data.Tests.DataTableTest3~2FXmlSchemaTest3 Windows.10.Amd64.Open-x64-Debug ```text Unhandled Exception of Type System.AggregateException Message : System.AggregateException : One or more errors occurred. (Could not find a part of the path 'C:\\Users\\'.) (Access to the path 'C:\\Users\\' is denied.) ---- System.IO.DirectoryNotFoundException : Could not find a part of the path 'C:\\Users\\'. ---- System.UnauthorizedAccessException : Access to the path 'C:\\Users\\' is denied. Stack Trace : ----- Inner Stack Trace #1 (System.IO.DirectoryNotFoundException) ----- at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.Windows.cs:line 1650 at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.Win32.cs:line 42 at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.cs:line 230 at System.IO.FileStream..ctor(String path, FileMode mode) in E:\A\_work\942\s\src\mscorlib\shared\System\IO\FileStream.cs:line 164 at System.Data.Tests.DataTableTest3.XmlSchemaTest3() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Data.Common\tests\System\Data\DataTableTest3.cs:line 512 ----- Inner Stack Trace #2 (System.UnauthorizedAccessException) ----- at System.IO.FileSystem.DeleteFile(String fullPath) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\FileSystem.Windows.cs:line 170 at System.IO.File.Delete(String path) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\File.cs:line 102 at System.Data.Tests.DataTableTest3.Dispose() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Data.Common\tests\System\Data\DataTableTest3.cs:line 48 at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Extensions\ReflectionAbstractionExtensions.cs:line 76 ``` Also System.Data.Tests.DataTableTest3/XmlSchemaTest7 https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/f1982993db81bc168e62e059516816b78af59bb7/workItem/System.Data.Common.Tests/analysis/xunit/System.Data.Tests.DataTableTest3~2FXmlSchemaTest7 ```text Unhandled Exception of Type System.UnauthorizedAccessException Message : System.UnauthorizedAccessException : Access to the path 'C:\\Users\\DotNetTestRunner\\AppData\\' is denied. Stack Trace : at System.IO.FileSystem.DeleteFile(String fullPath) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\FileSystem.Windows.cs:line 170 at System.IO.File.Delete(String path) in D:\j\workspace\windows-TGrou---74aa877a\src\System.IO.FileSystem\src\System\IO\File.cs:line 102 at System.Data.Tests.DataTableTest3.Dispose() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Data.Common\tests\System\Data\DataTableTest3.cs:line 48 at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.execution\Extensions\ReflectionAbstractionExtensions.cs:line 76 ``` cc @divega, @saurabh500, @stephentoub",15
Support PositiveInfinity and NegativeInfinity as default value in sgen Fix #27396 @huanwu @zhenlan @mconnew,12
Adding begin/end steps to build definitions ,1
"Test failure: System.Globalization.Tests.CalendarHelpers/ToDateTime_Invalid(calendar: JapaneseLunisolarCalendar { AlgorithmType = LunisolarCalendar, Eras = [5, 4, 3], IsReadOnl) Opened on behalf of @Sunny-pu The test `System.Globalization.Tests.CalendarHelpers/ToDateTime_Invalid(calendar: JapaneseLunisolarCalendar { AlgorithmType = LunisolarCalendar, Eras = [5, 4, 3], IsReadOnl)` has failed. Assert.Throws() Failure\r Expected: typeof(System.ArgumentOutOfRangeException)\r Actual: (No exception was thrown) Stack Trace: at System.Globalization.Tests.CalendarHelpers.ToDateTime_Invalid(Calendar calendar) Build : 2.0.0 - 20180314.01 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64 - Release Details:https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180314.01/workItem/System.Globalization.Calendars.Tests",19
Updated an error message Fix #27492 @zhenlan @huanwu @mconnew,12
Move to optimized shared Marvin implementation in corefx ,14
"Test issue: AllowAutoRedirect_True_PostToGetDoesNotSendTE fails occasionally on WinHttpHandler Something about how the loopback server is sending the response before the request is fully received, and/or the way the server is shutting down the connection, causes occasional failures with WinHttpHandler. The specific error is: System.Net.Http.HttpRequestException : Error while copying content to a stream. ---- System.IO.IOException : The write operation failed, see inner exception. -------- System.Net.Http.WinHttpException : The connection with the server was terminated abnormally We should change the test so that the server behaves in a way that makes WinHttpHandler happy.",0
"Enable a thread pool bound handle test on uap The test was failing sometimes, some debugging info was added as part of https://github.com/dotnet/corefx/issues/18058 to help with failure investigation. The test remained disabled though. Closes https://github.com/dotnet/corefx/issues/18058 until another failure occurs",8
"Ensure LocalCertificateSelectionCallback is still called with AuthenticateAsServerAsync In .NET Core 2.0, we call `LocalCertificateSelectionCallback` to choose the certificate during `AuthenticateAsServerAsync`. As part of adding support for SNI, this functionality was removed. However, some users have already implemented SNI using `LocalCertificateSelectionCallback`, and we should aim to maintain compatibility for them. This change ensures that we maintain the old behavior of `LocalCertificateSelectionCallback` when the new SNI callback is not set. When both are set, we default to the new behavior. I also added two tests to verify this behavior. Fixes: #29110",0
"SemaphoreSlim and Wait(0) Hi, I am very new with C# so I apologise in advance if this is dumb. I read a lot of docs and conversation threads and it is pretty clear that the ""wait(0)"" is supposed to return immediately with either true or false. Problem is that when I make basic test, I can see that the ""wait"" calls can take a lot of time (multiple seconds) to return. Might just be the way I run the multiple threads test, but still, if someone could confirm the behavior? In theory in the following test the time difference between ""Enter"" log and ""Wait"" log should be very small, but as explained when I run it (with a lot of threads) I get large difference, like 10 seconds. ``` static SemaphoreSlim s = new SemaphoreSlim(1, 1); static void Test(object x) { Console.Write(""Enter"" + x + "" "" + System.DateTime.Now + ""\n""); bool b = s.Wait(0); Console.Write(""Wait"" + x + "" "" + System.DateTime.Now + ""\n""); if (b) { try { Console.Write(b + "" "" + x + ""\n""); for (long i = 1; i <= 5000000000; i++) { // } } finally { Console.Write(""Exit"" + x + "" "" + System.DateTime.Now + ""\n""); s.Release(); } } else { Console.Write(b + "" "" + x + ""\n""); Console.Write(""Exit False "" + x + "" "" + System.DateTime.Now + ""\n""); } } ``` Thank you for your time.",8
Extend ICollection<T> and IList<T> handling in LINQ All/Any/First methods ,20
"Split up cookie headers that are added via HttpListenerResponse.WebHeaders.Add This fixes an inconsistency between the Windows and Managed implementation of HttpListenerResponse. Basically, there are two ways to add cookies to an HttpListenerResponse. The 'usual' way is to add them to the cookie collection: ``` response.Cookies = cookies; ``` On Unix and on Windows that yields the following Set-Cookie header: ``` Set-Cookie: name1=value1, name2=value2 ``` In this case though the user is setting the headers by adding them directly: ``` foreach (var c in cookies) { HttpListenerResponse.Headers.Add(""Set-Cookie"",c); } ``` According to the relevant documentation for WebHeaderCollection.Add headers added more than once will be added in a comma separated list. So, even adding the headers directly, we expect the same result. That is true on Unix, and we get the following header: ``` Set-Cookie: name1=value1,name2=value2 ``` However, on Windows we see an unexpected result: ``` Set-Cookie: name1=value1 Set-Cookie: name2=value2 ``` While both behaviors are acceptable, I think that the Windows behavior was intentionally added. That is based off of this comment in the relevant code: https://github.com/dotnet/corefx/blob/3db29b721a45fb4f300e27c5df5750f57b38ec45/src/System.Net.HttpListener/src/System/Net/Windows/HttpListenerResponse.Windows.cs#L460-L482 This PR ensures that the managed implementation follows the same behavior as the Windows version. I think that should also update the documentation to reflect this behavior, since it seems to be by design. Fixes: #22910",0
"System.Data.SqlClient => Dynamic SQL generation is not supported against a SelectCommand that does not return any base table information. Hi guys, same piece of code compiled and run against .net framework 4.5 and dotnet core 2.0 .net framework 4.5 version runs without issues dotnet core 2.0 version returns error: Dynamic SQL generation is not supported against a SelectCommand that does not return any base table information. comparing info from both libraries used, i noticed the following difference: .net framework 4.5 Property: BaseTableName Value: TEST dotnet core 2.0: Property: BaseTableName Value: apparently, this property is not properly captured best regards, Raul",15
"Broken libcurl dependency on openSUSE Tumbleweed @bwalkenhorst commented on [Thu Mar 08 2018](https://github.com/dotnet/core/issues/1327) # Broken libcurl dependency on openSUSE Tumbleweed Trying to install dotnet core on openSUSE Tumbleweed, following the instructions found here, I get the following error message: ``` [20:06|root@schwarzgeraet:~]# zypper in dotnet-sdk-2.0.0 Loading repository data... Reading installed packages... Resolving package dependencies... Problem: nothing provides libcurl needed by dotnet-runtime-2.0.0-2.0.0-1.x86_64 Solution 1: do not install dotnet-sdk-2.0.0-2.0.0-1.x86_64 Solution 2: break dotnet-runtime-2.0.0-2.0.0-1.x86_64 by ignoring some of its dependencies ``` When I ask the package manager about it, I get the following reply: ``` [20:06|root@schwarzgeraet:~]# zypper se libcurl Loading repository data... Reading installed packages... S | Name | Summary | Type ---+---------------------+----------------------------------------+-------- | libcurl-devel | A Tool for Transferring Data from URLs | package | libcurl-devel-32bit | A Tool for Transferring Data from URLs | package i+ | libcurl4 | Version 4 of cURL shared library | package i | libcurl4-32bit | Version 4 of cURL shared library | package ``` So there is a libcurl, it is just called libcurl4. I am not certain who I should blame here. But I hope that updating the dependencies on dotnet will be less work than getting the openSUSE developers to rename the package. --- @omajid commented on [Thu Mar 08 2018](https://github.com/dotnet/core/issues/1327#issuecomment-371599203) Related to https://github.com/dotnet/core-setup/issues/3791 --- @bwalkenhorst commented on [Thu Mar 08 2018](https://github.com/dotnet/core/issues/1327#issuecomment-371609046) FWIW: I tried `Solution 2: break dotnet-runtime-2.0.0-2.0.0-1.x86_64 by ignoring some of its dependencies` I wasn't all that surprised, but it seems to have worked. MonoDevelop still isn't convinced .Net Core 2.0 is actually installed, but when I try to build and run a simple Hello-World project from the command line, it works",0
"SocketsHttpHandler: including NT auth sources causes trace test to fail After adding the NT auth source files to the project, there seems to be some sort of event source conflict. The SendAsync_HttpTracingEnabled_Succeeds is failing, specifically on this line: ```csharp Assert.DoesNotContain(events, ev => ev.EventId == 0); // make sure there are no event source error messages ``` I'm disabling the test for now.",0
Make HttpWebResponse.LastModified throw when invalid date is provided Fixes https://github.com/dotnet/corefx/issues/28941 cc: @Clockwork-Muse,0
"Crash in SqlConnection.Close() when using TransactionScope on linux. I'm using SqlClient 4.5.0-preview1-26207-04 in netcoreapp2.0. ``` .NET Command Line Tools (2.0.0) Product Information: Version: 2.0.0 Commit SHA-1 hash: cdcd1928c9 Runtime Environment: OS Name: centos OS Version: 7 OS Platform: Linux RID: centos.7-x64 Base Path: /usr/share/dotnet/sdk/2.0.0/ Microsoft .NET Core Shared Framework Host Version : 2.0.0 Build : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d ``` The following snippet would crash on the above machine (removed some code for brevity). Works without issues on Windows. ```c# using (var txscope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled)) using (var cn = _dBProvider.GetWriteConnection()) { await cn.OpenAsync(); if (cmd.RecordCertificationStatus) { await cn.ExecuteAsync(@""INSERT INTO (...) (@iduser, @idtitle, @value, getdate()); "", new { @iduser = cmd.SubId, @idtitle=cmd.EntityId, @value = cmd.Model.IsCertified }); } await cn.ExecuteAsync(sql, data); txscope.Complete(); } ``` Both statements are inserts. Stacktrace is below: ``` ""System.NullReferenceException: Object reference not set to an instance of an object. at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj) at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject) at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory) at System.Data.SqlClient.SqlConnection.Close() at System.Data.SqlClient.SqlConnection.Dispose(Boolean disposing) at System.ComponentModel.Component.Dispose() at ...TitleUpdate.Handler.<HandleCore>d__2.MoveNext() in ...TitleUpdate.cs:line 189 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at MediatR.Internal.RequestHandlerWrapperImpl`1.<>c__DisplayClass0_0.<<Handle>g__Handler0>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at ...ValidationBehavior`2.<Handle>d__2.MoveNext() in ...ValidationBehavior.cs:line 34 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at ....TitlesController.<Update>d__5.MoveNext() in TitleController.cs:line 98 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context) at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted) at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextExceptionFilterAsync>d__23.MoveNext()"" ```",15
"Port System.ComponentModel.Composition.Registration (MEF1) to .NET Core Greetings, regarding [Port System.ComponentModel.Composition (MEF1) to .NET Core](https://github.com/dotnet/corefx/issues/11857) the following is still missing: - `System.ComponentModel.Composition.Registration.RegistrationBuilder` - `System.ComponentModel.Composition.Registration.PartBuilder` - `System.ComponentModel.Composition.Registration.PartBuilder<>` See also https://github.com/dotnet/corefx/issues/11857#issuecomment-382342975 edit by @ViktorHofer: fixed link.",2
"Fix UTF32Encoding BOM being emitted by XmlWriter when ByteOrderMark set to false As mentioned in #26544, the BOM is still being emitted by XmlWriter when the supplied UTF32Encoding instance has it disabled by setting ByteOrderMark, in the UTF32Encoding ctor, to false. This is due XmlWriter.Create(...) creating a new Encoding instance (with a FallbackEncoder) from the one supplied in XmlWriterSettings. However, it only uses the CodePage to create the new Encoding instance which initializes with the defaults. The default for ByteOrderMark in the UTF32Encoding class is true. This fixes it by grabbing the BOM before creating a the new Encoding instance. cc: @krwq @pjanotti Resolves #26544",6
ValueTask adoption in System.IO.Pipelines - Use the new IValueTaskSource support added to corefx - Implement IValueTaskSource on the defualt PipeReader and PipeWriter implementations. - Handle the case where there is a sync context and allow turning this behavior off to favor the specified schedulers /cc @pakrym @stephentoub ~PS: I couldn't get it compiling so I assume that something was wrong with my build locally or the ref in corefx (I didn't try hard enough yet). I'm sending this out as a WIP so it can be reviewed. I still need to update tests accordingly~,5
"API Proposal: Path API that exposes the Portable Filename Character Set ``` c# namespace System.IO { public static class Path { public static bool IsPortablePosixFileName(ReadonlySpan<char> name); } } ``` Returns true if the name only has characters from the defined set. The set is small `[A-Z][a-z][0-9]._-`. The spec also discourages `-` as the first character, which we should also check. POSIX.1-2008 3.282 Portable Filename Character Set http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282 http://www.boost.org/doc/libs/1_66_0/libs/filesystem/doc/portability_guide.htm See related #27049",5
"Add back Memory.ToString() to referencey assembly and add tests Depends on https://github.com/dotnet/coreclr/pull/16732 and the subsequent mirror PR (https://github.com/dotnet/corefx/pull/27697). cc @jkotas, @KrzysztofCwalina, @stephentoub, @pakrym, @khellang",10
"API Proposal: Add a Generic version of GetValues to Enum (probably GetName/GetNames) I suggest to implement Generic version of GetValues method in the Enum class. In present, if we going to get an typed array of some enum values we have to write following code: `SomeEnum[] values = (SomeEnum[])Enum.GetValues(typeof(SomeEnum));` It seems as unconvenient way. In my opinion, the following Generics-based syntax should seems shorter, more convenient and safely (by reason of type casting necessity): `SomeEnum[] values = Enum.GetValues<SomeEnum>();` The possible way to implement this syntax is: ``` public static TEnum[] GetValues<TEnum>() where TEnum : struct { Type enumType = typeof(TEnum); return (TEnum[])enumType.GetEnumValues(); } ``` This proposal is inspired by the great Generic-based version of Enum.TryParse method laying besides with legacy non-Generic version: ``` public static bool TryParse(Type enumType, String value, out Object result) public static bool TryParse<TEnum>(String value, out TEnum result) where TEnum : struct ``` If proposal to implement Generic version of GetValues will be accepted I guess following Generics-based implementations of GetName GetNames should be implemented for symmetry reason: ``` public static String GetName<TEnum>(Object value) where TEnum : struct { Type enumType = typeof(TEnum); return enumType.GetEnumName(value); } public static String[] GetNames<TEnum>() where TEnum : struct { Type enumType = typeof(TEnum); return enumType.GetEnumNames(); } ``` I introduce possible implementation of this proposal in [dotnet/coreclr/pull#16557](https://github.com/dotnet/coreclr/pull/16557) This is a small point improvement suggestion. It can be implemented separately of as a part of total Enum improvements discussing in [dotnet/corefx/#15453](https://github.com/dotnet/corefx/issues/15453)",4
Renable some TLS callback tests with SocketsHttpHandler The UseCallback_BadCertificate_ExpectedPolicyErrors tests had been disabled when running against SocketsHttpHandler. The reason in the comments was that the tests were not returning the proper SslPolicyErrors. These particular tests use external third party servers (*.badssl.com). Running these tests now against the latest code shows no errors. It's possible this was a problem related to those external servers. Renabling the tests for now. Fixes #23137,0
Add test infra for auth testing. fixes #26375 @dotnet/ncl,0
"X509Certificate2 unclear error message when attempting to store certificate in non-existent store Had a problem where my app would work fine locally, but fail when hosted on azure app services. I was trying to load a certificate from a file using ```new X509Certificate2(string fileName, string password)```. (Although hrom cursory research the error message is identically as ambiguous with other construction methods) The error message I received was: ``` Unhandled Exception: Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: The system cannot find the file specified at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, String password, X509KeyStorageFlags keyStorageFlags) at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(String fileName, String password, X509KeyStorageFlags keyStorageFlags) at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(String fileName) at ConsoleApplication.Program.Main(String[] args) ``` The certificate was, indeed, present and was readable from the user running - so it's not an issue that the certificate can't be found! The actual error is, I believe, that it can't put the certificate the LocalUser's cert store. Info [here](http://web.archive.org/web/20151101033040/http://blog.tylerdoerksen.com:80/2013/08/23/pfx-certificate-files-and-windows-azure-websites/). I think the culprit is here https://github.com/dotnet/corefx/blob/29cd6a0b0ac2993cee23ebaf36ca3d4bce6dd75f/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Windows/CertificatePal.Import.cs#L150-L152 I believe the last hresult from PFXImportCertStore will be CRYPT_E_NOT_FOUND ""can't find file"". Which causes ambiguity between ""can't find the given certificate file to import"" and ""got an error when trying to put the certificate after trying to put it in a store"". Not sure how you'd go about solving this as we're only returned CRYPT_E_NOT_FOUND for failed imports regardless of reason. Repro: 1. Create a web app that pulls a certificate from a file 2. ```new X509Certificate2(string fileName, string password)``` 3. Upload and run on azure app services 4. Pull hair out for 2h wondering why it can't find a file that blatantly exists. Workaround: Store it in the MachineKey set ```new X509Certificate2(filePath, pass, X509KeyStorageFlags.MachineKeySet);```",3
"Unhandled Exception: System.Net.Mail.SmtpException On Linux ***smtp ehlo*** ```sh $ telnet mail-proxy.mycompanydomain.com 25 Trying xx.xx.xx.xx... Connected to mail-proxy.mycompanydomain.com. Escape character is '^]'. 220 mail.mycompanydomain.com Microsoft ESMTP MAIL Service ready at Fri, 13 Apr 2018 17:52:12 +0800 EHLO 250-mail.mycompanydomain.com Hello [xx.xx.xx.xx] 250-SIZE 209715200 250-PIPELINING 250-DSN 250-ENHANCEDSTATUSCODES 250-STARTTLS 250-AUTH GSSAPI NTLM LOGIN 250-8BITMIME 250-BINARYMIME 250 CHUNKING ``` ***Stacktrace*** ```txt Unhandled Exception: System.Net.Mail.SmtpException: Failure sending mail. ---> System.ComponentModel.Win32Exception: GSSAPI operation failed with error - An invalid status code was supplied (Cannot find KDC for realm ""mycompanydomain.com""). at System.Net.Security.NegotiateStreamPal.AcquireCredentialsHandle(String package, Boolean isServer, NetworkCredential credential) at System.Net.NTAuthentication.Initialize(Boolean isServer, String package, NetworkCredential credential, String spn, ContextFlagsPal requestedContextFlags, ChannelBinding channelBinding) at System.Net.Mail.SmtpNegotiateAuthenticationModule.Authenticate(String challenge, NetworkCredential credential, Object sessionCookie, String spn, ChannelBinding channelBindingToken) at System.Net.Mail.SmtpConnection.SetContextAndTryAuthenticate(ISmtpAuthenticationModule module, NetworkCredential credential, ContextAwareResult context) at System.Net.Mail.SmtpConnection.GetConnection(String host, Int32 port) at System.Net.Mail.SmtpTransport.GetConnection(String host, Int32 port) at System.Net.Mail.SmtpClient.GetConnection() at System.Net.Mail.SmtpClient.Send(MailMessage message) --- End of inner exception stack trace --- at System.Net.Mail.SmtpClient.Send(MailMessage message) ``` ***dotnet --info*** ```sh $ dotnet --info .NET Command Line Tools (2.1.300-preview1-008174) Product Information: Version: 2.1.300-preview1-008174 Commit SHA-1 hash: b8df89a54f Runtime Environment: OS Name: debian OS Version: 9 OS Platform: Linux RID: linux-x64 Base Path: /usr/share/dotnet/sdk/2.1.300-preview1-008174/ Microsoft .NET Core Shared Framework Host Version : 2.1.0-preview1-26216-03 Build : f2c3216183d20416568a4bbf5bb7d153e826f153 ``` ***Program.cs*** ```cs using System; using System.Net; using System.Net.Mail; namespace ConsoleApp1 { class Program { static void Main(string[] args) { var host = ""mail-proxy.mycompanydomain.com""; var user = ""user@mycompanydomain.com""; var password = ""xxxxxxxxxxxxx""; var from = ""fromuser@mycompanydomain.com""; var to = ""touser@mycompanydomain.com""; var client = new SmtpClient(host, 25); client.UseDefaultCredentials = true; client.Credentials = new NetworkCredential(user, password); // client.Credentials = new NetworkCredential(user, password).GetCredential(host, 25, ""NLTM""); var msg = new MailMessage(from, to); msg.Subject = ""Hello 世界""; msg.Body = ""Hello World"" + DateTime.Now.ToString(); client.Send(msg); Console.WriteLine(""Hello World!""); } } }",0
"SocketsHttpHandler: add ntlm auth and proxy auth for tunnel, and rework auth handling generally Several auth-related changes: (1) Add support for Negotiate and NTLM auth (2) Add support for proxy auth on SSL proxy tunnel (3) Consolidate and rework some auth logic (4) Fix some auth bugs Note that we don't have automated NTLM tests currently (due to test environment issues), so I tested NTLM auth manually on my local machine against a local IIS server. Fixes #27477 Fixes #27293 Fixes #26325 Fixes #23154 Fixes #23153 @stephentoub @davidsh @dotnet/ncl",0
"Test failed: System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest / ZeroByteReceive_CompletesWhenDataAvailable (server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx) Opened on behalf of @Sunny-pu The test `System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest/ZeroByteReceive_CompletesWhenDataAvailable(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)` has failed. System.Net.WebSockets.WebSocketException : An exception caused the WebSocket to enter the Aborted state. Please see the InnerException, if present, for more details.\r ---- System.ArgumentException : The specified buffer index is not within the buffer capacity. Stack Trace: at System.Net.WebSockets.WinRTWebSocket.ReceiveAsync(ArraySegment`1 buffer, CancellationToken cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.WebSockets.Client\src\System\Net\WebSockets\WinRTWebSocket.cs:line 330 at System.Net.WebSockets.Client.Tests.SendReceiveTest.ZeroByteReceive_CompletesWhenDataAvailable(Uri server) in E:\A\_work\36\s\corefx\src\System.Net.WebSockets.Client\tests\SendReceiveTest.cs:line 461 --- End of stack trace from previous location where exception was thrown --- ----- Inner Stack Trace ----- at System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(IBuffer source, UInt32 sourceIndex, Byte[] destination, Int32 destinationIndex, Int32 count) in E:\A\_work\36\s\corefx\src\System.Runtime.WindowsRuntime\src\System\Runtime\InteropServices\WindowsRuntime\WindowsRuntimeBufferExtensions.cs:line 182 at System.Net.WebSockets.WinRTWebSocket.OnMessageReceived(MessageWebSocket sender, MessageWebSocketMessageReceivedEventArgs args) in E:\A\_work\36\s\corefx\src\System.Net.WebSockets.Client\src\System\Net\WebSockets\WinRTWebSocket.cs:line 385 Build : Master - 20180403.01 (UWP F5 Tests) Failing configurations: - Windows.10.Arm64-arm - Release - Windows.10.Amd64.ClientRS3-x86 - Release - Windows.10.Amd64.ClientRS3-x64 - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180403.01/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest~2FZeroByteReceive_CompletesWhenDataAvailable(server:%20ws:~2F~2Fcorefx-net.cloudapp.net~2FWebSocket~2FEchoWebSocket.ashx)",0
"Test System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTest failed with ""System.NullReferenceException : Object reference not set to an instance of an object."" Test System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTest has failed. MESSAGE: System.NullReferenceException : Object reference not set to an instance of an object. ~~~ STACK TRACE: at System.Collections.Generic.Dictionary`2.FindEntry(TKey key) in /root/coreclr/src/mscorlib/shared/System/Collections/Generic/Dictionary.cs:line 410 at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value) in /root/coreclr/src/mscorlib/shared/System/Collections/Generic/Dictionary.cs:line 873 at System.Xml.Serialization.XmlSerializer..ctor(Type type, String defaultNamespace) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_release/src/System.Private.Xml/src/System/Xml/Serialization/XmlSerializer.cs:line 267 at System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTestInternal(String xml, Int64 testval, String unit_test_id) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_release/src/System.Data.Common/tests/System/Data/SqlTypes/SqlInt64Test.cs:line 724 at System.Data.Tests.SqlTypes.SqlInt64Test.ReadWriteXmlTest() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_release/src/System.Data.Common/tests/System/Data/SqlTypes/SqlInt64Test.cs:line 750 ~~~ Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_centos7.1_release/364/testReport/System.Data.Tests.SqlTypes/SqlInt64Test/ReadWriteXmlTest/",12
"System.NullReferenceException in System.Net.Http.WinHttpRequestCallback.RequestCallback Couldn't find any issue that seemed to cover the problem. I'm running kestrel in tests, and writing a reverse proxy component. At an unknown point in running the tests, I get the following exception: ``` System.NullReferenceException: Object reference not set to an instance of an object. at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) at Interop.WinHttp.WinHttpCloseHandle(IntPtr handle) at Interop.WinHttp.SafeWinHttpHandle.ReleaseHandle() at System.Runtime.InteropServices.SafeHandle.InternalDispose() at System.Net.Http.WinHttpRequestState.ClearSendRequestState() at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) at System.Threading.ThreadPoolWorkQueue.Dispatch() ``` Repro: - code: openrasta/openrasta-core@e2b2c5d - tests: https://github.com/openrasta/openrasta-core/blob/1e006fddfd91b14d92177c3948517a809074f553/src/Tests/Plugins.ReverseProxy/errors/proxied_timeout.cs - build failing: https://ci.appveyor.com/project/OpenRasta/openrasta-core/build/2.6.0-preview.1.1298+master It looks like the same stacktrace as in #26278 Note builds and tests succeed on core 2 on libcurl-based http client. I tried not disposing request/response messages from the client, no change. I'm refactoring the code at the moment, so maybe the problem will go away, but i'm pretty confused.",0
I removed ReadOnlySequence common tests from factory tests I removed ReadOnlySequence common tests from factory tests. They are duplicates of comment tests and they does not use factory.,10
"alpine build should be built with /p:PortableBuild=true This issue spans both `dotnet/corefx` and `dotnet/coreclr`. In order to support our runtime on musl-based distros that are not alpine, we should be building our runtime with `/p:PortableBuild=true`. This will enable loading the correct libicu and libssl that are on the distro. See - https://github.com/dotnet/corefx/blob/master/buildpipeline/pipeline.json#L52 - https://github.com/dotnet/coreclr/blob/master/buildpipeline/pipelines.json#L50 This is a follow up to: https://github.com/dotnet/core-setup/issues/3817",1
"System.Net.Security.SslStream throws exception while running EF tests While running EF tests on Ubuntu against netcoreapp2.1 an exception is thrown ``` Failed Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.Deletes_database(async: False, open: True, ambientTransaction: False) Error Message: System.NotSupportedException : The WriteAsync method cannot be called when another write operation is pending. Stack Trace: at System.Net.Security.SslStreamInternal.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory`1 buffer) at System.Net.Security.SslStreamInternal.Write(Byte[] buffer, Int32 offset, Int32 count) at System.Net.Security.SslStream.Write(Byte[] buffer, Int32 offset, Int32 count) at System.Data.SqlClient.SNI.SNITCPHandle.Send(SNIPacket packet) at System.Data.SqlClient.SNI.SNIMarsConnection.Send(SNIPacket packet) at System.Data.SqlClient.SNI.SNIMarsHandle.SendControlPacket(SNISMUXFlags flags) at System.Data.SqlClient.SNI.SNIMarsHandle.Dispose() at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.Dispose() at System.Data.SqlClient.TdsParser.Disconnect() at System.Data.SqlClient.SqlInternalConnectionTds.Dispose() at System.Data.ProviderBase.DbConnectionPool.DestroyObject(DbConnectionInternal obj) at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj) at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject) at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory) at System.Data.SqlClient.SqlConnection.Close() at System.Data.SqlClient.SqlConnection.Dispose(Boolean disposing) at System.ComponentModel.Component.Dispose() at Microsoft.EntityFrameworkCore.TestUtilities.RelationalTestStore.Dispose() in /home/saurabh/EntityFrameworkCore/src/EFCore.Relational.Specification.Tests/TestUtilities/RelationalTestStore.cs:line 41 at Microsoft.EntityFrameworkCore.TestUtilities.SqlServerTestStore.Dispose() in /home/saurabh/EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests/TestUtilities/SqlServerTestStore.cs:line 414 at Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.<Delete_database_test>d__2.MoveNext() in /home/saurabh/EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs:line 154 --- End of stack trace from previous location where exception was thrown --- --- End of stack trace from previous location where exception was thrown --- --- End of stack trace from previous location where exception was thrown --- ``` Steps to repro Clone the EFCore repo `https://github.com/aspnet/EntityFrameworkCore` Build the repo from the root using build.sh Execute the tests in /EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests Steps: 1. Modify config.json to have a valid connection string (something like) ""Data Source=tcp:server,1437;Database=master;Integrated Security=False;Connect Timeout=60;ConnectRetryCount=0;uid=saurabh;pwd=*******;MultipleActiveResultSets=False"" 2. Execute test ``` ~/.dotnet/dotnet test --framework netcoreapp2.1 --filter=""FullyQualifiedName=Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.Deletes_database"" ``` This test passes one out of every 5 times when run for framework netcoreapp2.1 Run the test against netcoreapp2.0 and it passes consistently. Some in System.Net.Security changed? Please contact me for the database password via email for quicker setup.",0
"System.MissingMethodException when using 4.5.0-preview2-* library with master SDK Valid repro: [DirectoryRepro.zip](https://github.com/dotnet/corefx/files/1899838/DirectoryRepro.zip) Execute repro with `dotnet run -c Release`. ``` Unhandled Exception: System.MissingMethodException: Method not found: 'System.ReadOnlySpan`1<Char> System.MemoryExtensions.AsSpan(System.String)'. at System.IO.Enumeration.FileSystemEnumerableFactory.NormalizeInputs(String& directory, String& expression, EnumerationOptions options) at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options) at DirectoryRepro.Program.Main() in /tmp/test4/Program.cs:line 9 ``` I reproduced it on Windows as well as Linux. This issue did not happen previously with using 4.5.0-preview1-* library also on latest master SDK. I suspect some API incompatibility (probably not in the library being pulled, but one of its dependencies). If this is intended then how we're expected to use this library with latest master SDK? Thank you in advance. ``` .NET Core SDK (reflecting any global.json): Version: 2.1.300-preview3-008443 Commit: 1e2e8138b9 Runtime Environment: OS Name: debian OS Version: OS Platform: Linux RID: debian-x64 Base Path: /opt/dotnet/sdk/2.1.300-preview3-008443/ Host (useful for support): Version: 2.1.0-preview3-26404-01 Commit: 1b1a652c15 .NET Core SDKs installed: 2.1.300-preview3-008443 [/opt/dotnet/sdk] .NET Core runtimes installed: Microsoft.AspNetCore.All 2.1.0-preview2-30431 [/opt/dotnet/shared/Microsoft.AspNetCore.All] Microsoft.AspNetCore.App 2.1.0-preview2-30431 [/opt/dotnet/shared/Microsoft.AspNetCore.App] Microsoft.NETCore.App 2.1.0-preview3-26404-01 [/opt/dotnet/shared/Microsoft.NETCore.App] ```",10
"DualModeConnectAsync_DnsEndPointToHost_Helper fails in CI with TrueException on OSX From https://github.com/dotnet/corefx/pull/28992 OSX.1012.Amd64.Open-x64-Debug System.Net.Sockets.Tests.DualModeConnectAsync/DualModeConnectAsync_DnsEndPointToHost_Helper(listenOn: ::, dualModeServer: True) https://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/95b8f31c8f84213f3192a6b9d96e8b2ecdb2dcfe/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.DualModeConnectAsync~2FDualModeConnectAsync_DnsEndPointToHost_Helper(listenOn:%20::,%20dualModeServer:%20True) ```text Unhandled Exception of Type Xunit.Sdk.TrueException Message : Timed out while waiting for connection Expected: True Actual: False Stack Trace : at System.Net.Sockets.Tests.DualModeConnectAsync.DualModeConnectAsync_DnsEndPointToHost_Helper(IPAddress listenOn, Boolean dualModeServer) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs:line 588 ```",0
"Stop artificially rooting SocketAsyncEventArgs SocketAsyncEventArgs creates an overlapped object that references the SAEA. That overlapped object creates an async pinning handle in the runtime, which roots the SocketAsyncEventArgs. The cycle from SAEA->Overlapped->handle->SAEA involving the root means that a dropped SAEA that's not Dispose'd will end up leaking. This commit fixes that by adding a level of indirection between the handle and the SAEA. Rather than wrapping the SAEA directly, the handle is given an intermediate object that references the SAEA, and the SAEA then stores itself as a reference into that object only while an active operation is in progress. Once the operation completes, the reference in that object is nulled out, and the SAEA will no longer be kept alive by the pinning handle. Fixes https://github.com/dotnet/corefx/issues/28746 cc: @geoffkizer, @davidsh, @halter73",0
"Use of Unsafe.As in ReadOnlySequence can result in breaking type safety In multiple places, the ReadOnlySequence struct checks a flag set in one field and then uses that to determine how to cast an object in another field, using Unsafe.As, e.g. https://github.com/dotnet/corefx/blob/da1322d90a1412290a82a5ace157da4cc58dabf4/src/System.Memory/src/System/Buffers/ReadOnlySequence_helpers.cs#L39-L42 If the ReadOnlySequence suffers a torn read/write, we could end up with the type information from one instance conflated with the object from another, such that we'd then use Unsafe.As to perform the wrong cast, and violate type safety. cc: @jkotas, @davidfowl, @pakrym, @ahsonkhan, @GrabYourPitchforks",10
"Update the Release Notes link for NuGet packages to point to .NET Core 2.1 Currently, the release notes link in the published packages point to [.NET Core 2.0.4](https://go.microsoft.com/fwlink/?LinkID=799421): https://github.com/dotnet/corefx/blob/a985f20d1a04d49ad086e3ef066565d05701cdaa/Packaging.props#L14 For example, see the preview2 System.Memory package which links to old release notes: https://www.nuget.org/packages/System.Memory/4.5.0-preview2-26406-04 We should update it to point to the .NET Core 2.1 release notes (once they are a available). We have preview1/preview2 notes at the moment in: https://github.com/dotnet/core/tree/master/release-notes/2.1 cc @ericstj, @joshfree, @weshaggard, @leecow, @danmosemsft, @karelz",1
"Support UnixDomainSocketEndPoint on Windows Windows is adding support for Unix domain sockets, and it's easy to enable that support via our new UnixDomainSocketEndPoint type. Fixes https://github.com/dotnet/corefx/issues/27542 cc: @eerhardt, @danmosemsft, @geoffkizer, @sunilmut, @tmds",0
"Fix perf hit from WinHttpGetProxyForUrl The recent addition of calling WinHttpGetProxyForUrl by default for each SocketsHttpHandler request on Windows is adding non-trivial overhead, at least 5% to each request in a local measurement. We should avoid that. For example, by using WinHttpDetectAutoProxyConfigUrl to see if there's an autoproxy, and if there isn't, caching that knowledge and then skipping WinHttpGetProxyForUrl for all subsequent requests. We may also need/want to query WinHttpGetIEProxyConfigForCurrentUser in that case, again caching the results, similar to what's done on Unix. cc: @karelz, @wfurt, @geoffkizer",0
System.IO.Tests.DirectoryInfo Win10 UWP CI Failures UWP CoreCLR x64 Debug Build Windows.10.Amd64.ClientRS2.Open-Debug-x64 ``` System.IO.Tests.DirectoryInfo_Create RootPath Unhandled Exception of Type System.IO.DirectoryNotFoundException Message : System.IO.DirectoryNotFoundException : Could not find a part of the path 'C:\\'. Stack Trace : at System.IO.FileSystem.CreateDirectory(String fullPath) at System.IO.DirectoryInfo.Create() at System.IO.Tests.DirectoryInfo_Create.Create(String path) in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\DirectoryInfo\Create.cs:line 16 at System.IO.Tests.Directory_CreateDirectory.RootPath() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\Directory\CreateDirectory.cs:line 89 ``` ``` System.IO.Tests.DirectoryInfo_Exists Root Assert.True() Failure Expected: True Actual: False Stack Trace : at System.IO.Tests.DirectoryInfo_Exists.Root() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\DirectoryInfo\Exists.cs:line 43 ``` ``` System.IO.Tests.DirectoryInfo_ToString DriveOnlyReturnsPeriod_Windows_Desktop Assert.Equal() Failure ↓ (pos 0) Expected: . Actual: C: ↑ (pos 0) Stack Trace : at System.IO.Tests.DirectoryInfo_ToString.DriveOnlyReturnsPeriod_Windows_Desktop() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\DirectoryInfo\ToString.cs:line 47 ``` ``` System.IO.Tests.Directory_CreateDirectory RootPath Unhandled Exception of Type System.IO.DirectoryNotFoundException Message : System.IO.DirectoryNotFoundException : Could not find a part of the path 'C:\\'. Stack Trace : at System.IO.FileSystem.CreateDirectory(String fullPath) at System.IO.Directory.CreateDirectory(String path) at System.IO.Tests.Directory_CreateDirectory.Create(String path) in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\Directory\CreateDirectory.cs:line 17 at System.IO.Tests.Directory_CreateDirectory.RootPath() in D:\j\workspace\windows-TGrou---33cbf18b\src\System.IO.FileSystem\tests\Directory\CreateDirectory.cs:line 89 ``` #27644 #27650 #27645,5
"[Desktop] System.AccessViolationException on HttpClient with Certificates Hi, I think, this bug relates to #17127, respective to #15839. When I'm using mutual authentification per SSL and I send something to a server, then I get a `System.AccessViolationException` without any stack trace. Here is my custom class which extends `HttpClient` and uses a client certificate and has a custom certificate validation: ```C# public class QlcHttpsClient : HttpClient { private static readonly QlcHttpsClient instance = new QlcHttpsClient(); public QlcHttpsClient() : base(GetHttpMessageHandler()) { } public static QlcHttpsClient Instance { get { return instance; } } private static HttpMessageHandler GetHttpMessageHandler() { X509Certificate2 cert = new X509Certificate2(); cert.Import(GetClientCertificate(), ""mypass"", X509KeyStorageFlags.DefaultKeySet); var clientHandler = new WebRequestHandler(); clientHandler.ClientCertificates.Add(cert); clientHandler.ServerCertificateValidationCallback = RemoteCertificateValidationCallback; return clientHandler; } private static byte[] GetClientCertificate() { var res = new ResourceManager(""QLCClient.resources"", typeof(QlcTestResultsController).Assembly); byte[] rawCert = (byte[]) res.GetObject(""my_cert""); return rawCert; } private static bool RemoteCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { string thumbprint = certificate.GetCertHashString(); string expectedThumbprint = ""5D772BB5C085AB490E2773DAA54EC27F3605BDF9""; if (certificate.Issuer.Contains(""CN=MyCN"") && thumbprint.Equals(expectedThumbprint, StringComparison.OrdinalIgnoreCase)) { return true; } return false; } } ``` When I step with Visual Studio line by line, then I get the named Exception on `SendAsync()`. ```C# class QlcHttpTransmitter { private static readonly QlcHttpsClient client = QlcHttpsClient.Instance; public static async Task<HttpResponseMessage> Send(string pathValue, HttpContent content, HttpMethod httpMethod) { UriBuilder builder = QlcUriBuilder.GetUriBuilder(pathValue); HttpRequestMessage httpRequestMessage = new HttpRequestMessage(httpMethod, builder.Uri) { Content = content }; HttpResponseMessage response = await client.SendAsync(httpRequestMessage); // Throws System.AccessViolationException return response; } } ``` I'm using .Net Framework 4.6.2 and I get this Exception only in my system test. But when I migrate to .Net Framework 4.7.1 then I get this also in production code. So I think the bug is always there and it depends on the runtime behaviour.",0
Disable drawing test for distro Ubuntu18.04 Related to #27021,13
CoreFx test utility depends on Microsoft.DotNet.PlatformAbstractions @krwq @tarekgh @eerhardt added a dependency on Microsoft.DotNet.PlatformAbstractions to CoreFx.TestUtilities in https://github.com/dotnet/corefx/pull/24531. That cause a cycle in our build-from-source efforts so we have to figure out a solution to break that cycle. For now I'm going to break the cycle by pinning to an existing version but we cannot do that in general because it requires us to have an existing binary which is bad for new-distro bring-up. @eerhardt what is your thoughts on bring Microsoft.DotNet.PlatformAbstractions into corefx?,1
"System.Runtime.Intrinsics in .NET Core 2.1 # System.Runtime.Intrinsics in .NET Core 2.1 .NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions. See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information. We have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe. This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package. These APIs won’t be included in the official .NET Core 2.1 packages. Given our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like `Span<T>` and `Memory<T>` that first shipped in preview before formally joining the supported API surface. Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well. These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward. ## Details In the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package. This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1. At the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package. In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package. As its name implies, this package is experimental and should only be used for preview purposes. It isn’t expected to be used in production scenarios. Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified. In the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported. ## Call to action Please review this plan and provide any feedback in the comments of this issue.",4
Expose Thread.GetCurrentProcessorId() Fixes #16767,4
"ILLink initlocals custom step fails when building on Unix Adding ```XML <ILLinkClearInitLocals>true</ILLinkClearInitLocals> ``` to a corefx .csproj works fine on Windows but fails to build on Linux with the error: ``` IL Linker Error: Step type 'ILLink.CustomSteps.ClearInitLocalsStep,ILLink.CustomSteps' not found. illink [options] -x|-a|-i file --about About the IL Linker --version Print the version number of the IL Linker --skip-unresolved Ignore unresolved types and methods (true or false) --dump-dependencies Dump dependencies for the linker analyzer tool -out Specify the output directory, default to `output' -c Action on the core assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to skip -u Action on the user assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to link -p Action per assembly -s Add a new step to the pipeline. -t Keep assemblies in which only type forwarders are referenced. -d Add a directory where the linker will look for assemblies -b Generate debug symbols for each linked module (true or false) -g Generate a new unique guid for each linked module (true or false) -v Keep memebers needed by debugger attributes (true or false) -h List of reflection heuristics separated with a comma. Supported heuristics: LdtokenTypeMethods: mark all methods of types whose token is used in an ldtoken instruction LdtokenTypeFields: mark all fields of types whose token is used in an ldtoken instruction InstanceConstructors: mark all instance constructors in types where an instance member has been marked but none of the instance constructors have been marked -l List of i18n assemblies to copy to the output directory separated with a comma: none,all,cjk,mideast,other,rare,west default is all -x Link from an XML descriptor -a Link from a list of assemblies -r Link from a list of assemblies using roots visible outside of the assembly -i Link from an mono-api-info descriptor -z Include default preservations (true or false), default to true Command execution failed with exit code 1. ``` cc: @sbomer, @JosephTremoulet",1
"Prevent CMake 2.8 tests failing for unused variable (causing millisec to be dropped from stat calls) Fix https://github.com/dotnet/corefx/issues/27662 which only reproduced with bits built from official build machines. The millisecond part of the stat structs can appear in several forms or possibly not be available so we probe for it with CMake's such: ```c check_struct_has_member( ""struct stat"" st_atim ""sys/types.h;sys/stat.h"" HAVE_STAT_TIM) ``` This was failing on the official build machines even though st_atim is present in the struct. The cause can be found in `corefx/bin/obj/Linux.x64.Debug/native/CMakeFiles/CMakeError.log` ``` Building C object CMakeFiles/cmTryCompileExec161514853.dir/src.c.o /usr/local/bin/clang-3.9 -std=gnu99 -D_GNU_SOURCE -DHAVE_STAT_TIM -Werror -o CMakeFiles/cmTryCompileExec161514853.dir/src.c.o -c /root/corefx/bin/obj/Linux.x64.Debug/native/CMakeFiles/CMakeTmp/src.c /root/corefx/bin/obj/Linux.x64.Debug/native/CMakeFiles/CMakeTmp/src.c:8:9: error: expression result unused [-Werror,-Wunused-value] tmp->st_atim; ~~~ ^~~~~~~ 1 error generated. gmake[1]: *** [CMakeFiles/cmTryCompileExec161514853.dir/src.c.o] Error 1 ``` This is because the test code is like this: ```c #include <sys/types.h> #include <sys/stat.h> int main() { struct stat* tmp; tmp->st_atim; return 0; } ``` In later versions of CMake it looks like this which avoids the warning/error. ```c int main() { (void)sizeof(((struct stat *)0)->st_atim); return 0; } ``` The fix is to specifically disable warning as error for this diagnostic. I verified this fixes it on the build machine: ``` -- Performing Test HAVE_STAT_TIM -- Performing Test HAVE_STAT_TIM - Success ``` The main reason this took some time to root cause (other than it not reproing locally or in CI) was that I did not realize the official builds build in docker containers in order to achieve a portable build on Centos 7. So when I built on the official build boxes, I was picking up cmake version 3.5.1 rather than 2.8.12.2.",1
"Test failures in System.IO.FileSystem System.IO.Tests.Directory_Exists.ExtendedDriveAsPath [FAIL] Assert.All() Failure: 2 out of 4 items in the collection did not pass. [3]: Xunit.Sdk.TrueException: Assert.True() Failure Expected: True Actual: False at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90 at System.IO.Tests.Directory_Exists.<ExtendedDriveAsPath>b__33_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 391 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31 [2]: Xunit.Sdk.TrueException: Assert.True() Failure Expected: True Actual: False at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90 at System.IO.Tests.Directory_Exists.<ExtendedDriveAsPath>b__33_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 391 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31 Stack Trace: d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs(391,0): at System.IO.Tests.Directory_Exists.ExtendedDriveAsPath() System.IO.Tests.Directory_Exists.DriveAsPath [FAIL] Assert.All() Failure: 2 out of 4 items in the collection did not pass. [3]: Xunit.Sdk.TrueException: Assert.True() Failure Expected: True Actual: False at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90 at System.IO.Tests.Directory_Exists.<DriveAsPath>b__32_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 383 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31 [2]: Xunit.Sdk.TrueException: Assert.True() Failure Expected: True Actual: False at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\BooleanAsserts.cs:line 90 at System.IO.Tests.Directory_Exists.<DriveAsPath>b__32_0(String drive) in d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs:line 383 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\CollectionAsserts.cs:line 31 Stack Trace: d:\Repos\corefx\src\System.IO.FileSystem\tests\Directory\Exists.cs(383,0): at System.IO.Tests.Directory_Exists.DriveAsPath()",5
"Ensuring order in case of exception in System.Threading.Tasks.Dataflow blocks Dataflow blocks shut down in case of an exception, but a few more items may get propagated before actual completion, including items that appeared after the faulty one in the input sequence. I may provide a few lines of code to show this, but looking at the source code it seems this is intended. I don't get the rationale of this behavior: skipping a faulty item but propagating a few subsequent ones seems at odd with the (very useful) ordering guarantee that all blocks provide by default. In my use case, for example, I process items (file lines) with some degree of parallelism in a transform block, linked to a (sequential) action block in charge of storing a kind of 'commit point'. In case of an error I'd like to restart from the previously saved commit point, skipping most of the input lines already processed but still ensuring 'at least once' processing. I think that items following a faulty one should not be propagated.",8
"[Perf] Ubuntu16.04 runs blocked by multiple ""PE file is already strong-name signed."" errors [perf_ubuntu16.04_release](https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_ubuntu16.04_release/1715/consoleText) ```bash bash ./build-managed.sh -release -tests -- /p:Performance=true /p:TargetOS=Linux /m:1 /p:LogToBenchview=true /p:BenchviewRunType=rolling /p:PerformanceType=Profile ``` ... /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/Tools/sign.targets(113,5): error : /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/bin/obj/ref/System.Threading.Tasks.Dataflow/4.6.3.0/netstandard/System.Threading.Tasks.Dataflow.dll: PE file is already strong-name signed. [/home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/src/System.Threading.Tasks.Dataflow/ref/System.Threading.Tasks.Dataflow.csproj] 0 Warning(s) 32 Error(s)",1
"Stop blocking explicit opt-in to old SslProtocols in SslStream and HttpClient By default, .NET Core defaults to allowing TLSv1, TLSv1.1, and TLSv1.2. However, whereas .NET Framework allows a developer to opt-in to SSLv2/SSLv3, .NET Core currently blocks it. This means developers are unable to use .NET Core when they need to communicate with an endpoint they don't control and that's unfortunately limited to one of these protocols, which blocks adoption of .NET Core. This commit stops blocking these protocols. They're still disabled by default, and compiling against them still results in a deprecation warning, but if a developer chooses to ignore the warning and explicitly sets SslProtocols, they are at least able to use the protocols, subject to whatever the underlying operating system allows (e.g. Windows stops supporting SSLv2 as of v1607). Fixes https://github.com/dotnet/corefx/issues/15661 cc: @bartonjs, @GrabYourPitchforks, @davidsh (Note I'm expecting when mission control comes back up I'll still have a handful of test failures to investigate. I also should call out that some of the impacted tests are previously ActiveIssue'd, so as part of testing this I temporarily commented out the ActiveIssue, but I reverted that commenting for the PR.)",0
"What happens when a new era is added in Japanese Calendar? (moved from https://github.com/dotnet/cli/issues/8733 ) I wonder this might not a suitable repo for this issue. Please let me know the right repo and then I'll move. A new era will be added in Japanese Calendar, which is planned to start at May 1st 2019. I'd like to clarify how Japanese Calendar will be updated. Here are my understanding about a new era. I would appreciate .NET Core team confirm it. I also want a dedicated document explaining a new era and help creating it. - At present Japanese Calendar is the only Calendar which a new era could be added. https://github.com/dotnet/coreclr/blob/v2.0.5/src/mscorlib/shared/System/Globalization/CalendarData.Unix.cs#L269 - For Windows, Japanese era info is obtained from registry. Once registry is updated to the new era, .NET Core on WIndows can get a new era info. https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd317805%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396 - For Unix (Linux and Mac), Japanese era info is obtained from lib-icu. Once a new version of icu is installed to the machine, .NET Core on Unix can get a new era info. https://github.com/dotnet/coreclr/blob/v2.0.5/src/mscorlib/shared/Interop/Unix/System.Globalization.Native/Interop.Calendar.cs - In the case .NET Core can't get a era info from registry on Windows and lib-icu on Unix, .NET Core uses [a hard-coded era info](https://github.com/dotnet/coreclr/blob/v2.0.5/src/mscorlib/shared/System/Globalization/JapaneseCalendar.cs#L97-L120). I'm not sure when this hard-coded era info is used actually. However in this case, upgrading .NET Core CLR is required to update a new era info. Also, if the application is built as a Self Contained Application, I wonder we can't update the a new era info in this application. Are these issues related? https://github.com/dotnet/corefx/issues/27506 https://github.com/dotnet/corefx/pull/27617",19
"ReadOnlySequence constructor validation issues `public ReadOnlySequence(ReadOnlySequenceSegment<T> startSegment, int startIndex, ReadOnlySequenceSegment<T> endSegment, int endIndex)` constructor does not validate some issues. I suggest to add next validations: 1. `endSegment.RunningIndex < 0` to validate that endSegment.RunningIndex not negative. 2. `startSegment != endSegment && (ulong)startSegment.RunningIndex > (ulong)endSegment.RunningIndex - startSegment.Memory.Length` to validate that startSegment.RunningIndex not negative and startSegment.RunningIndex + startSegment.Memory.Length <= endSegment.RunningIndex (validate correct order of startSegment and endSegment). 3. Should we check that end is reachable and all `RunningIndex` are correct? 4. Also this constructor throw `ThrowArgumentValidationException` exception without endIndex parameter. `ThrowHelper.ThrowArgumentValidationException(startSegment, startIndex, endSegment);` I think it should be `ThrowHelper.ThrowArgumentValidationException(startSegment, startIndex, endSegment, endIndex);` If so then `ThrowHelper.ThrowArgumentValidationException` message should be changed also.",10
"libcurl HttpClient incompatibility with HTTP2 protocol Recently I started running into issues like this one: ```csharp OnUnobservedTaskException() System.AggregateException: A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (An error occurred while sending the request.) ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Error in the HTTP2 framing layer at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) --- End of inner exception stack trace --- at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) at Discord.Net.Rest.DefaultRestClient.SendInternalAsync(HttpRequestMessage request, CancellationToken cancelToken, Boolean headerOnly) at Discord.Net.Rest.DefaultRestClient.SendAsync(String method, String endpoint, CancellationToken cancelToken, Boolean headerOnly, String reason) at Discord.Net.Queue.RestRequest.SendAsync() at Discord.Net.Queue.RequestBucket.SendAsync(RestRequest request) at Discord.Net.Queue.RequestQueue.SendAsync(RestRequest request) at Discord.API.DiscordRestApiClient.SendInternalAsync(String method, String endpoint, RestRequest request) at Discord.API.DiscordRestApiClient.SendAsync[TResponse](String method, String endpoint, String bucketId, ClientBucketType clientBucket, RequestOptions options) at Discord.API.DiscordSocketApiClient.GetGatewayAsync(RequestOptions options) at Discord.API.DiscordSocketApiClient.ConnectInternalAsync() at Discord.API.DiscordSocketApiClient.ConnectInternalAsync() at Discord.API.DiscordSocketApiClient.ConnectAsync() at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync() at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync() at Discord.ConnectionManager.ConnectAsync(CancellationTokenSource reconnectCancelToken) at Discord.ConnectionManager.<>c__DisplayClass28_0.<<StartAsync>b__0>d.MoveNext() --- End of inner exception stack trace --- ---> (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Error in the HTTP2 framing layer at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) --- End of inner exception stack trace --- at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) at Discord.Net.Rest.DefaultRestClient.SendInternalAsync(HttpRequestMessage request, CancellationToken cancelToken, Boolean headerOnly) at Discord.Net.Rest.DefaultRestClient.SendAsync(String method, String endpoint, CancellationToken cancelToken, Boolean headerOnly, String reason) at Discord.Net.Queue.RestRequest.SendAsync() at Discord.Net.Queue.RequestBucket.SendAsync(RestRequest request) at Discord.Net.Queue.RequestQueue.SendAsync(RestRequest request) at Discord.API.DiscordRestApiClient.SendInternalAsync(String method, String endpoint, RestRequest request) at Discord.API.DiscordRestApiClient.SendAsync[TResponse](String method, String endpoint, String bucketId, ClientBucketType clientBucket, RequestOptions options) at Discord.API.DiscordSocketApiClient.GetGatewayAsync(RequestOptions options) at Discord.API.DiscordSocketApiClient.ConnectInternalAsync() at Discord.API.DiscordSocketApiClient.ConnectInternalAsync() at Discord.API.DiscordSocketApiClient.ConnectAsync() at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync() at Discord.WebSocket.DiscordSocketClient.OnConnectingAsync() at Discord.ConnectionManager.ConnectAsync(CancellationTokenSource reconnectCancelToken) at Discord.ConnectionManager.<>c__DisplayClass28_0.<<StartAsync>b__0>d.MoveNext()<--- ``` I'm almost 100% sure that this issue is the result of some incompatibility with recent libcurl version. I reproduced it with libcurl3 in version 7.58.0 available in Debian testing repo. Temporarily I downgraded myself back to 7.52.1 available in Debian stable and I can't reproduce the issue anymore, at least for now. The exception itself isn't exactly in my code but in third-party library I'm using, although there is nothing unusual there. ```csharp private async Task<RestResponse> SendInternalAsync(HttpRequestMessage request, CancellationToken cancelToken, bool headerOnly) { cancelToken = CancellationTokenSource.CreateLinkedTokenSource(_cancelToken, cancelToken).Token; HttpResponseMessage response = await _client.SendAsync(request, cancelToken).ConfigureAwait(false); var headers = response.Headers.ToDictionary(x => x.Key, x => x.Value.FirstOrDefault(), StringComparer.OrdinalIgnoreCase); var stream = !headerOnly ? await response.Content.ReadAsStreamAsync().ConfigureAwait(false) : null; return new RestResponse(response.StatusCode, headers, stream); } ``` I'm using one of the recent master builds and I didn't see anything related fixed lately. ``` .NET Command Line Tools (2.1.300-preview2-008293) Product Information: Version: 2.1.300-preview2-008293 Commit SHA-1 hash: 68922e2a51 Runtime Environment: OS Name: debian OS Version: OS Platform: Linux RID: debian-x64 Base Path: /opt/dotnet/sdk/2.1.300-preview2-008293/ Host (useful for support): Version: 2.1.0-preview2-26227-01 Commit: 86d1f92013 .NET Core SDKs installed: 2.1.300-preview2-008293 [/opt/dotnet/sdk] The.NET Core runtimes installed: Microsoft.AspNetCore.App 2.1.0-preview2-30171 [/opt/dotnet/shared] Microsoft.NETCore.App 2.1.0-preview2-26227-01 [/opt/dotnet/shared] Microsoft.AspNetCore.All 2.1.0-preview2-30171 [/opt/dotnet/shared] ``` I'm now making sure that old libcurl version fixes the issue, since I could've identified the root cause wrong, but for now I can't run into this issue anymore with older libcurl version. I'll make sure to let you know in case it's something else, but if my guess was right then this should be fixed in corefx repo, and stacktrace suggests that even if my guess is wrong then there is some incompatibility in net core internals that should be verified. Also I have no clue under exactly what condition the exception is happening. It's definitely related to HTTP2 connection, but it seems that not all requests going through HTTP2 throw this exception (?) Thank you in advance for looking into this.",0
"Test failure: System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests/CreateChain_Hybrid The test `System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests/CreateChain_Hybrid` has failed. ``` Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : An internal consistency check failed Stack Trace: at System.Security.Cryptography.CngKeyLite.GenerateNewExportableKey(String algorithm, Int32 keySize) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.Algorithms\src\System\Security\Cryptography\CngKeyLite.cs:line 138 at System.Security.Cryptography.RSAImplementation.RSACng.GetDuplicatedKeyHandle() in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.Algorithms\src\System\Security\Cryptography\RSACng.cs:line 34 at System.Security.Cryptography.RSAImplementation.RSACng.ExportKeyBlob(Boolean includePrivateParameters) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.Algorithms\src\System\Security\Cryptography\RSACng.cs:line 48 at System.Security.Cryptography.RSAImplementation.RSACng.ExportParameters(Boolean includePrivateParameters) in E:\A\_work\2\s\corefx\src\Common\src\System\Security\Cryptography\RSACng.ImportExport.cs:line 118 at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.BuildPublicKey(RSA rsa) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\RSAPkcs1X509SignatureGenerator.cs:line 33 at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.BuildPublicKey() in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\RSAPkcs1X509SignatureGenerator.cs:line 28 at System.Security.Cryptography.X509Certificates.CertificateRequest..ctor(String subjectName, RSA key, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\src\System\Security\Cryptography\X509Certificates\CertificateRequest.cs:line 136 at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.OpenCertRequest(String dn, AsymmetricAlgorithm key, HashAlgorithmName hashAlgorithm) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 210 at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.CreateChainRequest(String dn, AsymmetricAlgorithm key, HashAlgorithmName hashAlgorithm, Boolean isCa, Nullable`1 pathLen) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 252 at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.CreateAndTestChain(AsymmetricAlgorithm rootPrivKey, AsymmetricAlgorithm intermed1PrivKey, AsymmetricAlgorithm intermed2PrivKey, AsymmetricAlgorithm leafPubKey) in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 361 at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.CertificateRequestChainTests.CreateChain_Hybrid() in E:\A\_work\2\s\corefx\src\System.Security.Cryptography.X509Certificates\tests\CertificateCreation\CertificateRequestChainTests.cs:line 60 Build : Master - 20180423.04 (Core Tests) ``` Failing configurations: - Windows.81.Amd64-x86 - Release",3
Build failures in 'official/corefx/release/2.0.0-msrc/' - '20180411.01' Test test test,3
"System.Data.Tests.DataTableTest.WriteXmlSchema3 test failed in CI on netfx ``` System.Data.Tests.DataTableTest.WriteXmlSchema3 [FAIL] Assert.Equal() Failure Expected: ���CurrentLocale=""true"">\n <xs:complexType>\n <xs:choice m��� Actual: ���CurrentLocale=""true"" msdata:EnforceConstraints=""True"">\n <x��� at System.Data.Tests.DataTableTest.WriteXmlSchema3() ``` https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/8520/consoleText",15
Remove workarounds when uapaot System.Private.CoreLib is updated ,1
"Re-enable hostname resolution test on Linux, but skip under certain conditions This test assumed that the host name can always be resolved, which isn't guaranteed on Unix. In the interest of ""testing as much as we can"" I'm going to enable the test, but pass it if we get the specific error that indicates we haven't been able to resolve the localhost on Unix. That way we'll hopefully still see failures if things go wrong somewhere else. The logic to skip the test is taken from another test in the same file: https://github.com/dotnet/corefx/blob/643bccc7f2c24a897cc15c42486d4184e1f931eb/src/System.Net.NameResolution/tests/PalTests/NameResolutionPalTests.cs#L89-L104 Fixes: #20245",0
Change RootDirectory properties to span Exposing string restricts the ability to change internals without introducing unnecessary allocations.,5
"Test failure: System.Text.RegularExpressions.Tests.RegexCacheTests/Ctor_Cache_Promote_entries Opened on behalf of @Sunny-pu The test `System.Text.RegularExpressions.Tests.RegexCacheTests/Ctor_Cache_Promote_entries` has failed. $BlockedFromReflection_0_225208da : Remote process failed with an unhandled exception. Stack Trace: Child exception: System.NullReferenceException: Object reference not set to an instance of an object. at System.Text.RegularExpressions.Tests.RegexCacheTests.GetCachedItemsNum() in E:\A\_work\6\s\corefx\src\System.Text.RegularExpressions\tests\Regex.Cache.Tests.cs:line 151 at System.Text.RegularExpressions.Tests.RegexCacheTests.<Ctor_Cache_Promote_entries>b__4_0() in E:\A\_work\6\s\corefx\src\System.Text.RegularExpressions\tests\Regex.Cache.Tests.cs:line 74 at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetO<System.Int32>(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall) at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState) at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566 Child process: System.Text.RegularExpressions.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb System.Text.RegularExpressions.Tests.RegexCacheTests Int32 <Ctor_Cache_Promote_entries>b__4_0() Build : Master - 20180411.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86 - Release - Windows.10.Amd64.ClientRS3-x64 - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20180411.01/workItem/System.Text.RegularExpressions.Tests/analysis/xunit/System.Text.RegularExpressions.Tests.RegexCacheTests~2FCtor_Cache_Promote_entries",18
"Add DecompressionMethods.All? The addition of `System.Net.DecompressionMethods.Brotli` was [recently approved](https://github.com/dotnet/corefx/issues/26995). I have been writing `DecompressionMethods.Deflate | DecompressionMethods.GZip` in my source automatically; since I don't want to exclude the possibility of Brotli, I'm going to be writing `DecompressionMethods.Deflate | DecompressionMethods.GZip | DecompressionMethods.Brotli`. I am very interested in an `All` member, since that sums up exactly what I care about. ```diff namespace System.Net { [Flags] public enum DecompressionMethods { None = 0, GZip = 1, Deflate = 2, Brotli = 4, + All = ~None } } ``` Would you please review this possibility?",0
Current directory code duplicates Environment Just call Environment.CurrentDirectory. Remove a number of P/Invokes that are no longer in use.,5
"Add SuppressMetaPackage to break circular dependency during package restore See https://github.com/dotnet/corefxlab/pull/2150#issuecomment-372785112 for context (where the issue was manifesting as a VS crash due to stackoverflow). I tested this locally (by building and referencing the System.Threading.Tasks.Extensions/System.IO.Pipelines packages with this fix in a netstandard1.3 class library). cc @weshaggard, @ericstj",4
"Make CreateFromPinnedArray visible and move it to MemoryMarshal Marking the method has `EditorBrowsableState.Never` hurts usability for users (like ASP.NET) who want to [use the API](https://github.com/aspnet/Common/blob/7fd3a209704efe9eb4303fce99062ac2f71d5c6c/shared/Microsoft.Extensions.Buffers.Sources/MemoryPoolBlock.Release.cs#L28). Since the developer needs to be careful with the use of this API (it can be considered unsafe, for instance, if someone calls it on an array that isn't already pre-pinned), we should consider moving it to MemoryMarshal instead, but not hide it. ```diff namespace System { public readonly partial struct Memory<T> { - [EditorBrowsable(EditorBrowsableState.Never)] - public static Memory<T> CreateFromPinnedArray(T[] array, int start, int length) { throw null; } } } namespace System.Runtime.InteropServices { public static partial class MemoryMarshal { + public static Memory<T> CreateFromPinnedArray(T[] array, int start, int length) { throw null; } } } ``` cc @davidfowl, @GrabYourPitchforks, @stephentoub, @KrzysztofCwalina, @pakrym, @benaadams",10
"Optimize Socket.GetOrAllocateThreadPoolBoundHandle This method isn't getting inlined, presumably because there's just enough logic here between this call and the call to SafeCloseSocket.GetOrAllocateThreadPoolBoundHandle (which does get inlined) to prevent inlining. We should change the logic to simply do a quick check for whether the handle is not null, and then return it; if null, call out to a separate function that does the demand creation.",0
Added argument name to the exception Fixes #27357,5
"Improve parsing of WinINet default proxy strings in SocketsHttpHandler WinINet default proxy strings consist of a semicolon or whitespace separated list of proxies, each with the following format: ``` ([<scheme>=][<scheme>""://""]<server>["":""<port>]) ``` For example: ``` http=127.0.0.1:8888;https=127.0.0.1:8888 ``` Our current implementation can only handle a single proxy in the list, and expects that ""://"" will be used instead of ""="". This breaks proxies for users with valid proxy configurations, and applications that configure multiple default proxies (such as Fiddler). In making the fix I tried to write the code to make as few allocations as possible, since the default proxy is checked frequently. Let me know if I should go back to the easy to read fix involving String.Split :) I made the following assumptions when writing this fix: - SocketsHttpHandler only supports http proxies. - When a user provides multiple proxies with the same scheme, we can choose to use the first. This PR also significantly increases the number of test cases for the relevant code. See #28603 for more info.",0
"System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address tests failed on Ubuntu16.04 when COMPlus_GCStress=3: ``` <test name=""System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName"" type=""System.Net.NameResolution.Tests.GetHostByNameTest"" method=""DnsObsoleteGetHostByName_EmptyString_ReturnsHostName"" time=""0.2165148"" result=""Fail""> <failure exception-type=""System.Net.Internals.SocketExceptionFactory+ExtendedSocketException""> <message><![CDATA[System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address]]></message> <stack-trace><![CDATA[ at System.Net.Dns.InternalGetHostByName(String hostName) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 65 at System.Net.Dns.GetHostByName(String hostName) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 32 at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName() in /home/gcsuser/corefx/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 108]]></stack-trace> </failure> </test> <test name=""System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName"" type=""System.Net.NameResolution.Tests.GetHostByNameTest"" method=""DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName"" time=""0.1970667"" result=""Fail""> <failure exception-type=""System.Net.Internals.SocketExceptionFactory+ExtendedSocketException""> <message><![CDATA[System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address]]></message> <stack-trace><![CDATA[ at System.Net.Dns.InternalGetHostByName(String hostName) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 65 at System.Net.Dns.ResolveCallback(Object context) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 208 --- End of stack trace from previous location where exception was thrown --- at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 358 at System.Net.Dns.EndGetHostByName(IAsyncResult asyncResult) in /home/gcsuser/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 383 at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName() in /home/gcsuser/corefx/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 117]]></stack-trace> </failure> </test> ```",0
"CI Drop PR trigger for Ubuntu16.04 arm64 Debug Build leg Due to CI capacity, it would be better to not run these on every PR. @weshaggard Please assign to me. I'll take care of it after #28250 merges. @eerhardt I'll also take care of sharing more code as you suggested.",1
Fix skipping last segment logic in ROS.TryGet https://github.com/dotnet/corefx/issues/28251,10
Enable OdbcConnection.GetSchema The pull requests primarily enable OdbcConnection.GetSchema() API and its overloads. The following changes were made to address this 1. System.Data.Odbc.OdbcMetaData.xml was added to System.Data.Odbc 2. Refactored the files in System.Data.Odbc and System.Data.SqlClient and moved them to Common/src/System/Data/ProviderBase 2.a Only moved the files needed to make OdbcConnection.GetSchema() work. 2.b Added partial qualifier on some of the classes which had diverged because SqlClient supports TransactionScope. Fixes https://github.com/dotnet/corefx/issues/27260 cc @saurabh500,15
Support NegativeInfinity and PositiveInfinity as default value in sgen Make the similar fix as #19724 for NegativeInfinity and PositiveInfinity,12
Forward-port the Intel optimizations to Zlib 1.2.11 ,5
"System.Data.SqlClient.TdsParser performance improvement I've done a little research and it looks like we do a lot of unnecessary allocations in the 'TryReadSqlDateTime' method. For each call of the method we allocate the array of bytes (`` byte[] datetimeBuffer = new byte[length];``) instead of allocating it once and then reuse existing array. Let's imagine that we read 1 million DateTime values from database. Using existing implementation of TdsParser we will have 1 million allocations of byte[] what causes unnecessary memory traffic and isn't so good for GC. So, if nobody minds, I'd make the described changes and then estimate benefits.",15
"Null value in string array in DataRow causes DataRowComparer to throw NRE, but only if it is the first parameter Use object.Equals() to compare array elements and avoid NRE",15
"Add {ReadOnly}Memory.Span tests when memory contains invalid values Related to https://github.com/dotnet/coreclr/pull/17452#discussion_r179748571 cc: @ahsonkhan, @jkotas",10
Created tests for default and empty ReadOnlySequence I created tests for default and empty ReadOnlySequence. Also I fixed issues with new tests.,10
[1.1] Add packaging for Fedora28 and Debian9 cc: @weshaggard @janvorli,1
"Add SocketsHttpHandler check for TransferEncodingChunked w/o Content Fixes https://github.com/dotnet/corefx/issues/27031 cc: @geoffkizer, @davidsh",0
"Use NtCreateFile on Win32 NtCreateFile allows passing in a base handle which makes opening child directories much faster. This cuts anywhere from 3-10% of the time off of a GetFiles() call. It is significantly faster as it avoids normalization and path parsing overhead. cc: @terrajobst, @danmosemsft",5
"update of nuget packages like System.Net.WebSockets.Client Hi, I din't found any documentation what is your policy of updating these kind of nuget packages. @stephentoub has added some days ago the import feature of RemoteCertificateValidationCallback as connect option and I like to understand when I can expect a new nuget packege. bye Konrad",0
"Remove some low-hanging fruit allocations from SocketsHttpHandler connections Most of these aren't actually in SocketsHttpHandler itself, but rather in System.Net.Security or System.Security.Cryptography.X509Certificates. I took a memory allocation trace of creating a bunch of authenticated connections, and started eliminating some of the easier allocations. https://github.com/dotnet/coreclr/pull/16984 is part of this, as was https://github.com/dotnet/corefx/pull/28086 and https://github.com/dotnet/corefx/pull/28084, and https://github.com/dotnet/coreclr/issues/16982 is showing up as well. There's still _a lot_ more there, but this is a start. Reviewing commit by commit is probably easiest. cc: @geoffkizer, @bartonjs, @JeremyKuhne, @davidsh",0
disable Expect: 100-continue test on WinHttpHandler Fixes #27519 @stephentoub,0
"System.Numerics give System.IndexOutOfRangeException when I try to process a vector with 2 items. The exceptions do not really help me figure out the issue the most basic implementation did not work for me. Vector constructor gives me System.IndexOutOfRangeException: 'Index was outside the bounds of the array.' a thread on stackoverflow says there is a lower limit on the array size but it should be implemented inside the class ```c# using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Numerics; class Program { static void Main(string[] args) { float[] f1 = new float[] { 1, 2 }; float[] f2 = new float[] { 1, 2 }; Vector<float> v1 = new Vector<float>(f1); Vector<float> v2 = new Vector<float>(f2); Vector<float> v3; v3 = Vector.Add<float>(v1, v2); for (int i = 0; i <= 1; i++) { Console.WriteLine(""Item "" + i.ToString() + "": "" + v3[i].ToString()); } Console.ReadKey(); } } ``` [EDIT] Format code snipper into readable form by @karelz",17
"DataSet ReadXmlSchema Error when uri filename contain special character When running .net core on mac was unable to pass string with special character to ReadXmlSchema, specifically a '#'. The error return path not found stopping the given path before the special character. Workaround using %23 works, but using '#' on windows system works fine. Attempted to use %23 on windows system and was unable to resolve path. Appears to be error coming from XmlTextReaderImpl or XmlResolver. Using uri and tostring method returns correct path, '#' is converted to %23.",6
"Use vectorized T=byte implementations to optimize all MemoryExtensions APIs for T != byte Related to https://github.com/dotnet/corefx/issues/27487 and partially addresses https://github.com/dotnet/corefx/issues/27379 Builds on top of https://github.com/dotnet/corefx/pull/27859 / https://github.com/dotnet/corefx/pull/28073 **TODO:** ~Add more unit tests and~ ~measure performance impact~ cc @AtsushiKan, @jkotas, @stephentoub, @KrzysztofCwalina",10
fix some conditional test logic related to SocketsHttpHandler There were a few test cases where we were using platform tests like IsWindows to disable or modify tests. Clean these up so they run properly on SocketsHttpHandler. @stephentoub @davidsh,0
FriendlyName not supported in Unix it might be worth to mention from the [Cross-Platoform Cryptography doc](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/cross-platform-cryptography.md) that FriendlyName(s) are not supported in Unix. provided you try to use Friendly Names in Unix-based systems it will result in this: System.PlatformNotSupportedException : The FriendlyName value cannot be set on Unix.,3
"Rollforward from .NET Core 2.0 to 2.1 throws with MissingMethodException when System.Memory package is referenced **Conditions** An application that is: - compiled against netcoreapp2.0 - has a package reference to System.Memory (v4.5.0-rc1-26423-06) - runs on a machine **without** Microsoft.NETCore.App 2.0.x installed, but has a Microsoft.NETCore.App 2.1.0 version... **Result** The application - rolls to execute on Microsoft.NETCore.App 2.1 ✅ , but - some System.IO apis throw MissingMethodException :x: ``` System.MissingMethodException: Method not found: '!!0 ByRef System.Runtime.InteropServices.MemoryMarshal.GetReference(System.Span`1<!!0>)'. at Interop.Sys.LStat(ReadOnlySpan`1 path, FileStatus& output) at System.IO.FileStatus.Refresh(ReadOnlySpan`1 path) at System.IO.FileStatus.EnsureStatInitialized(ReadOnlySpan`1 path, Boolean continueOnError) at System.IO.FileStatus.GetAttributes(ReadOnlySpan`1 path, ReadOnlySpan`1 fileName) at System.IO.FileSystemInfo.get_Attributes() at System.IO.FileInfo.get_Length() ``` **Repro** In a directory, create 3 files, `Dockerfile`, `program.cs`, and `test.csproj` and run `docker build .`: ```Dockerfile FROM microsoft/dotnet:2.0-sdk as builder WORKDIR /code COPY Program.cs . COPY test.csproj . RUN dotnet publish -o pub/ FROM microsoft/dotnet-nightly:2.1-runtime WORKDIR /app COPY --from=builder /code/pub . RUN dotnet test.dll ``` ```xml <!-- test.csproj--> <Project Sdk=""Microsoft.NET.Sdk""> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>netcoreapp2.0</TargetFramework> <LangVersion>7.1</LangVersion> <RestoreSources> https://dotnet.myget.org/F/dotnet-core/api/v3/index.json; https://api.nuget.org/v3/index.json; </RestoreSources> </PropertyGroup> <ItemGroup> <PackageReference Include=""System.Memory"" Version=""4.5.0-rc1-26423-06"" /> </ItemGroup> </Project> ``` ```csharp // Program.cs using System; using System.IO; class Program { public static int Main(string[] args) { try { var path = Path.Combine(AppContext.BaseDirectory, ""test.txt""); File.WriteAllText(path, ""hello""); var fileinfo = new FileInfo(path); Console.WriteLine(""System.IO.File.Exists = "" + File.Exists(path)); Console.WriteLine(""System.IO.FileInfo.Exists = "" + fileinfo.Exists); Console.WriteLine(""System.IO.FileInfo.FullName = "" + fileinfo.FullName); Console.WriteLine(""System.IO.FileInfo.Length = "" + fileinfo.Length); return 0; } catch (Exception ex) { Console.Error.WriteLine(ex.ToString()); return 1; } } } ``` **Details** Inside the container: ``` dotnet --info Host (useful for support): Version: 2.1.0-rc1-26419-02 Commit: 515f580aa0 .NET Core SDKs installed: No SDKs were found. .NET Core runtimes installed: Microsoft.NETCore.App 2.1.0-rc1-26419-02 [/usr/share/dotnet/shared/Microsoft.NETCore.App] ```",10
Fix MatchingRefApiCompat issues This fix is for https://github.com/dotnet/corefx/issues/27974 There are API miss match issues with contract. https://github.com/dotnet/corefx/blob/2169709020cb51c95aedf66f3db7c41d7d54a725/src/System.Data.SqlClient/src/MatchingRefApiCompatBaseline.txt#L1-L5 This fix resolve the issue.,15
"Remove unsafe from Uri.HexEscape in favor of string.Create Remove unsafe, avoid allocation and write directly into the string's memory. Benchmarking with 200k * 100 samples. Relates to https://github.com/dotnet/corefx/pull/22872 Benchmark-Code: https://gist.github.com/ViktorHofer/43a61de5cd7d3e45b29e36e7a40f21c2 ``` ini BenchmarkDotNet=v0.10.12.431-nightly, OS=Windows 10.0.17101 Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical cores and 2 physical cores Frequency=2742189 Hz, Resolution=364.6722 ns, Timer=TSC [Host] : .NET Core ? (Framework 4.6.26214.07), 64bit RyuJIT Job=.NET Core 2.1 uri Runtime=Core Toolchain=InProcessToolchain ``` Before: | Method | Mean | Error | StdDev | Gen 0 | Allocated | |---------- |---------:|---------:|---------:|------------:|----------:| | HexEscape | 345.2 ms | 3.552 ms | 3.322 ms | 384500.0000 | 769.04 MB | After: | Method | Mean | Error | StdDev | Gen 0 | Allocated | |---------- |---------:|---------:|---------:|------------:|----------:| | HexEscape | 328.6 ms | 5.602 ms | 4.966 ms | 384500.0000 | 769.04 MB | cc @CIPop, @davidsh @danmosemsft",0
"Test failure: System.IO.Tests.PathTests/GetTempFileName Opened on behalf of @Sunny-pu The test `System.IO.Tests.PathTests/GetTempFileName` has failed. System.IO.FileNotFoundException : Unable to find the specified file. Stack Trace: at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 23 at Interop.CheckIo(Int64 result, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 50 at System.IO.Path.GetTempFileName() in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/System/IO/Path.Unix.cs:line 99 at System.IO.Tests.PathTests.GetTempFileName() in /Users/buildagent/agent/_work/391/s/corefx/src/System.Runtime.Extensions/tests/System/IO/PathTests.cs:line 174 Build : Master - 20180308.02 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64 - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180308.02/workItem/System.Runtime.Extensions.Tests/analysis/xunit/System.IO.Tests.PathTests~2FGetTempFileName",5
"Fix SocketsHttpHandler TLS client cert handling SocketHttpHandler was not filtering down the client certificates when sending in ""Manual"" mode. This caused a client certificate to be sent to a server when it didn't have the proper EKU OID for ""Client Authentication"". Changed this so that both ""Manual"" and ""Automatic"" modes will use the CertificateHelper GetEligibleCertificate() API. Fixes #23128",0
"[Regression][Perf][Linux] TransactionScope and Connection pool problems on Linux I have a business application that uses TransactionScope. The application runs on Windows and we are migrating it to dotnet core in order to work Linux. I have 2 problems on **Linux** environment: 1- TransactionScope is not supported 2- The timeout period elapsed prior to obtaining a connection from the pool. This may have occurred because all pooled connections were in use and max pool size was reached. We tried to use dotnet core 2.0 and system.Data.SqlClient Version 4.5.0-preview1-26216-02. The Connection pool problem is solved but the TransactionScope problem is not solved. (MSDTC problems, this platform does not support Distributed Transaction) We tried to use dotnet core 2.1 and System.Data.SqlClient Version 4.5.0-preview2-26228-08. The TransactionScope is solved but the connection pool problem is not solved. Thank you for your support.",15
"Disable draining test on CurlHandler Fixes https://github.com/dotnet/corefx/issues/28793 cc: @geoffkizer, @wfurt, @pjanotti",0
Port System.Threading perf tests to release/2.0.0 So that we can get a baseline for comparison against 2.0. https://github.com/dotnet/corefx/pull/28712,8
"Allow HTTPListener to grab unprotected ports on Windows @doyouevensunbro commented on [Mon Apr 09 2018](https://github.com/dotnet/core/issues/1413) Currently, to get HTTPListener in .Net Core 2 I have to run the following block of code: ```C# if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) { using (Process process = new Process()) { var command = ""netsh.exe""; var args = string.Format(""http add urlacl url=\""{0}\"" user=Everyone"", _host); process.StartInfo = new ProcessStartInfo(command, args) { Verb = ""runas"", UseShellExecute = true, }; try { process.Start(); process.WaitForExit(); } catch (Exception e) { Log.Error(Tag, ""Couldn't set HTTPListener permissions: "", e); throw; } } } ``` I'm assuming that this is for security reasons (I'm more familiar with Linux over Windows, and HTTPListener works without issue on those platforms). So I tried listening to the port using TcpListener and had no issues. I'm a bit confused by this since I can write a HTTP server using a TcpListener, there are libraries out there that do it now. Any chance we can change .Net Core 2 to do the same, or this is a Windows issue that can't be bypassed? Thanks!",0
"SocketsHttpHandler may corrupt pooled connection if send content is canceled When a connection is about to be returned to the pool, we're nulling out the _currentRequest field, which then causes the send content to stop sending if it's still going. But if the connection remains open, the server may still expect a promised amount of content to be received, causing a hang.",0
"Disable SSL3 test case on RedHat 6 Because of [this issue](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html-single/6.9_release_notes/index#known_issues_security), one of our SSL tests consistently fails on RedHat 6.9. The test tries to detect what version of OpenSsl is loaded in order to decide which test cases are valid. The call we're actually using to do that is `SSLEay`. As documented in the RedHat 6.9 known issues, that value is not reported correctly: ``` Because certain applications perform incorrect version check of the OpenSSL version, the actual runtime version of OpenSSL is masked and the build-time version is reported instead. Consequently, it is impossible to detect the currently running OpenSSL version using the SSLeay() function. ``` The misreported version causes us to use a test case we would not otherwise, which then fails. This fix disables the test case on RedHat.",0
WIP: Enable TimesIncludeMillisecondPart on selected filesystems only Use filesystem name to suppress the test failure,5
"Environment.ExpandEnvironmentVariables on Linux has Windows behavior `Environment.ExpandEnvironmentVariables()` on Linux expands variables in `%VAR_NAME%` format rather than `$VAR_NAME`. SDK version: 2.1.4 OS: Ubuntu 16.04 A simple test: Environment.ExpandEnvironmentVariables(""$HOME/test""); Expected value: `/home/{user}/test` Actual value: `$HOME/test` However running: Environment.ExpandEnvironmentVariables(""%HOME%/test""); gives expanded result `/home/{user}/test`.",4
"StringComparers should return 0 rather than throwing for GetHashCode(null) `EqualityComparer<string>.Default.GetHashCode` returns `0` when provided with null. The various `StringComparer`s, however, throw `ArgumentNullException`. This is frustrating because it means you can't always swap in something like `StringComparer.OrdinalIgnoreCase` for the default comparer. Additionally, it feels inconsistent for `StringComparer`s to throw on null for `GetHashCode` because all other methods are null-safe: ``` StringComparer.Ordinal.Equals(default(string), default(string)) => true StringComparer.Ordinal.Compare(default(string), default(string)) => 0 ``` Therefore, I think we should consider changing the behavior of `GetHashCode` to be consistent with everything else.",4
"GZipStream cannot decompress multipart gzip files. See the following [stackoverflow thread](https://stackoverflow.com/questions/47743788/gzipstream-from-memorystream-only-returns-a-few-hundred-bytes ) for more information. GZipStream currently fails if you try to decompress a concatenated gzip file. The RFC does state that two gzip files can be cated together and it is also a valid gzip file. However, the current implementation can only read the first gzip stream and stops there. Here is a simple repro:: ```cs using System; using System.IO; using System.IO.Compression; class Program { static void Main() { using (var fs = new FileStream(Path.Combine(Environment.CurrentDirectory,""test.txt.gz""), FileMode.Create)) { using(var gz = new GZipStream(fs, CompressionLevel.NoCompression, true)) using(var sw = new StreamWriter(gz)) sw.WriteLine(""Stream 1""); using(var gz = new GZipStream(fs, CompressionLevel.NoCompression, true)) using(var sw = new StreamWriter(gz)) sw.WriteLine(""Stream 2""); fs.Seek(0, SeekOrigin.Begin); using (var gz = new GZipStream(fs, CompressionMode.Decompress)) using (var sr = new StreamReader(gz)) Console.WriteLine(sr.ReadToEnd()); } } } ``` The expected output should be ``` Stream 1 Stream 2 ``` But the actual output is just `Stream 1`. If you open up ""test.txt.gz"" in your favorite gzip util, like 7z, you will be able to extract the file and you will see the correct output.",5
"IBufferWriter should have a Length property This should be return the amount of buffered bytes. I was thinking that it would be simple to add this to PipeWriter but we actually should have this on `IBufferWriter<T>`. It's required for writing out length prefixed protocols: ```C# public void WriteMessage(Message message, IBufferWriter<byte> output) { // Always a 4 byte length prefix Span<byte> prefix = output.GetSpan(); output.Advance(4); long oldLength = output.Length; // Write message to a buffer so we can get its length WriteMessageCore(message, output); long written = output.Length - oldLength; // Fill in the length prefix afterwards BinaryPrimitives.WriteInt32BigEndian(prefix, (int)written); } ``` /cc @KrzysztofCwalina @pakrym",10
Update warning messages Fix #27488 @zhenlan @huanwu @mconnew,12
"Re-enable initlocals clearing in System.Net.Sockets on Unix We disabled it because some ReceiveMessageFrom tests were failing. The issue turned out to be that we weren't explicitly clearing an IPPacketInformation struct before handing it to native code, and the native code wasn't clearing it. This fixes that (https://github.com/dotnet/corefx/pull/27411/files#diff-74b2e83ee829756a9dc8177b5154b7f7R50). Along with it, I initialized a few other variables, just for good measure. Fixes https://github.com/dotnet/corefx/issues/27392 cc: @erozenfeld, @geoffkizer",0
"Console ReadKey echo escapes @devel0 commented on [Sat Mar 31 2018](https://github.com/dotnet/core/issues/1398) Using Console.ReadKey(true) should not echo control keys but in linux terminal I got `^[OC` echos. ## version - **dotnet version** : 2.1.101 - **os** : ubuntu 17.10 ## repro ``` Console.ReadKey(true); ``` - press ""right arrow"" key ### expected - no echoes ### current behavior - echoed `^[OC` to the console",21
"Consolidate the string and span tests for the string-like APIs See https://github.com/dotnet/corefx/pull/27319#discussion_r170049466 for additional details and context. This way, all the tests will be in one place making it easier to maintain, rather than duplicated between assemblies. Consider moving them to Common as well and reference from System.Memory.csproj so that running System.Memory tests will run all the span related tests. cc @tarekgh",10
"Use Win32Marshal from CoreLib shared code Fix hr issue caught by Common.Tests. Follow through for https://github.com/dotnet/corefx/pull/28158 cc: @pjanotti, @Anipik",5
Sgen parameter conversion change: replace colon with space in arguments #26902 @huanwu @zhenlan @mconnew See #27332 for more information.,12
"Add gdb and lldb to test machine dockerfiles and enable dump collection We want to run gdb and lldb on dumps created by tests. The experiments in https://github.com/dotnet/corefx/pull/27899#issuecomment-371901222 show that on some machiens (eg Fedora, OpenSuse) apparently dumps are not enabled. On others (eg some Ubuntu and Debian) dumps are enabled but gdb is not present. We also want lldb so we can do more operations on the dumps. So we need to add install of gdb and lldb to all dockerfiles, and enable dumps with ulimit on all of them.",1
"Add tilde path tests Related to https://github.com/dotnet/coreclr/pull/16901. Also clean up existing test data a bit. Needs https://github.com/dotnet/coreclr/pull/16901 to pass. Marking as no merge for now. cc: @danmosemsft, @pjanotti, @Anipik",5
"NamedPipeClientStream.Connect(int) does not respect timeout on UNIX domain sockets On Windows, if you connect to a `NamedPipeServerStream` that was created with `maxNumberOfServerInstances=1` from one process, and attempt to connect to it from another process with `NamedPipeClientStream.Connect(timeout: 0)`, it throws. On .NET Core 2.1 on Linux, the call to `Connect` hangs indefinitely instead. Internally, it's successfully called `connect()` and is waiting on `recvmsg()`. Repro project: [dotnet-pipe-server.zip](https://github.com/dotnet/corefx/files/1873538/dotnet-pipe-server.zip) On running `repro.sh`, you should get a stack dump from the second client process, since I didn't handle any exceptions from `Connect`. But instead it just waits. Doing the equivalent manually on Windows does throw, just like full framework .NET.",5
"API proposal: ReferenceCountedDisposable<T> ## Summary This proposal simplifies the use of disposable resources shared through code where single owner of the resource is either unclear, or complicates maintenance of the code. This situation is increasingly common when asynchronous code which needs to operate on a threading-agnostic API where the `Dispose` operation is explicitly called out as not safe for concurrent use. The semantics of a safe, shared wrapper for `IDisposable` objects is challenging, especially when considerations are made for handling missing and/or multiple calls to `Dispose` and for weakly-held references. Providing a holder for managing lifetimes of these objects allows developers to focus on the semantics of the underlying shared object, which is always a challenge in itself. ## Proposed API ```csharp namespace System.Memory { public sealed class ReferenceCountedDisposable<T> : IDisposable where T : class, IDisposable { public ReferenceCountedDisposable(T instance); public T Target { get; } public ReferenceCountedDisposable<T> TryAddReference(); public void Dispose(); public struct WeakReference { public WeakReference(ReferenceCountedDisposable<T> reference); public ReferenceCountedDisposable<T> TryAddReference(); } } } ``` ## Semantics A reference-counting wrapper which allows multiple uses of a single disposable object in code, which is deterministically released (by calling `IDisposable.Dispose`) when the last reference is disposed. Each instance of `ReferenceCountedDisposable<T>` represents a counted reference (also referred to as a *reference* in the following documentation) to a target object. Each of these references has a lifetime, starting when it is constructed and continuing through its release. During this time, the reference is considered *alive*. Each reference which is alive owns exactly one reference to the target object, ensuring that it will not be disposed while still in use. A reference is released through either of the following actions: * The reference is explicitly released by a call to `Dispose`. * The reference is no longer in use by managed code and gets reclaimed by the garbage collector. While each instance of `ReferenceCountedDisposable<T>` should be explicitly disposed when the object is no longer needed by the code owning the reference, this implementation will not leak resources in the event one or more callers fail to do so. When all references to an object are explicitly released (i.e. by calling `Dispose`), the target object will itself be deterministically released by a call to `IDisposable.Dispose` when the last reference to it is released. However, in the event one or more references is not explicitly released, the underlying object will still become eligible for non-deterministic release (i.e. finalization) as soon as each reference to it is released by one of the two actions described previously. When using `ReferenceCountedDisposable<T>`, certain steps must be taken to ensure the target object is not disposed early. 1. Use `ReferenceCountedDisposable<T>` consistently. In other words, do not mix code using reference-counted wrappers with code that references to the target directly. 1. Only use the `ReferenceCountedDisposable<T>(T reference)` constructor one time per target object. Additional references to the same target object must only be obtained by calling `TryAddReference`. 1. Do not call `IDisposable.Dispose` on the target object directly. It will be called automatically at the appropriate time, as described above. All public methods on this type adhere to their pre- and post-conditions and will not invalidate state even in concurrent execution. ### `ReferenceCountedDisposable<T>.TryAddReference` Increments the reference count for the disposable object, and returns a new disposable reference to it. The returned object is an independent reference to the same underlying object. Disposing of the returned value multiple times will only cause the reference count to be decreased once. Return value: a new `ReferenceCountedDisposable<T>` pointing to the same underlying object, if it has not yet been disposed; otherwise, `null` if this reference to the underlying object has already been disposed. ### `ReferenceCountedDisposable<T>.WeakReference` Represents a weak reference to a `ReferenceCountedDisposable<T>` which is capable of obtaining a new counted reference up until the point when the object is no longer accessible. ### Differences between `TryAddReference` operations The semantics of `ReferenceCountedDisposable<T>.TryAddReference` and `ReferenceCountedDisposable<T>.WeakReference.TryAddReference` are slightly different: * `ReferenceCountedDisposable<T>.TryAddReference`: This method returns `null` after *this reference* is disposed. In other words, it is possible for other references to the target object to still be held in code. * `ReferenceCountedDisposable<T>.WeakReference.TryAddReference`: This method returns `null` after *the last reference* to the target object is disposed.",10
Fix package testing infrastructure and fix issues. This gets the package validation testing running again and fixes all current issues. Best reviewed commit-by-commit.,1
"Dial back `\\?\ ` insertion Only premptively adding for FileSystemInfo if we end in period or space. Long path is taken care of later. Clean up code a little and add test for DirectoryInfo.Move. cc: @danmosemsft, @pjanotti, @Anipik",5
"SslStream.ShutdownAsync doesn't take a CancellationToken [`SslStream.ShutdownAsync`](https://github.com/dotnet/corefx/blob/master/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L434) returns a `Task` but does not take a `CancellationToken`. I found this to be odd as the other methods do take a `CancellationToken` and pass it to `Task.Factory.FromAsync`; I guess `ShutdownAsync` could behave the same way. If this was not intentional (and `ShutdownAsync` should indeed take a `CancellationToken`), I'd be happy to create a PR which implements that.",0
"Improve inling in ImmutableArray<T>.Builder The issue https://github.com/dotnet/corefx/issues/28064 is about a benchmark whose performance is so bad that a new dangerous method was considered to improve that situation. But almost the same effect can be achieved just by ensuring that the `Add()` method and the indexer setter on `ImmutableArray<T>.Builder` can be inlined (see https://github.com/dotnet/corefx/issues/28064#issuecomment-373950250 for more details). This PR does that. I have only verified that extracting the `throw` is useful for the indexer setter. But the indexer getter and `ItemRef` are very similar, so I assumed it makes sense for them too. Performance results using BenchmarkDotNet ([source](https://github.com/svick/Benchmark/blob/3504a3c/Program.cs)): Before: | Method | Mean | Error | StdDev | Median | |-------- |----------:|----------:|----------:|----------:| | Add | 11.053 us | 0.4281 us | 1.2623 us | 11.004 us | | Indexer | 6.246 us | 0.1827 us | 0.5242 us | 6.063 us | After: | Method | Mean | Error | StdDev | Median | |-------- |---------:|----------:|----------:|---------:| | Add | 5.538 us | 0.1310 us | 0.3863 us | 5.422 us | | Indexer | 3.159 us | 0.0631 us | 0.1138 us | 3.188 us | Relevant portions of JIT dumps: Before: ``` *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:Add(long):this weight= 10 : state 3 [ ldarg.0 ] weight= 10 : state 3 [ ldarg.0 ] weight= 79 : state 40 [ call ] weight= 28 : state 24 [ ldc.i4.1 ] weight=-12 : state 76 [ add ] weight= 79 : state 40 [ call ] weight= 31 : state 191 [ ldarg.0 -> ldfld ] weight= 10 : state 3 [ ldarg.0 ] weight= 31 : state 191 [ ldarg.0 -> ldfld ] weight= 20 : state 199 [ stloc.0 -> ldloc.0 ] weight= 28 : state 24 [ ldc.i4.1 ] weight=-12 : state 76 [ add ] weight= 31 : state 111 [ stfld ] weight= 12 : state 7 [ ldloc.0 ] weight= 16 : state 4 [ ldarg.1 ] weight= 65 : state 141 [ stelem ] weight= 19 : state 42 [ ret ] Inline candidate callsite is in a loop. Multiplier increased to 3. calleeNativeSizeEstimate=445 callsiteNativeSizeEstimate=115 benefit multiplier=3 threshold=345 Native estimate for function size exceeds threshold for inlining 44.5 > 34.5 (multiplier = 3) Inline expansion aborted, inline not profitable INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'Bench:Add():this' calling 'Builder[Int64][System.Int64]:Add(long):this' INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' … INLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:set_Item(int,long):this is 0x00007FF8B1B089D1. *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:set_Item(int,long):this weight= 16 : state 4 [ ldarg.1 ] weight= 10 : state 3 [ ldarg.0 ] weight= 79 : state 40 [ call ] weight= 28 : state 50 [ blt.s ] weight=227 : state 103 [ newobj ] weight=210 : state 108 [ throw ] weight= 31 : state 191 [ ldarg.0 -> ldfld ] weight= 16 : state 4 [ ldarg.1 ] weight= 35 : state 5 [ ldarg.2 ] weight= 65 : state 141 [ stelem ] weight= 19 : state 42 [ ret ] Inline candidate callsite is in a loop. Multiplier increased to 3. calleeNativeSizeEstimate=736 callsiteNativeSizeEstimate=145 benefit multiplier=3 threshold=435 Native estimate for function size exceeds threshold for inlining 73.6 > 43.5 (multiplier = 3) Inline expansion aborted, inline not profitable INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'Bench:Indexer():this' calling 'Builder[Int64][System.Int64]:set_Item(int,long):this' INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' ``` After: ``` INLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:Add(long):this is 0x00007FF8B8698A39. *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:Add(long):this weight= 31 : state 191 [ ldarg.0 -> ldfld ] weight= 28 : state 24 [ ldc.i4.1 ] weight=-12 : state 76 [ add ] weight= 6 : state 11 [ stloc.0 ] weight= 10 : state 3 [ ldarg.0 ] weight= 12 : state 7 [ ldloc.0 ] weight= 79 : state 40 [ call ] weight= 31 : state 191 [ ldarg.0 -> ldfld ] weight= 31 : state 191 [ ldarg.0 -> ldfld ] weight= 16 : state 4 [ ldarg.1 ] weight= 65 : state 141 [ stelem ] weight= 10 : state 3 [ ldarg.0 ] weight= 12 : state 7 [ ldloc.0 ] weight= 31 : state 111 [ stfld ] weight= 19 : state 42 [ ret ] Inline candidate is mostly loads and stores. Multiplier increased to 3. Inline candidate callsite is in a loop. Multiplier increased to 6. calleeNativeSizeEstimate=369 callsiteNativeSizeEstimate=115 benefit multiplier=6 threshold=690 Native estimate for function size is within threshold for inlining 36.9 <= 69 (multiplier = 6) … Successfully inlined Builder[Int64][System.Int64]:Add(long):this (42 IL bytes) (depth 1) [profitable inline] -------------------------------------------------------------------------------------------- INLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'Bench:Add():this' calling 'Builder[Int64][System.Int64]:Add(long):this' INLINER: during 'fgInline' result 'success' reason 'profitable inline' … INLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:set_Item(int,long):this is 0x00007FF8B8698A39. *************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:set_Item(int,long):this weight= 16 : state 4 [ ldarg.1 ] weight= 10 : state 3 [ ldarg.0 ] weight= 79 : state 40 [ call ] weight= 28 : state 50 [ blt.s ] weight= 79 : state 40 [ call ] weight= 31 : state 191 [ ldarg.0 -> ldfld ] weight= 16 : state 4 [ ldarg.1 ] weight= 35 : state 5 [ ldarg.2 ] weight= 65 : state 141 [ stelem ] weight= 19 : state 42 [ ret ] Inline candidate callsite is in a loop. Multiplier increased to 3. calleeNativeSizeEstimate=378 callsiteNativeSizeEstimate=145 benefit multiplier=3 threshold=435 Native estimate for function size is within threshold for inlining 37.8 <= 43.5 (multiplier = 3) … Successfully inlined Builder[Int64][System.Int64]:set_Item(int,long):this (28 IL bytes) (depth 1) [profitable inline] -------------------------------------------------------------------------------------------- INLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'Bench:Indexer():this' calling 'Builder[Int64][System.Int64]:set_Item(int,long):this' INLINER: during 'fgInline' result 'success' reason 'profitable inline' ```",7
"Adding missing typeforward for Lazy<T,TMetadata> to S.CM.Composition Adding missing typeforward for Lazy<T,TMetadata> to System.ComponentModel.Composition Fixes #27299",2
"Insertion of master to CLI is failing https://github.com/dotnet/cli/pull/8901 stack trace: ``` D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: The ""DotNetRestore"" task failed unexpectedly. [D:\j\workspace\debug_windows---8a02d2bd\build.proj] 23:12:07 D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: System.IndexOutOfRangeException: Index was outside the bounds of the array. [D:\j\workspace\debug_windows---8a02d2bd\build.proj] 23:12:07 D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(TKey[] array, Int32 index) [D:\j\workspace\debug_windows---8a02d2bd\build.proj] 23:12:07 D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Diagnostics.Process.GetEnvironmentVariablesBlock(IDictionary`2 sd) [D:\j\workspace\debug_windows---8a02d2bd\build.proj] 23:12:07 D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) [D:\j\workspace\debug_windows---8a02d2bd\build.proj] 23:12:07 D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at System.Diagnostics.Process.Start() [D:\j\workspace\debug_windows---8a02d2bd\build.proj] 23:12:07 D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at Microsoft.Build.Utilities.ToolTask.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [D:\j\workspace\debug_windows---8a02d2bd\build.proj] 23:12:07 D:\j\workspace\debug_windows---8a02d2bd\build\BundledDotnetTools.proj(24,5): error MSB4018: at Microsoft.Build.Utilities.ToolTask.Execute() [D:\j\workspace\debug_windows---8a02d2bd\build.proj] ```",14
Don't look at base classes for interfaces in Microsoft.CSharp Since the interface list obtained through reflection already includes those inherited from base classes the first pass contains all the interfaces and the later passes are redundant. Since only `AggregateType` would have any results in the removed `AllPossibleInterfaces` just include testing for that as part of seeing if there is a matching interface.,16
"NRE from ClientWebSocket.ConnectAsync when using ClientCertificates option Version: 2.1.300-preview2-008302 (also checked using latest master branch) Sample code: ``` var cws = new ClientWebSocket(); cws.Options.ClientCertificates.Add(new X509Certificate2(@""path-to-certificate.pfx"")); await cws.ConnectAsync(new Uri(""wss://....""), CancellationToken.None); ``` throws: ``` System.NullReferenceException: Object reference not set to an instance of an object. at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken) ``` According to my investigation NRE is thrown in the following line: https://github.com/dotnet/corefx/blob/9ce903333efeb3eb5fef069f9caf868cb2309170/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs#L97 `handler.SslOptions.ClientCertificates` is `null` Initializing the certificates collection there: `handler.SslOptions.ClientCertificates = new X509Certificate2Collection();` seems to fix the problem (`await cws.ConnectAsync()` succeeds)",0
"[Question] Per thread finalizer Regarding https://github.com/dotnet/corefx/issues/26992, I have a question. @davidfowl > No, ReleaseHandle happens when the safe handle is disposed explicitly or finalized. If we cannot dispose the safe handle explicitly, only finalizer can release it. In this situation, is there a way that the safe handle is disposed by finalizer in the same thread as initialization?",8
"Failure in Debian on System.Diagnostics.Tests.ProcessThreadTests/TestStartTimeProperty Debian.87.Amd64.Open-x64-Release - probably just outside the 1 sec window this test allows ```c# // Now add a thread, and from that thread, while it's still alive, verify // that there's at least one thread greater than the current time we previously grabbed. await Task.Factory.StartNew(() => { p.Refresh(); try { Assert.Contains(p.Threads.Cast<ProcessThread>(), t => t.StartTime.ToUniversalTime() >= curTime - allowedWindow); } catch (InvalidOperationException) { // A thread may have gone away between our getting its info and attempting to access its StartTime } ``` ``` Assert.Contains() Failure Not found: (filter expression) In value: <CastIterator>d__34<ProcessThread> [System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, ...] Stack Trace : at System.Diagnostics.Tests.ProcessThreadTests.<>c__DisplayClass3_2.<TestStartTimeProperty>b__0() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Process/tests/ProcessThreadTests.cs:line 129 at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 167 --- End of stack trace from previous location where exception was thrown --- at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440 --- End of stack trace from previous location where exception was thrown --- at System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Process/tests/ProcessThreadTests.cs:line 127 --- End of stack trace from previous location where exception was thrown --- ```",11
"Directory.EnumerateDirectories doesn't return directory list on rhel7.2 _From @jainaashish on April 7, 2018 0:18_ I've created a simple application to demonstrate the issue where `Directory.EnumerateDirectories` api doesn't return the list of child directories on rhel 7.2, although it works fine on Windows or Ubuntu. Sample Project - https://github.com/jainaashish/CoreClrIssue/tree/master/EnumerateDirectoriesIssue/EnumerateDirectoriesIssue _Copied from original issue: dotnet/coreclr#17465_",5
"EmailAddressAttribute.IsValid Method (Object) cannot validate hyphen at the beginning of domain name _From @ahmetbombaci-united on February 21, 2018 22:25_ Domain names cannot start with hyphen (ref: https://tools.ietf.org/html/rfc952) However; IsValid method does not respect to this rule Test case: var checkMail = new System.ComponentModel.DataAnnotations.EmailAddressAttribute().IsValid(""ahmet.bombaci@yahoo.-united.COM""); _Copied from original issue: aspnet/Home#2893_",2
"200 to uwp6.1 @HollyAM @karelz @nattress @weshaggard PTAL This ports servicing changes from release/2.0.0 to UWP 6.1. I made some judgement calls on what should and shouldn't be ported, so there may be some needed changes to this PR. PTAL if anything stands out.",1
Disable regex cache tests using reflection for uapaot Fixes https://github.com/dotnet/corefx/issues/29019 & remove dead code I overlooked last time.,18
"ArgumentNullException with StringComparer.CurrentCultureIgnoreCase when GlobalizationMode.Invariant=true When GlobalizationMode.Invariant=true is in effect (such as on Alpine in the `microsoft/dotnet:2.1-runtime-deps-alpine` image), attempts to use `StringComparer.CurrentCultureIgnoreCase` cause crashes. This appears to have changed between runtime 2.0 and current builds of 2.1. Simple repro: ```c# using System; using System.Collections; namespace hashtable { class Program { static void Main(string[] args) { Hashtable h = new Hashtable(StringComparer.CurrentCultureIgnoreCase); h[""Foo""] = ""bar""; Console.WriteLine(h.ContainsKey(""foo"")); Console.WriteLine(""Hello World!""); } } } ``` Working: ```sh-session raines@raines-z220u:~/src/hashtable$ dotnet --info .NET Command Line Tools (2.1.101) Product Information: Version: 2.1.101 Commit SHA-1 hash: 6c22303bf0 Runtime Environment: OS Name: ubuntu OS Version: 17.10 OS Platform: Linux RID: linux-x64 Base Path: /usr/share/dotnet/sdk/2.1.101/ Microsoft .NET Core Shared Framework Host Version : 2.0.6 Build : 74b1c703813c8910df5b96f304b0f2b78cdf194d raines@raines-z220u:~/src/hashtable$ DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true dotnet exec /home/raines/src/hashtable/bin/Debug/netcoreapp2.0/hashtable.dll True Hello World! ``` Failing: ```sh-session $ dotnet --info .NET Comma$ DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true dotnet exec bin/Debug/netcoreapp2.0/hashtable.dll Unhandled Exception: System.ArgumentNullException: SafeHandle cannot be null. Parameter name: pHandle at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success) at Interop.Globalization.GetSortKey(SafeSortHandle sortHandle, String str, Int32 strLength, Byte* sortKey, Int32 sortKeyLength, CompareOptions options) at System.Globalization.CompareInfo.GetHashCodeOfStringCore(String source, CompareOptions options) at System.Collections.Hashtable.GetHash(Object key) at System.Collections.Hashtable.InitHash(Object key, Int32 hashsize, UInt32& seed, UInt32& incr) at System.Collections.Hashtable.ContainsKey(Object key) at hashtable.Program.Main(String[] args) in /home/raines/src/hashtable/Program.cs:line 12 Aborted (core dumped)nd Line Tools (2.1.300-preview2-008251) Product Information: Version: 2.1.300-preview2-008251 Commit SHA-1 hash: 94fd3fd392 Runtime Environment: OS Name: alpine OS Version: 3.6 OS Platform: Linux RID: alpine.3.6-x64 Base Path: /usr/share/dotnet/sdk/2.1.300-preview2-008251/ Microsoft .NET Core Shared Framework Host Version : 2.1.0-preview2-26131-06 Build : b13a0d5c331f374afd35ded57b9a4b4ab128864c $DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true dotnet exec bin/Debug/netcoreapp2.0/hashta ble.dll Unhandled Exception: System.ArgumentNullException: SafeHandle cannot be null. Parameter name: pHandle at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success) at Interop.Globalization.GetSortKey(SafeSortHandle sortHandle, String str, Int32 strLength, Byte* sortKey, Int32 sortKeyLength, CompareOptions options) at System.Globalization.CompareInfo.GetHashCodeOfStringCore(String source, CompareOptions options) at System.Collections.Hashtable.GetHash(Object key) at System.Collections.Hashtable.InitHash(Object key, Int32 hashsize, UInt32& seed, UInt32& incr) at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add) at System.Collections.Hashtable.set_Item(Object key, Object value) at hashtable.Program.Main(String[] args) in /home/raines/src/hashtable/Program.cs:line 12 Aborted (core dumped) ```",19
"SqlClient CryptographicException is back on High Sierra 10.13.4 My issue today seems the same as this: https://github.com/dotnet/corefx/issues/22453 Yesterday (on High Sierra 10.13.3) my .net core 2.0 web project ran fine, connecting to SQL Server. Last night my machine was updated to 10.13.4, and now this morning when I run the project I get this error: ``` An unhandled exception was thrown by the application. System.TypeInitializationException: The type initializer for 'XXX' threw an exception. ---> System.Data.SqlClient.SqlException: A connection was successfully established with the server, but then an error occurred during the pre-login handshake. (provider: SSL Provider, error: 31 - Encryption(ssl/tls) handshake failed) ---> System.Security.Cryptography.CryptographicException: Error occurred during a cryptographic operation. ``` Anyone else on 10.13.4 able to successfully connect to SQL Server this morning?",3
Add comments clarifying the logc in ReadOnlySequence GetFirstBuffer See https://github.com/dotnet/corefx/pull/29051#discussion_r181122012 for context,10
"Add more IO tests around problematic filename characters While we have some tests, it would be good to add more with problematic filenames and filename characters. Here is a good article describing difficult names for reference: https://www.dwheeler.com/essays/fixing-unix-linux-filenames.html Creating, copying, moving, enumerating, deleting, etc. Trailing spaces and periods on Windows are legal, but difficult to create and access. Calling Win32 APIs with paths normally will strip these. The exception is when prepended with `\\?\`. We purposefully do not handle creating these unless you use `\\?\` as creating these sort of paths frequently breaks apps. We should (and do) handle finding them via `GetFiles`, etc. and handle manipulating them with the *Info classes. We currently don't allow opening them directly from a path string unless you use `\\?\`.",5
"SqlClient: Avoid boxing values as much as possible We believe that for hot paths while consuming data readers this could have a significant enough impact. For parameters, there is already https://github.com/dotnet/corefx/issues/8955 about adding a generic API in ADO.NET base provider model that then can be implemented by SqlClient. cc @saurabh500 @geleems @roji @ajcvickers",15
"Proposal: new System.ComponentModel.VersionConverter class ## Rationale and Usage Converting between `System.Version` and `string` is currently not supported using a `System.ComponentModel.TypeConverter`. Many system types are supported out of the box (System.DateTimeOffset, System.Guid, System.TimeSpan, System.Uri etc.) so I think System.Version would be a welcome addition. I was expecting this to work, but converting from string actually throws `NotSupportedException`: TypeConverter cannot convert from System.String. ```csharp using System.ComponentModel; using System.Diagnostics; TypeConverter versionConverter = TypeDescriptor.GetConverter(typeof(Version)); Version version = versionConverter.ConvertFromString(""1.2.3.4"") as Version; Trace.Assert(version.Major == 1); Trace.Assert(version.Minor == 2); Trace.Assert(version.Build == 3); Trace.Assert(version.Revision == 4); ``` ## Proposed API ```csharp public partial class VersionConverter : System.ComponentModel.TypeConverter { public VersionConverter(); public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType); public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType); public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value); public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType); public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value); } ``` ## Details Converting between `string` and `System.Version` is very straightforward, implementation would be very similar to `GuidConverter` or `UriTypeConverter`. ## Open Questions * What exception should be thrown when the string to convert is not valid, for example `""1""`? Other converters just let the constructor of the type throw the exception. ```csharp var uriConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Uri)); uriConverter.ConvertFromString(""mailto:User@""); // throws UriFormatException ``` ```csharp var guidConverter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(Guid)); guidConverter.ConvertFromString(""xxxx""); // throws FormatException ``` For `System.Version`, that would mean throwing an `ArgumentException` which is less descriptive than a `FormatException`. * Should the converter be registered with other `IntrinsicTypeConverters` (is System.Version an intrinsic type?) or should the converter be registered with the `TypeConverterAttribute` on the `System.Version` class? ## Pull Request A pull request with the proposed changes is available: #28516",2
"Constructor System.Uri(Uri baseUri, string relativeUri) fails if relativeUri is long and contains a colon I observed strange behavior when working with OData queries. When I tried to debug this problem I found that the root cause it most likely in `System.Uri.CreateThis` which validates scheme before actually checking if the scheme is necessary. ```c# static void Main(string[] args) { var baseUri = new Uri(""https://stansw.analytics.visualstudio.com/_odata/v2.0-preview/""); var relativeUri = ""WorkItems?$filter= "" // 128 + "" "" // 256 + "" "" // 384 + "" "" // 512 + "" "" // 640 + "" "" // 768 + "" "" // 896 + ""Processes/any(b:b/BacklogName eq 'Features')""; var uri = new Uri(baseUri, relativeUri); Console.WriteLine(uri.ToString()); relativeUri = ""WorkItems?$filter= "" // 128 + "" "" // 256 + "" "" // 384 + "" "" // 512 + "" "" // 640 + "" "" // 768 + "" "" // 896 + "" "" // 1024 + ""Processes/any(b:b/BacklogName eq 'Features')""; uri = new Uri(baseUri, relativeUri); Console.WriteLine(uri.ToString()); } ``` Output: ``` https://stansw.analytics.visualstudio.com/_odata/v2.0-preview/WorkItems?$filter= Processes/any(b:b/BacklogName eq 'Features') Unhandled Exception: System.UriFormatException: Invalid URI: The Uri scheme is too long. at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind) at System.Uri.CreateUri(Uri baseUri, String relativeUri, Boolean dontEscape) at System.Uri..ctor(Uri baseUri, String relativeUri) at ConsoleApp4.Program.Main(String[] args) in C:\Users\stansw\Documents\Visual Studio 2017\Projects\ConsoleApp4\ConsoleApp4\Program.cs:line 35 Press any key to continue . . . ``` [EDIT] Add syntax highlighting by @karelz",0
Add server-side SNI support Related issue: https://github.com/dotnet/corefx/issues/24553 This is for overview only so that it is easier to discuss the API shape. Changes to original proposal: - delegate is defined in the namespace and not in the SslStream (to match others) - name has changed to ServerCertificateSelectionCallback - removed X509CertificateCollection from return values as currently do not see what it would be used for (if other implementations require it will change it) Left: - https://github.com/dotnet/corefx/issues/28585 client on windows does not seem to be IDN mapping before sending. current version supports both but need to revalidate with the spec - document what is known during the callback cc @Drawaes,0
"System.Net.Sockets tests cause exception on threadpool thread The assert on src/.System.Net.Sockets/tests/FunctionalTests/Shutdown.cs:line 22 will cause an exception to be thrown on a threadpool thread. When it fires it will take down the whole test library. Consider either marshaling somehow back to the test, or using RemoteInvoke for all tests that lead to this codepath. ```c# private static void OnOperationCompleted(object sender, SocketAsyncEventArgs args) { Assert.Equal(SocketError.Success, args.SocketError); ``` ``` 2018-03-19 13:18:57,213: INFO: proc(54): run_and_log_output: Output: Unhandled Exception: Xunit.Sdk.EqualException: Assert.Equal() Failure 2018-03-19 13:18:57,213: INFO: proc(54): run_and_log_output: Output: Expected: Success 2018-03-19 13:18:57,213: INFO: proc(54): run_and_log_output: Output: Actual: OperationAborted 2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output: at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) 2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output: at System.Net.Sockets.Tests.Shutdown.OnOperationCompleted(Object sender, SocketAsyncEventArgs args) in /root/corefx-1491859/src/System.Net.Sockets/tests/FunctionalTests/Shutdown.cs:line 22 2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output: at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166 2018-03-19 13:18:57,214: INFO: proc(54): run_and_log_output: Output: --- End of stack trace from previous location where exception was thrown --- 2018-03-19 13:18:57,215: INFO: proc(54): run_and_log_output: Output: at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166 2018-03-19 13:18:57,215: INFO: proc(54): run_and_log_output: Output: --- End of stack trace from previous location where exception was thrown --- 2018-03-19 13:18:57,215: INFO: proc(54): run_and_log_output: Output: at System.Threading.ThreadPoolWorkQueue.Dispatch() in /root/coreclr/src/mscorlib/src/System/Threading/ThreadPool.cs:line 588 ``` Example - this took out all S.Net.Sockets tests on Alpine. https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180319.04/workItem/System.Net.Sockets.Tests/wilogs",0
Updating CoreClr dependencies to stable ,1
"ParallelEnumerable.GroupJoin/Join output ordering (fixes #1155) The current implementations of ParallelEnumerable.GroupJoin and Join do not preserve the order of right(inner) elements. The common implementation, `HashJoinQueryOperatorEnumerator` currently implements a `QueryOperatorEnumerator` with an order key of the same type as the left(outer) query, thus Join operations are unable to take into account the order of the right elements in their output. It also completely ignores the right order key when building a `HashLookup` of the right elements, so order is not preserved for GroupJoins. The proposed changes attempt to leave the cases where the right query is unordered with a relatively similar performance profile while adding ordering (when appropriate) in the cases where the right query is ordered (fixes #1155). Join with an unordered left and ordered right results in unordered output and right ordering is completely ignored. Join with an ordered left and ordered right results in ordered output ordered first by left order key then by right order key. If collisions exist in the ordering of left elements, then the output will likely not be intuitive, as results with the same left element are not guaranteed (and in fact will probably not be) grouped together. (tests **not** added to confirm the ordering of elements with left collisions...) GroupJoin with an unordered left and ordered right also still produce unordered output. However, the enumerables of right elements are ordered. GroupJoin with an ordered left and ordered right will produce results ordered first by the left element order key, then by the least right element order key. An empty grouping of right elements is treated as less than any non-empty grouping. (tests added to confirm the ordering of elements with left collisions)",20
Add more test coverage for System.Reflection.Pointer * Test that null object reference is properly converted to a null pointer value (this requires special handling) * Test `Delegate.DynamicInvoke`. This one also uses `System.Reflection.Pointer` and on .NET Native is handled by separate code paths. Currently adding as disabled on UapAot because I'm working on that support right now. We'll unblock it with the rest later. Cc @sergiy-k,9
"Update RIDs used in test execution This issue is to track updating the RIDs being used in CoreFX Jenkins testing. Related: https://github.com/dotnet/corefx/issues/25252, https://github.com/dotnet/wcf/issues/2553, https://github.com/dotnet/core-eng/issues/2450 Current CoreFX Master Jenkins Linux RIDS: - RHEL7.2 - CentOS7.1 - Fedora24 - Debian8.4 - Ubuntu 14.04, 16.04, 16.10 Target RIDS: - RHEL7.4 - CentOS7.4 - Fedora27 - Debian9.0 - Ubuntu 14.04, 16.04, 18.04 Update 2/6/2018: Remaining work: - /+ RHEL7.4 - /+ CentOS7.4",1
"[System.Runtime.InteropServices] Introduce broader platform definitions. Unity, Xamarin and Mono users suffers from a historic problem with platform detection. This patch introduces definitions for all the existing platforms that .NET supports beyond .NET Core via Unity and Xamarin. To cope with the historical setting that OSX has been used in existing code to probe for an Apple OS (iOS, tvOS, watchOS), we introduce new values for all four apple platforms (macOS, iOS, tvOS, watchOS) and also return true when probed for the legacy OSX setting. The same principle is applied to Linux, we will continue to return true, but the more specific versions of Tizen and Android are supported. The list has been expanded to all the platforms currently supported by Mono and Unity. # Proposed Changes The System.Runtime.InteropServices.OSPlatform is updated to surface the following public definitions: ```csharp public static OSPlatform Android { get; } = new OSPlatform(""ANDROID""); public static OSPlatform iOS { get; } = new OSPlatform(""IOS""); // Returns true for Linux, Tizen and Android systems public static OSPlatform Linux { get; } = new OSPlatform(""LINUX""); public static OSPlatform macOS { get; } = new OSPlatform(""MACOS""); public static OSPlatform N3DS { get; } = new OSPlatform(""3DS""); // This one has historically been used as ""Apple platforms"", so it returns true // on iOS, tvOS, macOS, watchOS. public static OSPlatform OSX { get; } = new OSPlatform(""OSX""); public static OSPlatform PlayStation4 { get; } = new OSPlatform(""PS4""); public static OSPlatform PlayStationPortable2 { get; } = new OSPlatform(""PSP2""); public static OSPlatform PlayStationVita { get; } = new OSPlatform(""PSVITA""); public static OSPlatform Switch { get; } = new OSPlatform(""SWITCH""); public static OSPlatform Tizen { get; } = new OSPlatform(""TIZEN""); public static OSPlatform tvOS { get; } = new OSPlatform(""TVOS""); public static OSPlatform watchOS { get; } = new OSPlatform(""WATCHOS""); public static OSPlatform WebAssembly { get; } = new OSPlatform(""WEBASSEMBLY""); public static OSPlatform WiiU { get; } = new OSPlatform(""WIIU""); public static OSPlatform Windows { get; } = new OSPlatform(""WINDOWS""); public static OSPlatform XboxOne { get; } = new OSPlatform(""XBOXONE""); ``` Additionally, `RuntimeInformation`'s `IsOSPlatform` method is modified to cope with the aliasing described before, and Android and Tizen systems are Linux systems, and macOS, tvOS, iOS and watchOS are reported as OSX systems. Twist: we could make OSX deprecated as well, and introduce an additional AppleOS definition or a Darwin definition to cover Apple-based OSes. # PR A pull request with the first batch is available here: https://github.com/dotnet/corefx/pull/27378",4
"System.Net.Sockets.Socket: No buffer space available when setting SendBufferSize I am trying to create a socket with an 8MB buffer (8388608 bytes) with the following code. ``` var socket = new Socket(SocketType.Stream, ProtocolType.Tcp); socket.SendBufferSize = Setting.NetworkBufferSize; socket.ReceiveBufferSize = Setting.NetworkBufferSize; socket.NoDelay = true; ``` The code fails on the second line with ""No buffer space available"". ``` System.Net.Sockets.SocketException: ""No buffer space available"" at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName) at System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Int32 optionValue, Boolean silent) at System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Int32 optionValue) at System.Net.Sockets.Socket.set_SendBufferSize(Int32 value) ``` This code works fine when executing in a Windows environment. Is this behavior expected?",0
"Tests for StringComparer Create(culture, CompareOptions) overload Related to dotnet/corefx#395 Implementation PR- https://github.com/dotnet/coreclr/pull/16334",4
Test failure: System.Net.Sockets.Tests.ExecutionContextFlowTest / ExecutionContext_FlowsOnlyOnceAcrossAsyncOperations Seen in https://github.com/dotnet/corefx/pull/28225#issuecomment-376299061 Fedora.26.Amd64.Open-x64-Debug ``` System.Net.Sockets.Tests System.Net.Sockets.Tests.ExecutionContextFlowTest/ ExecutionContext_FlowsOnlyOnceAcrossAsyncOperations ``` ``` Assert.InRange() Failure Range: (1 - 60) Actual: 117 ``` ``` at System.Net.Sockets.Tests.ExecutionContextFlowTest.<>c.<<ExecutionContext_FlowsOnlyOnceAcrossAsyncOperations>b__11_0>d.MoveNext() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Sockets/tests/FunctionalTests/ExecutionContextFlowTest.netcoreapp.cs:line 47 --- End of stack trace from previous location where exception was thrown --- --- End of stack trace from previous location where exception was thrown --- ``` /cc @stephentoub ## History of failures Day | Build | OS | Details -- | -- | -- | -- 3/14 | 20180314.05 | Centos.74 | Actual: 99 3/26 | ? | Fedora.26 | https://github.com/dotnet/corefx/pull/28225#issuecomment-376299061 - Actual: 117,0
"Check if app is run by sudo/admin on Linux @maroallegro commented on [Mon Jan 29 2018](https://github.com/dotnet/core/issues/1244) I am trying to check if .NetCore code is running as sudo/admin on Linux. It works on Windows but throws exception on Linux. How do I check if app is run by admin/sudo on Ubuntu Linux by using .NET Core2.0 build-in class? Here is the code I have tried (however i thought that it will not manage admin rights on Linux): ``` using System; using System.Security.Principal; namespace smallTestsCore { class Program { static void Main(string[] args) { Console.WriteLine(Program.IsAdministrator); Console.ReadLine(); } public static bool IsAdministrator => new WindowsPrincipal(WindowsIdentity.GetCurrent()) .IsInRole(WindowsBuiltInRole.Administrator); } } ``` The code works on Windows, but does not work on Linux: ``` Exception has occurred: CLR/System.PlatformNotSupportedException An unhandled exception of type 'System.PlatformNotSupportedException' occurred in System.Security.Principal.Windows.dll: 'Windows Principal functionality is not supported on this platform.' at System.Security.Principal.WindowsIdentity.GetCurrent() at adminTst.Program.get_IsAdministrator() in /home/user/adminTst/Program.cs:line 15 at adminTst.Program.Main(String[] args) in /home/user/adminTst/Program.cs:line 11 ```",4
"SocketsHttpHandler: add response stream drain When an HttpResponseMessage is disposed before the entire response stream is read, we are currently just killing the connection. Instead, try to drain the connection (up to a limit) so that it can be reused. @stephentoub @davidsh @dotnet/ncl",0
"Rename string-like Span.Equals method to SequenceEqual We have the following string-like extension method for `ReadOnlySpan<char>`: ```C# public static bool Equals(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) ``` However, due to its name, we are unable to leverage the implicit cast from string to `ReadOnlySpan<char>`. The following code throws a compiler error since it fails to match the correct overload. ```C# string test = ""Hello World!""; ReadOnlySpan<char> span = new char[100]; bool result = span.Equals(test, StringComparison.Ordinal); // Current workarounds - specify the type explicitly or call AsSpan: // bool result = span.Equals((ReadOnlySpan<char>)test, StringComparison.Ordinal); // bool result = span.Equals(test.AsSpan(), StringComparison.Ordinal); // bool result = MemoryExtensions.Equals(span, test, StringComparison.Ordinal); ``` Error CS0176 Member 'object.Equals(object, object)' cannot be accessed with an instance reference; qualify it with a type name instead Should we rename the method to SequenceEqual instead? We already have a SequenceEqual method (which only takes a single argument), which means, we would end up with a non-generic overload, specific to `ReadOnlySpan<char>`. ```C# public static bool SequenceEqual<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) where T : System.IEquatable<T> {} public static bool SequenceEqual<T>(this Span<T> span, ReadOnlySpan<T> other) where T : System.IEquatable<T> {} // ADD: public static bool SequenceEqual(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) {} ``` The alternative of adding an Equals overload that takes `string` as the argument will not work in resolving the overload matching issue. Other alternatives for names: - EqualsTo cc @KrzysztofCwalina, @terrajobst, @VSadov",10
Expanded the CommonReadOnlySequenceTests I expanded the ReadOnlySequence Common Tests and some of them fails. I think this is code issues.,10
Port LTTng fix for rootfs from CoreCLR Port https://github.com/dotnet/coreclr/pull/17762 to CoreFx.,1
"Give WebSocket server time to close connection Per RFC 6455, a websocket client should try to let the server close the connection. I also removed some unnecessary passing of cancellation tokens. cc: @geoffkizer, @mconnew, just FYI @anurse",0
System.Diagnostics.PerformanceCounter tests fail on Windows 10 https://mc.dot.net/#/user/Anipik/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/c9dded080a169148f306c0310c1a7e14d520f63b/workItem/System.Diagnostics.PerformanceCounter.Tests The assertion fail is same for all the tests ``` Assert.NotEqual() Failure Expected: Not 0 Actual: 0 ``` The tests affected are InstanceDataCollectionCollection_Contains_Valid InstanceDataCollectionCollection_Contains_inValid InstanceDataCollectionCollection_CopyTo InstanceDataCollectionCollection_GetItem_Invalid InstanceDataCollectionCollection_GetKeys InstanceDataCollectionCollection_GetValues InstanceDataCollection_GetItem_ExistingCounter InstanceDataCollection_GetKeys InstanceDataCollection_GetValues InstanceDataCollection_NullTest cc @danmosemsft,11
"Linux/OSX - setting ExclusiveAddressUse or DontLinger not supported Operation not supported exception when [using SetSocketOption](https://github.com/graffen/NLog.Targets.Syslog/blob/v5.0.0-beta-02/src/NLog.Targets.Syslog/MessageSend/Tcp.cs#L82-L86) to set ExclusiveAddressUse or DontLinger: ```csharp tcp.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ExclusiveAddressUse, true); tcp.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.DontLinger, false); tcp.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Linger, new LingerOption(true, 0)); tcp.Client.IOControl(IOControlCode.KeepAliveValues, keepAlive.ToByteArray(), null); ``` Please look at https://github.com/graffen/NLog.Targets.Syslog/issues/119 for more info",0
StringComparer.InvariantCultureIgnoreCase and StringComparer.CurrentCultureIgnoreCase serialization tests failing on netfx ci Related to https://github.com/dotnet/corefx/issues/28816,1
"SocketsHttpHandler: Proxied IPv6 requests have incorrectly formatted host/port in request line On WinHttpHandler, we will append [] around the IPv6 address. ""GET http://[::1234]/ HTTP/1.1"", ""Proxy-Connection: Keep-Alive"", ""Host: [::1234]"" On SocketsHttpHandler, currently we don't: ""GET http://::1234/ HTTP/1.1"", ""Host: [::1234]"" Also, if we specify a port number, SocketsHttpHandler will strip that in the uri send to the proxy as well. WinHttpHandler: In value: List<String> [""GET http://[::1234]:8080/ HTTP/1.1"", ""Proxy-Connection: Keep-Alive"", ""Host: [::1234]:8080""] SocketsHttpHandler: In value: List<String> [""GET http://::1234/ HTTP/1.1"", ""Host: [::1234]:8080""]",0
"CryptoStream.Dispose calls Flush on read-only Stream in CryptoStreamMode.Read ```csharp class ReadOnlyStream : Stream { public override void Flush() => throw new NotSupportedException(); public override int Read(byte[] buffer, int offset, int count) => count; public override long Seek(long offset, SeekOrigin origin) => throw new NotSupportedException(); public override void SetLength(long value) => throw new NotSupportedException(); public override void Write(byte[] buffer, int offset, int count) => throw new NotSupportedException(); public override bool CanRead => true; public override bool CanSeek => false; public override bool CanWrite => false; public override long Length => throw new NotSupportedException(); public override long Position { get => throw new NotSupportedException(); set => throw new NotSupportedException(); } } static void Main(string[] args) { var aes = Aes.Create().CreateDecryptor(); var crypto = new CryptoStream(new ReadOnlyStream(), aes, CryptoStreamMode.Read, false); crypto.Dispose(); } ``` I'm not sure if that's the intended behavior, but it makes no logical sense to me and also prevents me from reading encrypted payload from http requests in ASP.NET Core.",3
"HttpContent.ReadAsStreamAsync is over-allocating memory In order to reduce memory overhead, we make webrequests return when the headers have been read using: `HttpClient.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead);` The idea is that afterwards you'll be reading the bytes from the returned stream as they trickle in from the network. Or at least that's what I had hoped. But looking at the implementation, the moment you try and get the stream from the HttpContent, the entire stream is loaded into memory: https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpContent.cs#L253 If these responses are very large, it could exhaust the application for memory. Instead the ReadAsStreamAsync should return a buffer immediately and have it get filled as the bytes gets downloaded. The HttpCompletionOption doesn't really make much sense without doing this (apart from rejecting the response all-together based on the headers).",0
"System.Security.Cryptography.Pkcs '1.2.840.113549.1.1.5' is not a known hash algorithm. i'm trying to compute a cms SHA1RSA using the pre release version(4.5.0-preview1-26216-02) of System.Security.Cryptography.Pkcs. Oid.FromFriendlyName(""SHA1RSA"",OidGroup.SignatureAlgorithm) returns the corect digest algorithem, but upon calling encode, i get the exception that i,m not using any known hash algorithm. Is there any short term plan to incorporate it? Encoding snippet:---------- protected byte[] GenerateSignature(byte[] fileContent) { CmsSigner signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert); SignedCms signedCms = new SignedCms(new ContentInfo(fileContent), false); signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert); signer.DigestAlgorithm = Oid.FromFriendlyName(""SHA1RSA"",OidGroup.SignatureAlgorithm); signedCms.ComputeSignature(signer, false); var signature = signedCms.Encode(); return signature; }",3
"Test failure: System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"") Opened on behalf of @danmosemsft ``` The test `System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")` has failed. Assert.Contains() Failure Not found: 8 In value: Int32[] [1, 0] Stack Trace: null ``` Build : Master - 20180319.04 (Core Tests) Failing configurations: - Alpine.36.Amd64-x64 - Release **Parameters to the Assert are reversed, please fix** ```c# Assert.Contains(format.CurrencyNegativePattern, NumberFormatInfoData.GetCurrencyNegativePatterns(locale)); ``` We see ICU version < 59 so we expect { 1, 0 } but the system is returning 8. Perhaps we are reading the ICU version wrong, or perhaps this ICU version is actually returning 8.",19
"Should we add extention method to write ReadOnlySequence to IBufferWriter ? Now `System.Buffers.BuffersExtensions` have method to write ReadOnlySpan to IBufferWriter. Should we add similar method for `ReadOnlySequence`? ```cs public static class BuffersExtensions { public static void Write<T>(this IBufferWriter<T> bufferWriter, ReadOnlySpan<T> source); // new public static void Write<T>(this IBufferWriter<T> bufferWriter, ReadOnlySequence<T> source); } ```",10
Data.Common tests fixed for non english windows Fixes https://github.com/dotnet/corefx/issues/27626,15
Mirror changes from dotnet/coreclr This PR contains mirrored changes from dotnet/coreclr **Please REBASE this PR when merging**,1
"Expose Path.Join and tests Goes with https://github.com/dotnet/coreclr/pull/16561. Will need an updated CoreCLR with those bits. Will fail until that point. cc: @pjanotti, @danmosemsft, @Anipik",5
Add missing call operator Add missing call operator to execute powershell begin/end.ps1,1
"Added DCS Tests for System.Drawing Types This adds DataContractSerializer tests for basic types in System.Drawing -See issue #25729 for a list of types cc: @huanwu, @safern Resolves #25729",13
[Arm64/Linux] Enable CI & Official builds @jashook @janvorli Needs coreclr linux-arm64 in nuget PTAL let me know if there is anything else which I might have missed.,1
"Regenerate System.Threading ref with latest buildtools changes cc @kouvel, @tarekgh, @weshaggard, @danmosemsft, @ericstj, @joshfree Most of it is just formatting, sorting order.",8
"Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test / GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly Test System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly has failed. MESSAGE: Elapsed time 00:00:31.6655081 should be less than 30 seconds, was 31.6655081\r\nExpected: True\r\nActual: False ~~~ STACK TRACE: at System.Net.Http.Functional.Tests.HttpClientHandler_Cancellation_Test.ValidateClientCancellationAsync(Func`1 clientBodyAsync) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Cancellation.cs:line 372 at System.Net.Http.Functional.Tests.HttpClientHandler_Cancellation_Test.<>c__DisplayClass2_2.<<GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly>b__0>d.MoveNext() in D:\j\workspace\outerloop_net---92764178\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Cancellation.cs:line 128 --- End of stack trace from previous location where exception was thrown --- at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\outerloop_net---92764178\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67 at System.Net.Http.Functional.Tests.HttpClientHandler_Cancellation_Test.GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly(Boolean chunkedTransfer, Boolean connectionClose, CancellationMode mode) in D:\j\workspace\outerloop_net---92764178\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.Cancellation.cs:line 110 --- End of stack trace from previous location where exception was thrown --- ~~~ Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_debug/456/testReport/System.Net.Http.Functional.Tests/SocketsHttpHandler_HttpClientHandler_Cancellation_Test/GetAsync_CancelDuringResponseBodyReceived_Buffered_TaskCanceledQuickly_chunkedTransfer__True__connectionClose__False__mode__Token__CancelPendingRequests_/",0
Point the Readme test badges to Helix runs We should abandon the Jenkins testing infrastructure for innerloop/outerloop which is currently only being used for the badges and instead point our badges at daily/onPush helix runs (daily outerloop added in https://github.com/dotnet/corefx/pull/27129). This greatly reduces the cost of updating our test OS versions and also makes the badges more accurately reflect our current build&test state. Forked from https://github.com/dotnet/corefx/issues/27095 Depends on https://github.com/dotnet/core-eng/issues/1901,1
"Add FileLogTraceListener, Log and Asp​Log classes to .Net Core FileLogTraceListener class is available in .net framework in the Microsoft.VisualBasic.Logging namespace. It has some useful features that are not available in other TraceListeners, as descried here: https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.logging.filelogtracelistener?view=netframework-4.7.2 This class is not available in .Net Core, so I suggest you add it and make it available to both VB.NET and C#. And I suggest the same for Log Class https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.logging.log?view=netframework-4.7.2 and Asp​Log Class: https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.logging.asplog?view=netframework-4.7.2",11
"Process.Start fails to execute properly _From @victorsample on February 15, 2018 14:44_ Using Visual Studio 2017 Community Process.Start (<name>,<command_line) fails to execute properly. Trying to start Postgresql utility ""psql"" with command line ""-U aobadmin aobdb <C:\\Temp\\backupdb.sql"" does not execute properly. Putting the execution in a "".bat"" file and building the command line in the bat file does work. Apparently the form of the ""psql"" command is causing a problem. _Copied from original issue: dotnet/coreclr#16399_",11
"(Out)dated JS escaping rules in JsonValue.cs https://github.com/dotnet/corefx/blob/master/src/System.Json/src/System/Json/JsonValue.cs Edge, Chrome, Firefox: Input: JSON.stringify(""</script>"") Result: """"</script>"""" I can't verify that U+2028 (LINE SEPARATOR), U+2029 (PARAGRAPH SEPARATOR) needs to be escaped either. Only Firefox does that at the moment.",14
"System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest crashes with Unhandled Exception on Linux System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest crashes on Linux while executing the following tests: **MultiThreadedCancel_NonAsync** **MultiThreadedCancel_Async** Both the tests crash in the method **ExecuteCommandCancelExpected** The same tests pass on windows, I am creating this GitHub issue to track and fix the tests. **Command to Reproduce:** ```bash <CoreFX Location>/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync"" ``` ```bash <CoreFX Location>/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async"" ``` **Logs MultiThreadedCancel_NonAsync:** ```bash keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$ ~/dotnetcore/corefx/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync"" Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core Copyright (C) Microsoft Corporation. All rights reserved. Address -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Address/netstandard/Address.dll Circle -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Circle/netstandard/Circle.dll Shapes -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Shapes/netstandard/Shapes.dll Utf8String -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Utf8String/netstandard/Utf8String.dll System.Data.SqlClient.ManualTesting.Tests -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/System.Data.SqlClient.ManualTesting.Tests/netstandard/System.Data.SqlClient.ManualTesting.Tests.dll ----- start 10:37:27 =============== To repro directly: ===================================================== pushd /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 chmod +x /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync -notrait category=OuterLoop -notrait category=failing popd =========================================================================================================== /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests xUnit.net console test runner (64-bit .NET Core) Copyright (C) 2014 Outercurve Foundation. Discovering: System.Data.SqlClient.ManualTesting.Tests Discovered: System.Data.SqlClient.ManualTesting.Tests Starting: System.Data.SqlClient.ManualTesting.Tests Unhandled Exception: System.Data.SqlClient.SqlException: A severe error occurred on the current command. The results, if any, should be discarded. at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs:line 1170 at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParser.cs:line 1106 at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady) at System.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 2861 at System.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3121 at System.Data.SqlClient.SqlDataReader.Read() in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3083 at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.<>c__DisplayClass16_0.<ExecuteCommandCancelExpected>b__0() in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 220 at System.Data.SqlClient.ManualTesting.Tests.DataTestUtility.ExpectFailure[TException](Action actionThatFails, String exceptionMessage, Boolean innerExceptionMustBeNull, Func`2 customExceptionVerifier) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/DataCommon/DataTestUtility.cs:line 159 at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.ExecuteCommandCancelExpected(Object state) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 226 at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionDispatchInfo.cs:line 132 /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh: line 83: 2669 Aborted (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_NonAsync -notrait category=OuterLoop -notrait category=failing /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests ----- end 10:37:29 ----- exit code 134 ---------------------------------------------------------- /mnt/d/corefx/Tools/tests.targets(492,5): warning MSB3073: The command ""/mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64/"" exited with code 134. [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj] /mnt/d/corefx/Tools/tests.targets(500,5): error : One or more tests failed while running tests from 'System.Data.SqlClient.ManualTesting.Tests' please check /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/testResults.xml for details! [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj] ``` **Logs MultiThreadedCancel_Async:** ```bash keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$ ~/dotnetcore/corefx/Tools/msbuild.sh /t:RebuildAndTest /p:ConfigurationGroup=Release /p:XunitOptions=""-method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async"" Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core Copyright (C) Microsoft Corporation. All rights reserved. Address -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Address/netstandard/Address.dll Circle -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Circle/netstandard/Circle.dll Shapes -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Shapes/netstandard/Shapes.dll Utf8String -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/Utf8String/netstandard/Utf8String.dll System.Data.SqlClient.ManualTesting.Tests -> /mnt/d/corefx/bin/AnyOS.AnyCPU.Release/System.Data.SqlClient.ManualTesting.Tests/netstandard/System.Data.SqlClient.ManualTesting.Tests.dll ----- start 10:39:45 =============== To repro directly: ===================================================== pushd /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 chmod +x /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64//dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async -notrait category=OuterLoop -notrait category=failing popd =========================================================================================================== /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64 /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests xUnit.net console test runner (64-bit .NET Core) Copyright (C) 2014 Outercurve Foundation. Discovering: System.Data.SqlClient.ManualTesting.Tests Discovered: System.Data.SqlClient.ManualTesting.Tests Starting: System.Data.SqlClient.ManualTesting.Tests Unhandled Exception: System.Data.SqlClient.SqlException: A severe error occurred on the current command. The results, if any, should be discarded. at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs:line 1170 at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParser.cs:line 1106 at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady) at System.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 2861 at System.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more) in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3121 at System.Data.SqlClient.SqlDataReader.Read() in /mnt/d/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs:line 3083 at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.<>c__DisplayClass16_0.<ExecuteCommandCancelExpected>b__0() in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 220 at System.Data.SqlClient.ManualTesting.Tests.DataTestUtility.ExpectFailure[TException](Action actionThatFails, String exceptionMessage, Boolean innerExceptionMustBeNull, Func`2 customExceptionVerifier) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/DataCommon/DataTestUtility.cs:line 159 at System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.ExecuteCommandCancelExpected(Object state) in /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/SQL/CommandCancelTest/CommandCancelTest.cs:line 226 at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionDispatchInfo.cs:line 132 /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh: line 83: 3044 Aborted (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Data.SqlClient.ManualTesting.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -method System.Data.SqlClient.ManualTesting.Tests.CommandCancelTest.MultiThreadedCancel_Async -notrait category=OuterLoop -notrait category=failing /mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests ----- end 10:39:48 ----- exit code 134 ---------------------------------------------------------- /mnt/d/corefx/Tools/tests.targets(492,5): warning MSB3073: The command ""/mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/RunTests.sh /mnt/d/corefx/bin/testhost/netcoreapp-Linux-Release-x64/"" exited with code 134. [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj] /mnt/d/corefx/Tools/tests.targets(500,5): error : One or more tests failed while running tests from 'System.Data.SqlClient.ManualTesting.Tests' please check /mnt/d/corefx/bin/tests/System.Data.SqlClient.ManualTesting.Tests/netcoreapp-Linux-Release-x64/testResults.xml for details! [/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests/System.Data.SqlClient.ManualTesting.Tests.csproj] keerats@ubuntu:/mnt/d/corefx/src/System.Data.SqlClient/tests/ManualTests$ ``` @saurabh500 @geleems @corivera @AfsanehR",15
"Queue/Stack batch item Enqueue/Push `Queue` and `Stack` in the `System.Collections.Generic` namespace currently only implement methods to enqueue/push single objects to the collection. In order to add multible elements, the source collection has to be enumerated, that could potentialy lead to a performance loss based on the required iterations. # Usage Because of performance, large input collections would profit from such a change. ````cs private static async void UseCaseLogic() { var workQueue = new Queue<char>(); var siteList = new List<string> { ""https://google.com"", ""https://github.com"", }; using (var wc = new WebClient()) { foreach (var cSite in siteList) { var cSiteText = await wc.DownloadStringTaskAsync(cSite); workQueue.EnqueueRange(cSiteText.ToCharArray()); } } while (workQueue.Count != 0) { var cItem = workQueue.Dequeue(); //Process } } ```` # Proposed API additions Because of a simmilar method in `List<T>` (`AddRange`) naming the new APIs `EnqueueRange`/`PushRange` appears to be the most logical way. ````cs namespace System.Collections.Generic { public class Stack<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T> { public void EnqueueRange(IEnumerable<T> item); public void EnqueueRange(T[] item); } } ```` ````cs namespace System.Collections.Generic { public class Queue<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T> { public void PushRange(IEnumerable<T> item); public void PushRange(T[] item); } } ```` # Open Questions In which order should the source array/collection be Inserted? Would reordering the source void the performance gains?",7
"Fix shim APICompat checks to fail build Update baseline files for netcoreapp and uap. Compat issues complaining about class vs delegate and class vs struct are because of a bug in APICompat tool where the implementation is picking the wrong core assembly. It is picking System.Runtime instead of System.Private.CoreLib, there isn't any straight forward way to fix so baselining. fixes https://github.com/dotnet/corefx/issues/26361 cc @danmosemsft @joperezr",1
Created ReadOnlySequence GetPositionAndSliceAreEqual test and fixed where was not Created ReadOnlySequence GetPositionAndSliceAreEqual test to test that all GetPosition methods and Slice methods return the same result for the same input parameters. Fixed where was not.,10
"Windows Auth Issue from UWP Applications Hi @rmkerr As discussed I have created a sample project, you may download it from the repository path below. The code as three projects, a WebAPI with windows Authentication and two consumers that have more or less the same code. The console application is able to make the call while the UWP gets a 500 error. Another thing that I noted is if I remove the Authorize attribute from the API it works fine for both. https://github.com/luvhsail/Samples.git",0
"Linux/OSX PlatformNotSupportedException calling Socket.IOControl PlatformNotSupportedException when [using IOControl](https://github.com/graffen/NLog.Targets.Syslog/blob/v5.0.0-beta-02/src/NLog.Targets.Syslog/MessageSend/Tcp.cs#L86) to set keepAlive ```csharp tcp.Client.IOControl(IOControlCode.KeepAliveValues, keepAlive.ToByteArray(), null); ``` Please look at https://github.com/graffen/NLog.Targets.Syslog/issues/119 for more info",0
"support for CONNECT method in SocketHttpHandler This is replacement for #26869 It is mainly to make git resolving easier after rebasing. To much changed in master since my original work so it is quire different PR anyway. Aside from unit tests, I did basic testing with HTTPS over HTTP proxy and it works. Authentication will still need some work as @geoffkizer mentioned in hist last commit. I plan to take a look next as well as I'll keep testing SocketHttpHandler with proxies.",0
"Expose ClientWebSocketOptions.RemoteCertificateValidationCallback Fixes https://github.com/dotnet/corefx/issues/12038 cc: @davidsh, @caesar1995",0
"[Discussion] Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service # Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service ## Executive Summary Microsoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases). This advisory also provides guidance on what developers can do to update their applications correctly. Microsoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack. System administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101. ## Original Announcement The original announcement is located at https://github.com/dotnet/announcements/issues/62 ### Mitigation Factors None ### Affected Software Any application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. ### Advisory FAQ #### How do I know if I am affected? Any application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table: | Operating System | Location | |------------------|----------| | Windows | `C:\Program Files\dotnet\shared\Microsoft.NETCore.App\` | | macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` | | Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` | Each runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable. Additionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be updated to target the updated .NET Core runtime, recompiled and redeployed. #### How do I fix my affected application? Applications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime. If you've built a self-contained application, you must install the new runtime and SDK, update your application to target the updated .NET Core runtime, recompile and redeploy. To update your runtime version edit the `RuntimeFrameworkVersion` property in the project's .csproj file to indicate the desired target version. For example: ```xml <PropertyGroup> <RuntimeFrameworkVersion>2.0.6</RuntimeFrameworkVersion> </PropertyGroup> ``` #### What if the update breaks my application? An application can be pinned to a previous version of the runtime by editing the `{applicationName}.runtimeconfig.json` file for that application., where `{applicationName}` is the name of the executable, for example `example.exe` would have a runtime configuration file titled `example.runtimeconfig.json`. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework. Since the `{applicationName}.runtimeconfig.json` file is an optional file, you may need to create one for each application and add it alongside the executable. ### Acknowledgments [Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/) ### External Links [CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875) ### Revisions V1.2 (Mar 26, 2018): Corrected instructions for runtimeconfig.json V1.1 (Mar 14, 2018): Added instructions for self contained application retargetting. V1.0 (Mar 13, 2018): Advisory published. _Version 1.2_ _Last Updated 2018-03-26_",4
Change HTTP default request version to HTTP/2 Close: #23394,0
Test failure: System.Net.Http.Functional.Tests.HttpClientHandlerTest/AllowAutoRedirect_True_PostToGetDoesNotSendTE(statusCode: 300) Opened on behalf of @Sunny-pu The test `System.Net.Http.Functional.Tests.HttpClientHandlerTest/AllowAutoRedirect_True_PostToGetDoesNotSendTE(statusCode: 300)` has failed. System.NullReferenceException : Object reference not set to an instance of an object. Stack Trace: at System.Net.Http.Functional.Tests.HttpClientTestBase.CreateHttpClientHandler(Boolean useSocketsHttpHandler) in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientTestBase.cs:line 39 at System.Net.Http.Functional.Tests.HttpClientHandlerTest.AllowAutoRedirect_True_PostToGetDoesNotSendTE(Int32 statusCode) --- End of stack trace from previous location where exception was thrown --- Build : Master - 20180312.01 (UWP F5 Tests) Failing configurations: - Windows.10.Arm64-arm - Release - Windows.10.Amd64.ClientRS3-x64 - Release - Windows.10.Amd64.ClientRS3-x86 - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180312.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FAllowAutoRedirect_True_PostToGetDoesNotSendTE(statusCode:%20300),0
"Question - What is the Difference between Debug Type Full & Pdb Hi, I have a question regarding the build output when setting the Debug Type Full or Pdb-Only in project properties on .NET Core. As far as I could see the assemblies produced are the same? I also don't see any difference in the pdb files which are produced... but maybe am missing something. In full framework there is definitely a difference and it could have perf impact on resulting code, should we have the same concerns on .NET Core? or is it a non-issue. _""One difference between -debug:pdbonly and -debug:full is that with -debug:full the compiler emits a DebuggableAttribute, which is used to tell the JIT compiler that debug information is available. Therefore, you will get an error if your code contains the DebuggableAttribute set to false if you use -debug:full. "" - https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/debug-compiler-option Thanks",11
"TraceSource indent bug TraceSource is affected by the indent set before the calling output methods for the first time. After that changing the indent doesn't affect the TraceSource output. ``` var mySource = new TraceSource(""Test"", SourceLevels.All); Trace.IndentLevel = 2; mySource.TraceEvent(TraceEventType.Error, 1, ""TraceSource1""); Trace.WriteLine(""Trace1""); Trace.IndentLevel = 1; mySource.TraceEvent(TraceEventType.Error, 2, ""TraceSource2""); Trace.WriteLine(""Trace2""); mySource.TraceEvent(TraceEventType.Error, 3, ""TraceSource3""); ``` This is the output: > Test Error: 1 : TraceSource1 > Trace1 > Test Error: 2 : TraceSource2 > Trace2 > Test Error: 3 : TraceSource3 The only way to solve this is to creat a new instance of the TraceSource class before changing the indent.. This code will work as expected: ``` var mySource = new TraceSource(""Test"", SourceLevels.All); Trace.IndentLevel = 2; mySource.TraceEvent(TraceEventType.Error, 1, ""TraceSource1""); Trace.WriteLine(""Trace1""); mySource = new TraceSource(""Test"", SourceLevels.All); Trace.IndentLevel = 1; mySource.TraceEvent(TraceEventType.Error, 2, ""TraceSource2""); Trace.WriteLine(""Trace2""); mySource.TraceEvent(TraceEventType.Error, 3, ""TraceSource3""); ``` This is the output: > Test Error: 1 : TraceSource1 > Trace1 > Test Error: 2 : TraceSource2 > Trace2 > Test Error: 3 : TraceSource3 Note: I reported another 2 bugs related to System.Diagnostics here: https://github.com/dotnet/corefx/issues/28697",11
"Test failure: System.IO.Tests.DirectoryInfo_GetSetTimes/TimesIncludeMillisecondPart Test passes on all Linux distros in CI: https://github.com/dotnet/corefx/pull/27559 Test fails on all Linux distros in official build. Investigating whether build is exactly the same. The test `System.IO.Tests.DirectoryInfo_GetSetTimes/TimesIncludeMillisecondPart` has failed. ``` Assert.All() Failure: 6 out of 6 items in the collection did not pass. [5]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure Expected: Not 0 Actual: 0 at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer) at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) [4]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure Expected: Not 0 Actual: 0 at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer) at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) [3]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure Expected: Not 0 Actual: 0 at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer) at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) [2]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure Expected: Not 0 Actual: 0 at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer) at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) [1]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure Expected: Not 0 Actual: 0 at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer) at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) [0]: Xunit.Sdk.NotEqualException: Assert.NotEqual() Failure Expected: Not 0 Actual: 0 at Xunit.Assert.NotEqual[T](T expected, T actual, IEqualityComparer`1 comparer) at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass8_0.<TimesIncludeMillisecondPart>b__0(TimeFunction function) in /root/corefx-1435242/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 101 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) Stack Trace: null Build : Master - 20180302.04 (Core Tests) Failing configurations: - RedHat.69.Amd64-x64 - Release - Fedora.27.Amd64-x64 - Release - Fedora.26.Amd64-x64 - Release - SLES.12.Amd64-x64 - Release - OpenSuse.423.Amd64-x64 - Release - Ubuntu.1804.Amd64-x64 - Release - Ubuntu.1710.Amd64-x64 - Release - Ubuntu.1604.Amd64-x64 - Release - Ubuntu.1404.Amd64-x64 - Release - Debian.90.Amd64-x64 - Release - Debian.87.Amd64-x64 - Release - RedHat.74.Amd64-x64 - Release - RedHat.73.Amd64-x64 - Release - Centos.74.Amd64-x64 - Release - Centos.73.Amd64-x64 - Release",5
"System.IO.Tests.EnumerableTests/EnumerateDirectories_NonBreakingSpace failing on OSX ``` Assert.Equal() Failure Expected: String[] [\""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""..., \""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""...] Actual: FileSystemEnumerable<String> [\""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""..., \""/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\""...] ``` https://mc.dot.net/#/user/Anipik/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/26b967e2aab520a0da79c316024360f635dc937d/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.EnumerableTests~2FEnumerateDirectories_NonBreakingSpace cc @JeremyKuhne @danmosemsft",5
AuthenticateAsClientAsync hangs on core 1.1.4 [Question] Here's my stack overflow post with all the investigation I have done thus far: https://stackoverflow.com/questions/49891249/tcp-close-wait-apple-apns It seems like this api hangs on .net core 1. I tried it on 1.1.4 and 1.1.8 without any success.,0
"System.Drawing.Common.Tests fails some tests on netfx framework locally System.Drawing.Common.Tests fails some tests on netfx framework locally with next log: ``` System.Drawing.Imaging.Tests.MetafileTests.Ctor_RectangleFEmpty_Success(description: ""description"") [FAIL] System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида. Stack Trace: в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, String description) в System.Drawing.Imaging.Tests.MetafileTests.Ctor_RectangleFEmpty_Success(String description) System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(emfType: EmfOnly) [FAIL] System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида. Stack Trace: в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description) в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type) в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(EmfType emfType) System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(emfType: EmfPlusDual) [FAIL] System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида. Stack Trace: в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description) в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type) в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(EmfType emfType) System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(emfType: EmfPlusOnly) [FAIL] System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида. Stack Trace: в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description) в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type) в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(EmfType emfType) System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(description: null) [FAIL] System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида. Stack Trace: в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description) в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(String description) System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(description: ""description"") [FAIL] System.Runtime.InteropServices.ExternalException : В GDI+ возникла ошибка общего вида. Stack Trace: в System.Drawing.Imaging.Metafile..ctor(String fileName, IntPtr referenceHdc, EmfType type, String description) в System.Drawing.Imaging.Tests.MetafileTests.Ctor_StringIntPtrEmfType_Success(String description) ``` 'В GDI+ возникла ошибка общего вида.' is 'A generic error occurred in GDI+' on English.",13
"[Arm64] Add crypto intrinsics Add crypto APIs merged today into CoreCLR. These tests will not pass until new CoreCLR bits propagate to CoreFX Includes #26580 (Simd), because that is expected to merge first. @tannergooding @CarolEidt @eerhardt @4creators @debayang @RussKeldorph",4
"Flaky tests BasicEventSourceTests.TestsWriteEvent/Test_WriteEvent_SelfDescribing_ETW and Test_WriteEvent_Manifest_ETW Opened on behalf of @danmosemsft The test `BasicEventSourceTests.TestsWriteEvent/Test_WriteEvent_SelfDescribing_ETW` has failed. Assert.Equal() Failure\r Expected: \r Actual: x Stack Trace: at BasicEventSourceTests.TestsWriteEvent.<>c__DisplayClass10_1.<Test_WriteEvent>b__31(Event evt) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\TestsWriteEvent.cs:line 351 at BasicEventSourceTests.EventTestHarness.<>c__DisplayClass2_0.<RunTests>b__0(Event data) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\EventTestHarness.cs:line 82 at BasicEventSourceTests.EtwListener.OnEventHelper(TraceEvent data) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\Listeners.cs:line 258 at Microsoft.Diagnostics.Tracing.Parsers.DynamicTraceEventData.Dispatch() at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.DoDispatch(TraceEvent anEvent) at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.Dispatch(TraceEvent anEvent) at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.RawDispatch(EVENT_RECORD* rawData) at Microsoft.Diagnostics.Tracing.TraceEventNativeMethods.ProcessTrace(UInt64[] handleArray, UInt32 handleCount, IntPtr StartTime, IntPtr EndTime) at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.ProcessOneFile() at Microsoft.Diagnostics.Tracing.ETWTraceEventSource.Process() at BasicEventSourceTests.EtwListener.Dispose() in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\Listeners.cs:line 238 at BasicEventSourceTests.EventTestHarness.RunTests(List`1 tests, Listener listener, EventSource source, FilteringOptions options) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\EventTestHarness.cs:line 170 at BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent(Listener listener, Boolean useSelfDescribingEvents) in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\TestsWriteEvent.cs:line 430 at BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_SelfDescribing_ETW() in E:\A\_work\63\s\corefx\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\TestsWriteEvent.cs:line 79 Build : Master - 20180314.07 (Core Tests) Failing configurations: - Windows.10.Amd64.Core-x86 - Debug - Windows.10.Amd64-x86 - Debug",11
"When the System.Reflection.DispatchProxy subclass's access modifier is not public it throw Access is denied The repo is [here](https://github.com/Mutuduxf/DispatchProxyDemo) ``` System.TypeLoadException: Access is denied: 'DynamicProxy+InvokeProxy`1[IService]'. at System.Reflection.Emit.TypeBuilder.TermCreateClass(RuntimeModule module, Int32 tk, ObjectHandleOnStack type) at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock() at System.Reflection.Emit.TypeBuilder.CreateTypeInfo() at System.Reflection.DispatchProxyGenerator.ProxyBuilder.CreateType() at System.Reflection.DispatchProxyGenerator.GenerateProxyType(Type baseType, Type interfaceType) at System.Reflection.DispatchProxyGenerator.GetProxyType(Type baseType, Type interfaceType) at System.Reflection.DispatchProxyGenerator.CreateProxyInstance(Type baseType, Type interfaceType) at System.Reflection.DispatchProxy.Create[T,TProxy]() at DispatchProxyDemo.DynamicProxy.Proxy[T]() in C:\Users\aeond\Desktop\GitHub\DispatchProxyDemo\DispatchProxyDemo\DynamicProxy.cs:line 9 at DispatchProxyDemo.Program.Main(String[] args) in C:\Users\aeond\Desktop\GitHub\DispatchProxyDemo\DispatchProxyDemo\Program.cs:line 11 ``` [EDIT] Format exception + add exception line by @karelz",9
Add ExecutionContext flowing tests for Socket async operations Contributes to https://github.com/dotnet/corefx/issues/27892 cc: @geoffkizer,0
"System.Buffers: XML doc in NuGet package (version 4.4.0 and later) differs from source code XML doc **TL;DR:** Something appears to be wrong with the XML documentation included in the `System.Buffers` NuGet package, versions 4.4.0 and later. (4.4.0-preview2-25405-01 and earlier appear to have been fine*.) It doesn't match the XML documentation in the source code files. ---- I was reading the documentation for parameter `clearArray` of the method `ArrayPool<T>.Return(T[] array, bool clearArray)`. It goes as follows (formatting and emphasis by me): > Indicates whether the contents of the buffer should be cleared before reuse. **If bufferLength is set to true** [...]. **If bufferLength is set to false** [...]. The reference to `bufferLength` doesn't make any sense. There's nothing public called `bufferLength` in this class. Here's a screenshot of the documentation showing the same text: ![XML documentation for `ArrayPool<T>.Return` as seen in Visual Studio](https://user-images.githubusercontent.com/104481/38443926-af5ca6f0-39ed-11e8-828b-8a725cacdc87.png) Note that I'm using the latest package version, `4.5.0-preview1-26216-02`. The file `C:\Users\stakx\.nuget\packages\system.buffers\4.5.0-preview1-26216-02\version.txt` contains the hash `00490982c7952e96a1089818467caa6fd07541b2`, which I assume is a SHA-1 commit hash in this project's Git repository. Looking at that commit's version of `ArrayPool.cs`, this is what the documentation should read: https://github.com/dotnet/corefx/blob/00490982c7952e96a1089818467caa6fd07541b2/src/System.Buffers/src/System/Buffers/ArrayPool.cs#L103-L108 No mention of `bufferLength` here, and this is the XML documentation you get with `System.Buffers` before version 4.4.0. Looking at the version history of that file, there was never any `bufferLength` bit here as far as I can tell. So what went wrong with the XML documentation starting with package version 4.4.0? Where does the `bufferLength` bit come from? ---- **(*)** XML docs in package versions before 4.4.0 were fine only in the sense that the documentation matched with that from the source code... but there were other, probably unrelated problems: The XML documentation file was either named incorrectly (just `.xml`) or missing (not in the `lib\` directory, but in the `ref\` directory), so one wouldn't get any documentation in VS IntelliSense.",1
"Consider Socket.OSSupportsUnixDomainSockets property `System.Net.Socket` currently has these two properties: ```C# public static bool OSSupportsIPv4 { get; } public static bool OSSupportsIPv6 { get; } ``` In .NET Core 2.1, we've added a public EndPoint-derived type for Unix domain sockets (UnixDomainSocketEndPoint). Unix domain sockets work across all Unixes we target, but Windows is also adding support (https://blogs.msdn.microsoft.com/commandline/2017/12/19/af_unix-comes-to-windows/), and we can support that via UnixDomainSocketEndPoint as well. We should consider adding: ```C# public static bool OSSupportsUnixDomainSockets { get; } ```",0
"Code cleanup and formatting for System.Memory src and test Each set of changes is a separate commit. Related PR on the coreclr side: https://github.com/dotnet/coreclr/pull/17451 cc @dotnet/corefxlab-contrib, @stephentoub, @jkotas",10
Created ReadOnlySequence tests and fixed issues ,10
"[Regression] System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_SslProtocols_Test / GetAsync_UnsupportedSSLVersion_Throws ## Failure type ### GetAsync_UnsupportedSSLVersion_Throws - The operation was canceled ``` Assert.Throws() Failure Expected: typeof(System.Net.Http.HttpRequestException) Actual: typeof(System.OperationCanceledException): The operation was canceled. at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 154 at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 348 at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 467 at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 258 at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 30 at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in E:\A\_work\36\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 479 at System.Net.Test.Common.RemoteServerQuery.Run[TResult](Func`1 testCode, Func`2 remoteExceptionWrapper, String serverName) ``` ## Failure history Day | Build | OS | Details -- | -- | -- | -- 3/1 | 20180301.04 | Win10 | 2x 3/2 | 20180302.04 | Win10 | 3/3 | 20180303.03 | Win10 | 2x 3/4 | 20180303.04 | Win10 | 3/11 | 20180311.02 | Win10 | 3/12 | 20180312.02 | Win10 | 2x 3/15 | 20180315.04 | Win10 | 2x 3/23 | 20180323.01 | Win10 |",0
"HttpClientHandler.UseDefaultCredentials does not work on Unix platforms When this this is set to True, we should use identity of currently logged user for authentication to HTTP(s) severs or proxies. Note, that on Windows this works only for NTLM and NEGOTIATE as there is no way how to extract clear text password for Basic or Digest authentication. On Unix, there is typically not centralized identity management nor strong cryptographic ID. However when Kerberos is configured, curl is able to use default principal from ticket if user previously authenticated using kinit. > build@toweinfu-ubu17:~/github/corefx/src$ klist > Ticket cache: FILE:/tmp/krb5cc_1000 > Default principal: testuser@TEST.NET > > Valid starting Expires Service principal > 04/05/2018 06:12:30 04/05/2018 16:12:30 krbtgt/TEST.NET@TEST.NET > renew until 04/06/2018 06:12:24 > This does not work neither for CurlHandler nor for SocketsHttpHandler. Further more, ,many Unix utilities (wget, curl, git, ftp, ...) can read credentials from .netrc file. That is not great but it is still better than hardcoding secrets in code or passing them via environmental variable. If we choose to, this could be also source of default credentials (basic support tracked by #23313)",0
"Cross Platform GUI for desktop applications? As one of the co-founders of a local startup, my partners and I were looking for a framework that could do it all and do it well. .NET Core very closely hit the mark but fell short in just one specific area: a cross-platform library for a Graphical User Interface. I wasn't sure where to post this but I thought it was worth mentioning as an important feedback, my partners and I are big fans of what .NET Core is able to achieve (and the tools available for it) but we had to look elsewhere due to the fact that we need to be as efficient as possible due to our limited resources. Hopefully our feedback and request makes a difference. Phidler",14
"PlatformHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection fails Discovered this while running System.Net.Http Outerloop tests: ``` System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection (totalSize: 2000000, readSize: 0, mode: BytePerChunk) [FAIL] System.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host Stack Trace: s:\GitHub\corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs(1087,0): at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.T hrowException(SocketError error) s:\GitHub\corefx\src\System.Net.Sockets\src\System\Net\Sockets\Socket.Tasks.cs(1079,0): at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.S ystem.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token) E:\A\_work\104\s\src\mscorlib\shared\System\IO\StreamWriter.cs(979,0): at System.IO.StreamWriter.FlushAsyncInternal(StreamWriter _this, Boolean flus hStream, Boolean flushEncoder, Char[] charBuffer, Int32 charPos, Boolean haveWrittenPreamble, Encoding encoding, Encoder encoder, Byte[] byteBuffer, Stream s tream, CancellationToken cancellationToken) E:\A\_work\104\s\src\mscorlib\shared\System\IO\StreamWriter.cs(586,0): at System.IO.StreamWriter.WriteAsyncInternal(StreamWriter _this, String value , Char[] charBuffer, Int32 charPos, Int32 charLen, Char[] coreNewLine, Boolean autoFlush, Boolean appendNewLine) s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(389,0): at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderAnd SendCustomResponseAsync(String response) s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(130,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass13_0.<<AcceptC onnectionSendCustomResponseAndCloseAsync>b__0>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(117,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 fu ncAsync) s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(128,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionSendCustomRespo nseAndCloseAsync(String response) s:\GitHub\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs(255,0): at System.Net.Http.Functional.Tests.HttpCl ientHandler_ResponseDrain_Test.<>c__DisplayClass6_1.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection>b__2>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(117,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 fu ncAsync) s:\GitHub\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs(246,0): at System.Net.Http.Functional.Tests.HttpCl ientHandler_ResponseDrain_Test.<>c__DisplayClass6_0.<<GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection>b__1>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateCl ientAndServerAsync>b__0>d.MoveNext() --- End of stack trace from previous location where exception was thrown --- s:\GitHub\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs(67,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsy nc, Options options) s:\GitHub\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ResponseDrain.cs(216,0): at System.Net.Http.Functional.Tests.HttpCl ientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DisposeBeforeReadingToEnd_KillsConnection(Int32 totalSize, Int32 readSize, ContentMode mode) --- End of stack trace from previous location where exception was thrown --- ----- Inner Stack Trace ----- ``` And after getting this exception, the test hangs due to some await problem regarding the loopback server response. It looks like a loopback server bug or a place where a SocketException needs to be handled better. ## Failures history Build | OS | Details -- | -- | -- 20180225.01 | Win7 | SocketException: An existing connection was forcibly closed by the remote host 20180301.04 | Win7 | SocketException: An existing connection was forcibly closed by the remote host 20180302.06 | Win7 | SocketException: An existing connection was forcibly closed by the remote host 20180303.03 | Win7 | WinHttpException: The operation has been canceled 20180303.03 | Win7 | SocketException: An existing connection was forcibly closed by the remote host 20180304.02 | Win7 | SocketException: An existing connection was forcibly closed by the remote host 20180304.03 | Win7 | WinHttpException: The operation has been canceled 20180308.02 | Win8.1 | WinHttpException: The operation has been canceled 20180308.06 | Win7 | WinHttpException: The operation has been canceled 20180314.02 | Win10 | WinHttpException: The operation has been canceled 20180314.05 | Win7 | TaskCanceledException: A task was canceled. 20180314.05 | Win7 | WinHttpException: The handle is invalid 20180316.03 | Win7 | SocketException: An existing connection was forcibly closed by the remote host 20180318.01 | Win7 | SocketException: An existing connection was forcibly closed by the remote host",0
"StringBuilder should allow copying efficiently to a TextWriter ## Motivation At present to copy a StringBuilder into a TextWriter you must allocate a throwaway string as large as the amount you want to copy. This can cause a LOH allocation. ## Workaround To avoid that today you must write code to copy in blocks via a char[] buffer. ASP.NET were forced to do this ([PR here](https://github.com/aspnet/AspNetWebStack/commit/3fe0d348f00864e4f1eeaefbd027ea965787b892#diff-fe84a6b0645ee996bea1ec4d8445823f)) in response to an issue in a customer workload. If we add an API for StringBuilder to copy to a TextWriter, we can take care of that loop, and also use a pooled char[]. ## Proposed API ```c# public sealed partial class StringBuilder : System.Runtime.Serialization.ISerializable { // existing public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { } public void CopyTo(int sourceIndex, System.Span<char> destination, int count) { } // proposed public void CopyTo(int sourceIndex, TextWriter destination, int count) { } } ``` ## Rough Implementation Basically [what ASP.NET did](https://github.com/aspnet/AspNetWebStack/blob/62d0b2df0bcca848a8e0848fd1866928df15528e/src/System.Web.WebPages/StringWriterExtensions.cs#L15) but using a pooled char[] buffer. ```c# public void CopyTo(int sourceIndex, TextWriter destination, int count) { int remainingChars = this.Length; int bufferSize = Math.Min(this.Length, 1024); char[] buffer = ArrayPool<byte>.Shared.Rent(bufferSize); int currentPosition = 0; while (remainingChars > 0) { int copyLen = Math.Min(bufferSize, remainingChars); this.CopyTo(currentPosition, buffer, copyLen); destination.Write(buffer, 0, copyLen); currentPosition += copyLen; remainingChars -= copyLen; } ArrayPool<byte>.Shared.Return(buffer); } ````",4
"Use ReflectionBasedSerializer for all serializers if any of mappings are soap mappings When creating serializers for multiple mappings, if any of mappings are soap mapping, it will use ReflectionBasedSerializer and won't generate the serializer. However during serialization, for non soap mapping, it will try to use the serializer for serialization, which doesn't exist. The fix is to force all serializers using ReflectionBasedSerializer if there's any soap mapping. #25298 @zhenlan @mconnew @yujayee @Lxiamail",12
"[Regression] Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest / GetAsync_IPv6LinkLocalAddressUri_Success ## Types of failure `System.Net.Http.Functional.Tests` / `SocketsHttpHandler_HttpClientHandlerTest.GetAsync_IPv6LinkLocalAddressUri_Success` Linux: ``` System.Net.Http.HttpRequestException : Invalid argument ---- System.Net.Sockets.SocketException : Invalid argument ``` OSX - [details](https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_osx_debug/390/testReport/System.Net.Http.Functional.Tests/SocketsHttpHandler_HttpClientHandlerTest/GetAsync_IPv6LinkLocalAddressUri_Success/ ) ``` System.Net.Http.HttpRequestException : No route to host ---- System.Net.Sockets.SocketException : No route to host at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 86 at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723 at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 325 at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723 at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 467 at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/buildagent/agent/_work/482/s/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs:line 723 at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 258 at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 30 at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 479 at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass34_0.<<GetAsync_IPv6LinkLocalAddressUri_Success>b__0>d.MoveNext() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs:line 365 --- End of stack trace from previous location where exception was thrown --- at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 67 at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_IPv6LinkLocalAddressUri_Success() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs:line 362 --- End of stack trace from previous location where exception was thrown --- ----- Inner Stack Trace ----- at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_debug/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 76 ``` ## History of failures Day | Build | Details -- | -- | -- 4/3 | 20180403.01 | 2x OSX & 15x Linux 4/3 | 20180403.04 | 2x OSX & 14x Linux",0
"Windows.Compatibility fails restore due to downgrades Create the project: ```xml <Project Sdk=""Microsoft.NET.Sdk""> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>netcoreapp2.1</TargetFramework> <RestoreSources>https://dotnet.myget.org/F/dotnet-core/api/v3/index.json</RestoreSources> </PropertyGroup> <ItemGroup> <PackageReference Include=""Microsoft.Windows.Compatibility"" Version=""2.0.0-preview3-26319-04"" /> </ItemGroup> </Project> ``` Restore it. Observe failure: ``` C:\test\winCompat.csproj : error NU1605: winCompat -> Microsoft.Windows.Compatibility 2.0.0-preview3-26319-04 -> System.Security.Cryptography.Pkcs 4.5.0-preview3-26319-04 -> System.Security.Cryptography.Cng (>= 4.5.0-preview3-26319-04) C:\test\winCompat.csproj : error NU1605: winCompat -> Microsoft.Windows.Compatibility 2.0.0-preview3-26319-04 -> System.Security.Cryptography.Cng (>= 4.4.0) ``` This is beceause PKCS is listed as a `PrereleaseLibraryPackage` but Cng is a *stable* `LibraryPackage`. This results in the downgrade. /cc @safern @weshaggard",1
"Add a RegexExpression class and method-based regular expression I made this proposal to C# repo. https://github.com/dotnet/csharplang/issues/1364 It concerns a LinQ syntax for Regular expressions. Apparently it depends on a RegexExpression Class and some extension methods. RgxExpression calass should have some construcors to allow create an instance based on a regex string, or another RgxExpression instance or expression. This will help define repeated expression, and maje use ofregex language. RgxExpression.ToString() will return the regex string. The RgxExpression can be like this: ``` class RgxExpression { public string Expression {get; set;} } ``` The extenstion methods should be like this: ``` RgxExpression Foo (this RgxExpression exp) { RgxExpression exp1 = ........; return Merge(exp.Expression, exp1); } ``` This is how I represent email regex for example: ``` var smalls = Range(""a"", ""z""); var caps = Range(""A"",""Z"") var L = Any(smalls, cap, Digit, ""."", ""_"", ""-"") var W1 = L.Repeat(1); var W2 = L.Repeat(2, 4); var email = Boundary.W1.Constant(""@"").W1.Constant(""."").W2.Boundary; string rgx = email.ToString(); In the discussion it appears that there are some similar work like: https://github.com/sprache/Sprache https://github.com/VerbalExpressions/CSharpVerbalExpressions. The problem is there are 100,000 NuGets and impossible to explore them all! My question is: why don't you embrace this idea and add a method-based regular expression, to make it easy for programmers to understand and use? Being a part of the language will make it popular than being an infamous NuGet. By the way: Fast growing NuGets should have an online magazine or something to let us know about. This is a huge fortune but not easy to dig out its treasures.",18
"Memory leak in SendAsync in HttpClient In corefx/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:SendAsync there seems to be a memory leak that is triggered when CancellationToken.None is used. We have created HttpClient once and reuse it: var httpClientHandler = new HttpClientHandler(); httpClientHandler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true; httpClient = new HttpClient(httpClientHandler); httpClient.Timeout = Timeout.InfiniteTimeSpan; And are calling like this: using (var content = PrepareHttpContentJson(input)) using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, new Uri(fullUrl, UriKind.RelativeOrAbsolute))) { request.Content = content; using (HttpResponseMessage result = await httpClient.SendAsync(request, CancellationToken.None)) { // work on result } } PrepareHttpContentJson returns a ByteArrayContent (json content) with ContentType set. If this code is called repeatably, it leaks every `ByteArrayContent` created. Looking to the memory using Diagnostic Tools in Visual Studio, this is what seems to lock the memory: ByteArrayContent > Action<Stream> > HttpWebRequest > ConnectStream > ContextAwareResult > HttpClientHandler+RequestState > CancellationCallbackInfo If I replace `CancellationToken.None` with `cts.Token` in `SendAsync` and create `var cts = new CancellationTokenSource();` just before the first `using`, the memory leak stops. I made this attempt as I checked the source code for HttpClient.cs and noticed some handling of cancellation tokens going on and figured this might be the cause. Note: This MAY be an interaction issue with Autofac, but I don't think so. The `using` code block is resolve by Autofac, but there is only ever 1 instance (registered as single instance) of it (so it wont be disposed between usages).",0
"Move, Reverse, etc. on LinkedList Similar to #14338 we need the ability to manipulate a `LinkedList<T>`, most notably moving nodes within the collection. Another use case is to `Merge` one `LinkedList` into another one at a certain position (before / after a node). Technically the architecture of a double linked list and its nodes makes those feature quite easy to implement while offering good performance independent from list size. ## Useful additions **Swap** nodes in the collection ([SO Thread](https://stackoverflow.com/questions/3473787/swapping-nodes-on-a-single-linked-list)) ````cs public void Swap(object foo, object blah) { // Currently we exploit the fact that the value of nodes can be set var fooNode = _list.Find(foo); var blahNode = _list.Find(blah); fooNode.Value = blah; blahNode.Value = foo; // Proposed _list.Swap(foo, blah); } ```` Overloads for `Swap` should accept nodes and objects. **Move** nodes within the collection ````cs public void MoveNode(object foo, object blah) { // Currently var fooNode = _list.Find(foo); _list.Remove(blah); _list.AddAfter(fooNode, blah); // Proposed _list.MoveAfter(foo, blah); } ```` There should be a method `MoveBefore` and `MoveAfter` with overloads for passing two nodes, one node and one object and two objects. An `InternalMove` method could even be used to replace the code for `AddBefore` and `AddAfter`. **Insert** one linked list into another ````cs public void InsertInto(object foo, LinkedList<object> other) { var position = _list.Find(foo); // Currently foreach(var foo in other) { position = _list.AddAfter(position, foo); } // Proposed _list.InsertAfter(position, other); } ```` Here the workaround is especially painful. I can not simply `AddAfter` because this would reverse the direction. I also can not `AddBefore(position.Next, foo)` because I would have to check for end of collection. I can either reverse `other` or steadily update the `position` variable. Because [`System.Linq.Reverse()`](https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Reverse.cs#L59) does not specifically check for `LinkedList` it will copy the other list to a buffer and reverse iterate that, which is a waste of time and memory in itself. In each case inserting item-by-item also causes constant updates of the pointers that are complety unnessary when looking at the end result. Only the pointers for the first and last node of `other` as well as `position` and possibly `position.Next`. **ReverseIterate** a linked list ````cs public IEnumerable<object> Reverse() { // Currently return _list.Reverse(); // Linq extension copying to buffer // Proposed new implementation of Reverse var current = _list.Last; while(current != null) { yield return current; current = current.Previous; } } ```` I am not sure whether to implement this in `LinkedList` and call it from `Linq.Reverse` or just implementing it in Linq. ## Conclusion I know `ArrayList` is the preferred type in .NET for numerous reasons and when just storing data I agree. But right now we have a use-case of a list that is frequently altered, elements are moved or smaller sorted chunks are inserted and removed. The collection as a whole is less important than the information which elements are next to each other. For all this `LinkedList` is the perfect solution by design. Unfortunately the current implementation of [`LinkedList<T>`](https://github.com/dotnet/corefx/blob/master/src/System.Collections/src/System/Collections/Generic/LinkedList.cs) and its [`LinkedListNode<T>`](https://github.com/dotnet/corefx/blob/master/src/System.Collections/src/System/Collections/Generic/LinkedList.cs) is locked down like Fort-Knox, making it impossible to add the features in a derived type, even if I wanted to. So I need to decide whether to implement the entire list myself or to work around the features. Most of the workarounds (e.g. Remove + AddBefore instead of MoveBefore) require creating new objects instead of changing references because most operations and members are internal or perform node validation when trying to insert nodes from a different collection.",7
"Does ReadOnlySequence open write access to ReadOnlyMemory? As I see when `ReadOnlySequence` created with `ReadOnlyMemory`, it extract internal object of `ReadOnlyMemory` (`array`, `string` or `OwnedMemory`) and give access to that object throw GetPosition method. So `ReadOnlySequence` opens access to `array` or `OwnedMemory`. But `array` or `OwnedMemory` are not read only objects and they opens write access to `ReadOnlyMemory`. So any code can get write access to `ReadOnlyMemory` (over `array` or `OwnedMemory`) in safe code by using `ReadOnlySequence`. Am I right? And **is it correct API design?** Also I does not understand benefits of using `ReadOnlySequence` that contains only one segment. If your use only one segment you can use `ReadOnlyMemory` or `string` or `OwnedMemory` directly. So I think that all one segment optimizations are usefulness because they drawback performance for `ReadOnlySequence` with few segments.",10
"Add more EnvelopedCms tests This change brings the EnvelopedCms tests which were added in the dev/cms_unix branch to master. Thankfully, they all just pass. Thanks for contributing these long ago, @hoyosjs.",3
Test failure: System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests/IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(count: 0) Opened on behalf of @Sunny-pu The test `System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests/IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(count: 0)` has failed. System.OutOfMemoryException : Exception of type 'System.OutOfMemoryException' was thrown. Stack Trace: at System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(Int32 count) Build : 2.0.0 - 20180321.02 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64 - Release Details: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20180321.02/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.SortedDictionary_IDictionary_NonGeneric_Tests~2FIDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull(count:%200),7
"Test failure: GetAsync_CancelPendingRequests_DoesntCancelReadAsyncOnResponseStream CurlHandler incorrectly maintains a registration with the CancellationToken passed in to SendAsync for the duration of the whole operation, including processing of the response body, even if HttpCompletionOption.ResponseHeadersRead is used. That means that HttpClient.CancelAllPending will cancel such operations. It should unregister from that token once it completes the Task returned from SendAsync.",0
"The type initializer for 'TimeZoneConverter.TZConvert' threw an exception. I got this error on aws lambda. The type initializer for 'TimeZoneConverter.TZConvert' threw an exception. ""errorMessage"": ""An item with the same key has already been added. Key: Canada/East-Saskatchewan"",",4
Handle User-Agent/Server writing similarly to HttpHeaders.GetHeaderString Fixes https://github.com/dotnet/corefx/issues/28951 (Tests pending) This changes writing headers similarly to what we do here: https://github.com/dotnet/corefx/blob/d5351fe933f0f4682ac465b656b2a438b076c24e/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs#L309-L329,0
"FontFamily.Equals in Linux use .Name instead of NativeFamily pointer which is not a singleton Fixes: https://github.com/dotnet/corefx/issues/28052 In linux FontFamily objects are not treated as singleton so their NativeFamily pointers can change from object to object. However, when getting the FontFamily.Name from the native pointer we would get the same value if the FontFamily is the same. However since we depend on the different font families across operative systems and Linux distros, we can have results where 2 fonts in linux are part of the same font family and in windows they are part of different families. cc: @danmosemsft @qmfrederik",13
"HttpClient doesn't send Connection: close header on some platforms WCF allows disabling persistent connections for HTTP requests. When persistent connections are disabled, WCF runs this code: ```csharp httpClient.DefaultRequestHeaders.ConnectionClose = true; ``` This fails to send the `Connection: close` header for requests on Fedora.27, Fedora.26, Debian.90 and OSX.1013. This header is successfully sent on Centos, Debian.87, OSX.1012, RedHat, SLES, Ubuntu, Windows and OpenSuse.",0
System.Net.Sockets.Tests - IOControl_SIOCATMARK_Windows_Success failing on Windows.7.Amd64.Open-Release-x86 From https://github.com/dotnet/corefx/pull/27713 Windows.7.Amd64.Open-Release-x86 System.Net.Sockets.Tests.OSSupportTest/IOControl_SIOCATMARK_Windows_Success https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/79e54627d75ab93d5654d9803b57c9ea305cfb9f/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.OSSupportTest~2FIOControl_SIOCATMARK_Windows_Success ```text Message : Assert.Equal() Failure Expected: 0 Actual: 1 Stack Trace : at System.Net.Sockets.Tests.OSSupportTest.IOControl_SIOCATMARK_Windows_Success() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Sockets\tests\FunctionalTests\OSSupport.cs:line 166 ```,0
Productize OwnedArray<T> What are the plans for productizing OwnedArray<T>? (https://github.com/dotnet/corefxlab/blob/master/src/System.Buffers.Primitives/System/Buffers/OwnedArray.cs) Is it expected to be included in System.Buffers in 2.1? cc @ahsonkhan @KrzysztofCwalina,10
"Add more alternate data stream tests cc: @danmosemsft, @Anipik, @pjanotti",5
These definitions have been deprecated by the vsts maintenance jobs. Related to issue: https://github.com/dotnet/core-eng/issues/2964,1
"Conditional access support in IIdentity This is not a feature request, more raising an issue for possible consideration. When logging in from a new IP address, a new device or other criteria a identity provider could flag the authentication as limited. The `IIdentity` interface could be extended with a property to communicate this information. Perhaps a boolean, possibly named `IsAuthenticationLimited` or something. ## Rationale and Usage Allows you to hide/reduce functionality in case of any uncertainty in the authentication. ```cshtml @if (User.Identity.IsAuthenticationLimited) { <video src=""movie_720p.webm"" /> } else { <video src=""movie_4k.webm"" /> } ``` ```cshtml @if (!User.Identity.IsAuthenticationLimited) { <button class=""btn btn-danger"" type=""submit"">Delete data and close my account</button> } ``` ```cs [HttpPost] public IActionResult DeleteAccount() { if (User.Identity.IsAuthenticationLimited) { return BadRequest(); } await _userManager.DeleteAsync(User); return View(); } ``` ## Proposed API ```cs public interface IIdentity { string Name { get; } string AuthenticationType { get; } bool IsAuthenticated { get; } bool IsAuthenticationLimited { get; } // The possible addition } ``` ## Open Questions * Does any identity provider communicate this? * Is this standardized in any authentication protocol such as OAuth or OpenID Connect?",3
"SocketsHttpHandler does not work on single core machines While trying to repro an issue on Win7 I have been running into consistent failures in all tests using Http. I think that it is a result of the changes introduced in PR #28638. The assertion being hit is on line 48 of ConcurrentQueue_Segment.cs. `boundedLength` has a value of 1. https://github.com/dotnet/corefx/blob/943e316297df4b0767e46dbb87f97ea861c6817e/src/Common/src/System/Collections/Concurrent/ConcurrentQueue_Segment.cs#L47-L49 The assertion is failing because of the following lines in SocketsHttpHandler ConnectHelper: https://github.com/dotnet/corefx/blob/943e316297df4b0767e46dbb87f97ea861c6817e/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs#L19-L22 When the processor count is 1, RoundUpToPowerOf2 returns 1 (2<sup>0</sup>...), which is below the lower bound enforced by ConcurrentQueue. The failures don't repro in CI because all of the test machines have more than one core. cc: @stephentoub @davidsh",0
"Issue connecting to MS SQL Server running on non default port 1433 @mahesji commented on [Fri Feb 09 2018](https://github.com/dotnet/core/issues/1264) # Issue Title Issue connecting to MS SQL Server running on non default port 1433 from Linux environment **OS Version** Linux 4.4.0-109-generic #132~14.04.1-Ubuntu SMP Tue Jan 9 21:46:42 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux dotnet core project settings ``` <Project Sdk=""Microsoft.NET.Sdk.Web""> <PropertyGroup> <TargetFramework>netcoreapp2.0</TargetFramework> <RuntimeFrameworkVersion>2.0.5</RuntimeFrameworkVersion> </PropertyGroup> <ItemGroup> <Folder Include=""wwwroot\"" /> </ItemGroup> <ItemGroup> <PackageReference Include=""Microsoft.AspNetCore.All"" Version=""2.0.5"" /> <PackageReference Include=""System.Data.SqlClient"" Version=""4.4.2"" /> </ItemGroup> <ItemGroup> <DotNetCliToolReference Include=""Microsoft.VisualStudio.Web.CodeGeneration.Tools"" Version=""2.0.2"" /> </ItemGroup> </Project> ``` # General Using System.Data.SqlClient to connect to Sql server database. Following the sample in this post https://blogs.msdn.microsoft.com/dotnet/2016/11/09/net-core-data-access/ It works fine if the sql server is listening on port 1433 but fails when connecting to sql servers listening on port 1434. Confirmed that there is no network / firewall issues that that is blocking the ports. Able to connect to the same sql server on port 1434 using java code. This connection string works > Server=myhostname,1433;Database=mydatabase;User Id=myuser;Password=mypassword; This connection string does not work in above linux environment. Works fine on windows Server=myhostname,1434;Database=mydatabase;User Id=myuser;Password=mypassword; Both connect strings work fine in Windows environment. Record Fetch Error: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 35 - An internal exception was caught) --- @usergiga commented on [Fri Feb 09 2018](https://github.com/dotnet/core/issues/1264#issuecomment-364605423) If an instance of SQL Server is listening on any other port, than 1433. You have to specify a server-alias or change the standard port globally. You can have SQL Server listening on multiple ports. --- @mahesji commented on [Mon Feb 12 2018](https://github.com/dotnet/core/issues/1264#issuecomment-364967845) @usergiga , Thank you for the reply. I have the alias created and that doesn't seem to help. The connection works fine in Windows runtime. Have this issue only in the Linux (Ubuntu) runtime.",15
"Test failure: System.Net.Security.Tests.ServerAsyncAuthenticateTest/ServerAsyncAuthenticate_EachServerUnsupportedProtocol_Fail(protocol: Ssl3) Opened on behalf of @Sunny-pu The test `System.Net.Security.Tests.ServerAsyncAuthenticateTest/ServerAsyncAuthenticate_EachServerUnsupportedProtocol_Fail(protocol: Ssl3)` has failed. Assert.Throws() Failure Expected: typeof(System.NotSupportedException) Actual: typeof(System.TimeoutException): Task timed out after 240000 Stack Trace: at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, Int32 millisecondsTimeout) at System.Net.Security.Tests.ServerAsyncAuthenticateTest.ServerAsyncSslHelper(SslProtocols clientSslProtocols, SslProtocols serverSslProtocols, Boolean expectedToFail) in /Users/buildagent/agent/_work/391/s/corefx/src/System.Net.Security/tests/FunctionalTests/ServerAsyncAuthenticateTest.cs:line 137 Build : Master - 20180328.01 (Core Tests) Failing configurations: - OSX.1012.Amd64-x64 - Release Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180328.01/workItem/System.Net.Security.Tests/analysis/xunit/System.Net.Security.Tests.ServerAsyncAuthenticateTest~2FServerAsyncAuthenticate_EachServerUnsupportedProtocol_Fail(protocol:%20Ssl3)",0
